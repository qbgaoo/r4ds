# 数据整理 {#sec-data-tidy}

```{r}
#| echo: false

source("_common.R")
```

## 引言

> "幸福的家庭都是相似的；每个不幸的家庭各有各的不幸。"\
> --- 列夫·托尔斯泰

> "整洁的数据集都是相似的，但每个混乱的数据集各有各的混乱方式。"\
> --- 哈德利·威克汉姆

在本章中，你将学习一种在R中组织数据的一致方法，即利用一种被称为整齐数据（tidy data）的系统。将
数据整理成这种格式需要一些前期工作，但从长远来看，这些工作是值得的。一
旦你有了整齐的数据和tidyverse包提供的整理工具，你将花费更少的时间将数据从一种表现形式转换为另一种表现形式，从而让你有更多的时间投入到你关心的数据问题上。

在本章中，你将首先学习整齐数据的定义，并将其应用于一个简单的示例数据集。然
后，我们将深入探讨用于整理数据的主要工具：数据重塑（data pivoting），数据透视允许你改变数据的格式而不改变任何值。

### 必要条件

本章将重点介绍`tidyr`，它提供了一系列工具来帮助整理混乱的数据集，是tidyverse的一个成员。

```{r}
#| label: setup
#| message: false

library(tidyverse)
```

从本章开始，我们将阻止`library(tidyverse)`的加载消息。

## 整齐数据 {#sec-tidy-data}

你可以用多种方式表示相同的基础数据。下
面的例子展示了以三种不同的方式组织的同一数据。每
个数据集都显示了四个变量的相同值：国家（*country*）、年份（*year*）、人口（*population*）和记录在案的结核病（tuberculosis，TB）病例数（*cases*），但每个数据集都以不同的方式组织这些值。

```{r}
table1

table2

table3
```

它们都表示了同一基础数据，但使用难度并不相同。其
中，`table1` 在tidyverse中更容易使用，因为它很整齐（tidy）。

使一个数据集整齐的三个相互关联的规则是：

1.  每个变量都是一列；每一列都是一个变量；
2.  每个观测值都是一行；每一行都是一个观测值；
3.  每个值都是一个单元格；每个单元格都是一个单一的值。

@fig-tidy-structure 直观地展示了这些规则。

```{r}
#| label: fig-tidy-structure
#| echo: false
#| fig-cap: | 
#|   The following three rules make a dataset tidy: variables are columns,
#|   observations are rows, and values are cells.
#| fig-alt: | 
#|   Three panels, each representing a tidy data frame. The first panel
#|   shows that each variable is a column. The second panel shows that each
#|   observation is a row. The third panel shows that each value is
#|   a cell.

knitr::include_graphics("images/tidy-1.png", dpi = 270)
```

为什么要确保你的数据是整齐的？有
两个主要优势：

1.  选择一种一致的数据存储方式具有普遍优势。如果你的数据结构是一致的，学习与之配合使用的工具就更容易，因为它们具有底层的一致性。
2.  将变量放在列中具有特定的优势，因为这可以让R的矢量化特性大放异彩。正如你在\@sec-mutate 和\@sec-summarize 所学到的，大多数内置的R函数都使用值的向量。这使得处理整齐数据感觉特别自然。

dplyr、ggplot2以及tidyverse中的所有其他包都是为处理整齐数据而设计的。下
面代码是一些展示如何使用`table1`的小示例。

```{r}
#| fig-width: 5
#| fig-alt: |
#|   This figure shows the number of cases in 1999 and 2000 for 
#|   Afghanistan, Brazil, and China, with year on the x-axis and number 
#|   of cases on the y-axis. Each point on the plot represents the number 
#|   of cases in a given country in a given year. The points for each
#|   country are differentiated from others by color and shape and connected
#|   with a line, resulting in three, non-parallel, non-intersecting lines.
#|   The numbers of cases in China are highest for both 1999 and 2000, with
#|   values above 200,000 for both years. The number of cases in Brazil is
#|   approximately 40,000 in 1999 and approximately 75,000 in 2000. The
#|   numbers of cases in Afghanistan are lowest for both 1999 and 2000, with
#|   values that appear to be very close to 0 on this scale.

# Compute rate per 10,000
table1 |>
  mutate(rate = cases / population * 10000)

# Compute total cases per year
table1 |> 
  group_by(year) |> 
  summarize(total_cases = sum(cases))

# Visualize changes over time
ggplot(table1, aes(x = year, y = cases)) +
  geom_line(aes(group = country), color = "grey50") +
  geom_point(aes(color = country, shape = country)) +
  scale_x_continuous(breaks = c(1999, 2000)) # x-axis breaks at 1999 and 2000
```

### 练习

1.  对于每个示例表格，描述每个观测值和每列分别代表什么。

2.  概述你将如何计算`table2`和`table3`中的`rate`。你
    需要执行四个操作：

    a.  提取每个国家每年的TB病例数；
    b.  提取每个国家每年对应的人口数；
    c.  将病例数除以人口数，然后乘以10000；
    d.  将结果存储回适当的地方.

    你还没有学习所有实际执行这些操作所需的函数，但应该仍然能够思考出所需的转换步骤。

## 数据转换—长格式 {#sec-pivoting}

整齐数据的原则可能看起来如此显而易见，以至于你怀疑是否会遇到不整齐的数据集。然
而，不幸的是，大多数真实数据都是不整齐的。这
主要有两个原因：

1.  数据通常是为了方便除了分析以外的其他目的而组织的。例
    如，数据通常以易于数据录入而不是分析的结构来组织。

2.  大多数人并不熟悉整齐数据的原则，除非你花很多时间处理数据，否则很难自己推导出这些原则。

这意味着大多数实际分析至少需要进行一些整理。首
先要弄清楚基础变量和观测值是什么，有时这很简单，有时你需要咨询最初生成数据的人；接下来，你需要将数据重塑（**pivot**）为整齐的形式，将变量放在列中，将观测值放在行中。

tidyr包提供了两个用于数据重塑的函数：`pivot_longer()`和`pivot_wider()`。我
们将首先从`pivot_longer()`开始，因为它是最常见的情况。让
我们深入探讨一些示例。

### 列名中的数据 {#sec-billboard}

`billboard`数据集记录了 2000 年歌曲的 Billboard 排行榜排名:

```{r}
billboard
```

在这个数据集中，每个观测都是一首歌。前
三列（`artist`、`track` 和 `date.entered`）是描述歌曲的变量。然
后有76列（`wk1`-`wk76`）描述了歌曲在每周的排名[^data-tidy-1]。
在这里，列名是一个变量（`week`），而单元格的值是另一个变量（`rank`）。

[^data-tidy-1]: 只要这首歌在2000年的某个时间点进入排行榜前100名，它就会被收录，并在它出现后的72周内被追踪。

为了整理这个数据，我们使用 `pivot_longer()`:

```{r, R.options=list(pillar.print_min = 10)}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  )
```

数据之后，有三个关键参数：

-   `cols` 指定了哪些列需要进行重塑，即哪些列不是变量。这个参数使用了与`select()`相同的语法，因此在这里我们可以使用`!c(artist, track, date.entered)`或者`starts_with("wk")`。
-   `names_to` 用于命名列名中存储的变量，我们将其命名为`week`
-   `values_to` 用于命名单元格值中存储的变量，我们将其命名为`rank`。

请注意，代码中`“week”`和`“rank”`被引号括起来，因为这些是我们创建的新变量，在运行`pivot_longer()`调用时它们还不在数据中。

现在让我们把注意力转向得到的长数据框。如
果一首歌在前100名中的时间少于76周，会发生什么？以
2 Pac的《Baby Don't Cry》为例。上
面的输出表明它只在前100名中待了7周，而其余所有周都填充了缺失值。这
些NA并不真正代表未知的观测值，它们是由于数据集的结构而被迫存在的，因此我们可以要求`pivot_longer()`通过设置`values_drop_na = TRUE`来删除它们：

```{r}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  )
```

现在行数大大减少，这表明许多包含`NA`的行已被删除。

你也可能会好奇，如果一首歌在前100名中超过76周，会发生什么？从
这些数据中我们无法得知，但你可以猜测数据集会添加额外的列，如`wk77`、`wk78`等。

现在数据已经整齐了，但我们可以通过使用`mutate()`和`readr::parse_number()`将`week`的值从字符串转换为数字，以使未来的计算更加方便。`p`
`arse_number()`是一个方便的函数，它会从字符串中提取第一个数字，忽略其他所有文本。

```{r}
billboard_longer <- billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  ) |> 
  mutate(
    week = parse_number(week)
  )
billboard_longer
```

既然我们已经将所有周数放入一个变量，并将所有排名值放入另一个变量，现在可以很好地可视化歌曲排名如何随时间变化。下
面的代码展示了这一点，结果位于\@fig-billboard-ranks 。我
们可以看到，很少有歌曲能在前100名中保持超过20周的时间。

```{r}
#| label: fig-billboard-ranks
#| fig-cap: |
#|   A line plot showing how the rank of a song changes over time.
#| fig-alt: |
#|   A line plot with week on the x-axis and rank on the y-axis, where
#|   each line represents a song. Most songs appear to start at a high rank,
#|   rapidly accelerate to a low rank, and then decay again. There are
#|   surprisingly few tracks in the region when week is >20 and rank is
#|   >50.

billboard_longer |> 
  ggplot(aes(x = week, y = rank, group = track)) + 
  geom_line(alpha = 0.25) + 
  scale_y_reverse()
```

### pivoting是如何工作的?

既然你已经看到了我们如何使用pivoting来重塑我们的数据，让我们花点时间来直观地理解pivoting对数据做了什么。让
我们从一个非常简单的数据集开始，以便更容易地看到发生了什么。假
设我们有三个患者，`id`分别为A、B和C，对每个患者进行了两次血压测量。我
们使用`tribble()`来创建这些数据，tribble()是一个易用的函数，这里通过手动构造小型tibble对象：

```{r}
df <- tribble(
  ~id,  ~bp1, ~bp2,
   "A",  100,  120,
   "B",  140,  115,
   "C",  120,  125
)
```

我们希望新数据集有三个变量：id（已存在）、measurement（列名）和value（单元格值）。为
了实现这一点，我们需要将df重塑（pivot）为更长的格式：

```{r}
df |> 
  pivot_longer(
    cols = bp1:bp2,
    names_to = "measurement",
    values_to = "value"
  )
```

重塑是如何工作的？如
果我们按列思考，就会更容易理解。如
@fig-pivot-variables 所示，在原始数据集中已经是变量的列（如id）的值需要被重复，每个被重塑的列重复一次。

```{r}
#| label: fig-pivot-variables
#| echo: false
#| fig-cap: | 
#|   Columns that are already variables need to be repeated, once for
#|   each column that is pivoted.
#| fig-alt: | 
#|   A diagram showing how `pivot_longer()` transforms a simple
#|   dataset, using color to highlight how the values in the `id` column
#|   ("A", "B", "C") are each repeated twice in the output because there are
#|   two columns being pivoted ("bp1" and "bp2").

knitr::include_graphics("diagrams/tidy-data/variables.png", dpi = 270)
```

列名变成新变量的值，新变量的名称由`names_to`定义，如\@fig-pivot-names 所示。它
们需要在原始数据集的每一行中重复一次。

```{r}
#| label: fig-pivot-names
#| echo: false
#| fig-cap: |
#|   The column names of pivoted columns become values in a new column. The 
#|   values need to be repeated once for each row of the original dataset.
#| fig-alt: | 
#|   A diagram showing how `pivot_longer()` transforms a simple
#|   data set, using color to highlight how column names ("bp1" and 
#|   "bp2") become the values in a new `measurement` column. They are repeated
#|   three times because there were three rows in the input.

knitr::include_graphics("diagrams/tidy-data/column-names.png", dpi = 270)
```

单元格值也变成新变量的值，新变量的名称由`values_to`定义。它
们被逐行地展开。\@
fig-pivot-values 展示了这一过程。

```{r}
#| label: fig-pivot-values
#| echo: false
#| fig-cap: |
#|   The number of values is preserved (not repeated), but unwound
#|   row-by-row.
#| fig-alt: | 
#|   A diagram showing how `pivot_longer()` transforms data,
#|   using color to highlight how the cell values (blood pressure measurements)
#|   become the values in a new `value` column. They are unwound row-by-row,
#|   so the original rows (100,120), then (140,115), then (120,125), become 
#|   a column running from 100 to 125.

knitr::include_graphics("diagrams/tidy-data/cell-values.png", dpi = 270)
```

### 列名中包含多个变量

当列名中融合了多个信息片段而你希望将这些信息分散到独立的新变量中时，情况就会变得更加复杂。这
里以你之前看到的`table1`等表的源头数据集`who2`为例：

```{r}
who2
```

这个数据集由世界卫生组织收集，记录了关于结核病诊断的信息,其中有两个列已经是变量且易于解读：`country`和`year`。接
着是56个像`sp_m_014`、`ep_m_4554`和`rel_m_3544`这样的列。如
果你长时间盯着这些列看就会发现一个规律。每
个列名都由三部分组成，由`_`分隔。第
一部分`sp`/`rel`/`ep`描述了用于诊断的方法；第二部分`m`/`f`是性别（在这个数据集中被编码为二进制变量）；第三部分，`014`/`1524`/`2534`/`3544`/`4554`/`5564`/`65`是年龄范围（例如，`014`代表0-14岁）。

因此，在这种情况下，`who2`数据集中记录了六条信息：country和year（已经是列）；诊断方法、性别和年龄范围类别（包含在其他列名中），以及该类别中的患者数量（单元格值）。为
了将这六条信息组织到六个单独的列中，我们使用`pivot_longer()`函数，并为`names_to`提供一个列名字符串向量，以及为`names_sep`提供一个指令来将原始变量名分割成片段，并为`values_to`提供一个列名：

```{r}
who2 |> 
  pivot_longer(
    cols = !(country:year),
    names_to = c("diagnosis", "gender", "age"), 
    names_sep = "_",
    values_to = "count"
  )
```

除了`names_sep`之外，你还可以使用`names_pattern`。当
你在\@sec-regular-expressions 学习了正则表达式之后，就可以使用它来从更复杂的命名场景中提取变量。

从概念上讲，这只是在你之前看到的简单情况上做了微小的变化。\@
sec-regular-expressions 展示了基本思想：现在，列名不再只是转换为一个单独的列，而是转换为多个列。你
可以想象这个过程分为两步（首先转换然后分割），但实际上它是在一步中完成的，因为这样更快。

```{r}
#| label: fig-pivot-multiple-names
#| echo: false
#| fig-cap: |
#|   Pivoting columns with multiple pieces of information in the names 
#|   means that each column name now fills in values in multiple output 
#|   columns.
#| fig-alt: |
#|   A diagram that uses color to illustrate how supplying `names_sep` 
#|   and multiple `names_to` creates multiple variables in the output.
#|   The input has variable names "x_1" and "y_2" which are split up
#|   by "_" to create name and number columns in the output. This is
#|   is similar case with a single `names_to`, but what would have been a
#|   single output variable is now separated into multiple variables.

knitr::include_graphics("diagrams/tidy-data/multiple-names.png", dpi = 270)
```

### 列标题中的数据和变量名

接下来更复杂的步骤是当列名包含变量值和变量名的混合时。例
如，以`household`数据集为例：

```{r}
household
```

这个数据集包含了五个家庭的数据，每个家庭最多有两个孩子的姓名和出生日期。数
据集中的新挑战是列名包含了两个变量的名称（`dob`、`name`）和另一个变量（`child`，其值为1或2）的值。为
了解决这个问题，我们再次需要向`names_to`提供一个向量，但这次我们使用特殊的`".value"`哨兵值（sentinel）；这不是变量的名称，而是一个独特的值，它告诉`pivot_longer()`做一些不同的事情。这
会覆盖通常的`values_to`参数，使用重塑后的列名的第一个组成部分作为输出中的变量名。

```{r}
household |> 
  pivot_longer(
    cols = !family, 
    names_to = c(".value", "child"), 
    names_sep = "_", 
    values_drop_na = TRUE
  )
```

由于输入数据的格式，必须创建一些明确的缺失变量（例如，对于只有一个孩子的家庭）通过设置`values_drop_na = TRUE`，我们可以选择忽略这些由于数据不完整而产生的NA值。。

@fig-pivot-names-and-values 通过一个更简单的示例说明了基本思想。当
您在`names_to`中使用`".value"`时，输入中的列名对输出中的值和变量名都有贡献。

```{r}
#| label: fig-pivot-names-and-values
#| echo: false
#| fig-cap: |
#|   Pivoting with `names_to = c(".value", "num")` splits the column names
#|   into two components: the first part determines the output column
#|   name (`x` or `y`), and the second part determines the value of the
#|   `num` column.
#| fig-alt: |
#|   A diagram that uses color to illustrate how the special ".value"
#|   sentinel works. The input has names "x_1", "x_2", "y_1", and "y_2",
#|   and we want to use the first component ("x", "y") as a variable name
#|   and the second ("1", "2") as the value for a new "num" column.

knitr::include_graphics("diagrams/tidy-data/names-and-values.png", dpi = 270)
```

## 数据转换—宽格式

到目前为止，我们已经使用`pivot_longer()`函数来解决了一个常见问题，即值最终出现在列名中的情况。接
下来，我们将转置（HA HA，这里是一个双关语，因为pivot在英语中也有“转置”的意思）到`pivot_wider()`函数，该函数通过增加列和减少行来使数据集变宽，这在一个观测分布在多行时特别有用。这
种情况在实际数据中较少出现，但在处理政府数据时似乎很常见。

我们将首先查看`cms_patient_experience`数据集，这是一个来自医疗保险和医疗补助服务中心（Centers of Medicare and Medicaid Services）的数据集，该数据集收集了关于患者体验的数据：

```{r}
cms_patient_experience
```

被研究的核心单位是组织，但每个组织都分布在六行中，每行代表调查组织中的一个测量值。我
们可以通过使用`distinct()`函数来查看`measure_cd`和`measure_title`值的完整集。

```{r}
cms_patient_experience |> 
  distinct(measure_cd, measure_title)
```

这两列都不会成为特别好的变量名：`measure_cd`没有暗示变量的含义，而`measure_title`是一个包含空格的长句子。目
前我们将使用`measure_cd`作为新列名的来源，但在实际分析中，你可能希望创建既简短又有意义的变量名。

`pivot_wider()`与`pivot_longer()`的操作正好相反。它
不需要定义新的列名，而是选择一个现有列来提供值（`values_from`），并选择另一个列来定义新的列名（`names_from`）。

```{r}
cms_patient_experience |> 
  pivot_wider(
    names_from = measure_cd,
    values_from = prf_rate
  )
```

输出的结果看起来不太对，因为似乎每个组织仍然有多行数据。这
是因为我们还需告诉`pivot_wider()`哪个列或哪些列的值能够唯一地标识每一行；在这个例子中，这些是以 `"org"` 开头的变量。

```{r}
cms_patient_experience |> 
  pivot_wider(
    id_cols = starts_with("org"),
    names_from = measure_cd,
    values_from = prf_rate
  )
```

这就给出了我们想要的输出。

### `pivot_wider()`是如何工作的？

为了理解`pivot_wider()`是如何工作的，让我们再次从一个非常简单的数据集开始。这
次我们有两个患者，`id`分别为A和B，我们在患者A上进行了三次血压测量，在患者B上进行了两次测量：

```{r}
df <- tribble(
  ~id, ~measurement, ~value,
  "A",        "bp1",    100,
  "B",        "bp1",    140,
  "B",        "bp2",    115, 
  "A",        "bp2",    120,
  "A",        "bp3",    105
)
```

我们将从`value`列中获取值，从`measurement`列中获取名称:

```{r}
df |> 
  pivot_wider(
    names_from = measurement,
    values_from = value
  )
```

要开始这个过程，`pivot_wider()`首先需要弄清楚行和列中的内容。新
的列名将是`measurement`的唯一值。

```{r}
df |> 
  distinct(measurement) |> 
  pull()
```

默认情况下，输出中的行由不包含在新名称或值中的所有变量决定。这
些被称为`id_cols`。这
里只有一列，但通常可以是任意数量的列。

```{r}
df |> 
  select(-measurement, -value) |> 
  distinct()
```

然后`pivot_wider()`将这些结果组合起来生成一个空数据框:

```{r}
df |> 
  select(-measurement, -value) |> 
  distinct() |> 
  mutate(x = NA, y = NA, z = NA)
```

然后，它使用输入中的数据填充所有缺失的值。在
这个例子中，输出中的每个单元格在输入中并非都有对应的值，因为患者B没有第三次血压测量，所以那个单元格的值是缺失的。我
们将在 @sec-missing-values 中探讨`pivot_wider()`可以“制造”缺失值这个观点。

你可能还会想，如果输入中有多个行对应于输出中的一个单元格会发生什么。下
面的例子中有两行对应于`id`为“A”和`measurement`为“bp1”的单元格：

```{r}
df <- tribble(
  ~id, ~measurement, ~value,
  "A",        "bp1",    100,
  "A",        "bp1",    102,
  "A",        "bp2",    120,
  "B",        "bp1",    140, 
  "B",        "bp2",    115
)
```

如果我们尝试对这样的数据集进行重塑，会得到一个包含列表-列的输出，你将在\@sec-rectangling 中学习更多关于列表-列的内容：

```{r}
df |>
  pivot_wider(
    names_from = measurement,
    values_from = value
  )
```

由于你还不知道如何处理这类数据，因此需要遵循警告中的提示来找出问题所在:

```{r}
df |> 
  group_by(id, measurement) |> 
  summarize(n = n(), .groups = "drop") |> 
  filter(n > 1)
```

接下来你需要找出你的数据出了什么问题，然后修复潜在的损坏，或者使用你的分组和汇总技能来确保每个行和列值的组合都只有一行。

## 小结

在本章中，你学习了整整齐数据：将数据变量放在列中，观测放在行中。整
齐数据使得在tidyverse环境中工作更加容易，因为它是一种被大多数函数所理解的统一结构。主
要的挑战是将你从任何结构中接收到的数据转换为整齐格式。为
此，你学习了`pivot_longer()`和`pivot_wider()`函数，它们允许你整理许多不整齐的数据集。我
们在这里给出的例子是从`vignette("pivot", package = "tidyr")`中挑选出来的，因此如果你遇到本章没有帮助你解决的问题，那么vignette是一个进行尝试的好地方。

另一个挑战是，对于给定的数据集，可能无法将更长或更宽的版本标记为“整齐”的，这在一定程度上反映了我们对整洁数据的定义。我
们说整齐数据在每列中都有一个变量，但我们实际上并没有定义什么是变量（而且实际上很难这样做）。务
实地说，变量就是使你的分析最容易进行的任何东西。因
此，如果你正在为如何进行某些计算而苦恼，请考虑更改你的数据组织方式；不要害怕在需要时取消整齐化、转换和重新整齐化！

如果你喜欢这一章并想了解更多底层理论，你可以学习发表在《Journal of Statistical Software》上的[Tidy Data](https://www.jstatsoft.org/article/view/v059i10) 论文中的历史和理论基础。

现在你已经编写了大量的R代码，是时候学习如何将你的代码组织到文件和目录中了。在
下一章中，你将了解脚本和项目的所有优势，以及它们提供的一些工具，这些工具将使你的生活更加轻松。
