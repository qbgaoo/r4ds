# 数据导入 {#sec-data-import}

```{r}
#| echo: false

source("_common.R")
```

## 引言

使用R包提供的数据来学习数据科学工具是一个很好的方法，但总有一天你会想将所学应用于自己的数据。在
本章中，你将学习将数据文件读入R的基础知识。

具体来说，本章将重点关注读取纯文本矩形文件。我
们将从处理列名、类型和缺失数据的实用建议开始。然
后，学习如何一次从多个文件中读取数据，以及如何将R中的数据写入文件。最
后，学习如何在R中手动创建数据框。

### 必要条件

在本章中，你将学习如何使用**readr**包在R中加载平面文件，readr包是核心包tidyverse的一部分。

```{r}
#| label: setup
#| message: false

library(tidyverse)
```

## 从文件读取数据

首先，我们将关注最常见的矩形数据文件类型：CSV（Comma-Separated Values的缩写）。下
面是一个简单的CSV文件，第一行通常被称为标题行，给出了列名，接下来的六行提供了数据，列之间由逗号分隔，也称为定界符。

```{r}
#| echo: false
#| message: false
#| comment: ""

read_lines("data/students.csv") |> cat(sep = "\n")
```

@tbl-students-table 以表格形式呈现了相同的数据。

```{r}
#| label: tbl-students-table
#| echo: false
#| message: false
#| tbl-cap: Data from the students.csv file as a table.

read_csv("data/students.csv") |>
  knitr::kable()
```

我们使用`read_csv()`将这个文件读入R。第
一个参数是最重要的：文件路径。可
以将路径视为文件的地址，文件名为`students.csv`，它位于`data`文件夹中。

```{r}
#| message: true

students <- read_csv("data/students.csv")
```

上面的代码在你的项目中存在名为 `data` 的文件夹并且其中包含 `students.csv` 文件时有效。您
可以从<https://pos.it/r4ds-students-csv>下载 `students.csv` 文件，或者可以直接从该URL读取它，使用如下方式：

```{r}
#| eval: false

students <- read_csv("https://pos.it/r4ds-students-csv")
```

当你运行`read_csv()`时，它会输出一条消息，告诉你数据的行数和列数、所使用的分隔符以及列规范（按列中数据类型组织的列名）。它
还会输出关于如何检索完整列规范和如何静默此消息的一些信息。这
条消息是`readr`包的一个组成部分，我们将在 @sec-col-types 中再次讨论它。

### 实用建议

一旦你读取了数据，第一步通常是以某种方式转换它，以使其在剩余的分析中更容易处理。让
我们带着这个想法再次查看`students`数据。

```{r}
students
```

在`favourite.food`列中有一堆食品项目，然后是字符串`N/A`，它应该是一个 R 会识别为“不可用”的真正的`NA`值。这
是我们可以通过`na`参数来解决的问题。默
认情况下，`read_csv()`只将此数据集中的空字符串(`""`) 识别为 `NA`s，我们希望它也能识别字符串`"N/A"`。

```{r}
#| message: false
students <- read_csv("data/students.csv", na = c("N/A", ""))

students
```

你可能还注意到，`Student ID`和`Full Name`列使用了反引号。这
是因为它们包含空格，违反了 R 中变量名的常规规则，它们是非语法（**non-syntactic**）名称。要
引用这些变量，你需要使用反引号`` ` ``将它们括起来。

```{r}
students |> 
  rename(
    student_id = `Student ID`,
    full_name = `Full Name`
  )
```

另一种方法是使用`janitor::clean_names()`函数，该函数使用一些启发式方法来一次性将它们全部转换为蛇形命名法（snake case）[^data-import-1]。

[^data-import-1]: [janitor](http://sfirke.github.io/janitor/)包不是tidyverse的一部分，但它提供了方便的数据清理功能，并且在使用`|>`的数据管道中工作得很好。

```{r}
#| message: false

students |> janitor::clean_names()
```

读取数据后的另一个常见任务是考虑变量类型。例
如，`meal_plan`是一个分类变量，具有一组已知的可能值，在 R 中应该表示为因子：

```{r}
students |>
  janitor::clean_names() |>
  mutate(meal_plan = factor(meal_plan))
```

请注意，`meal_plan`变量中的值保持不变，但变量名下方表示的变量类型已经从字符型（`<chr`\>）变为了因子型（\<`fct`\>）。你
将在 @sec-factors 中了解更多关于因子的内容。

在分析这些数据之前，你可能想要修复`age`和`id`列。目
前，`age`是一个字符型变量，因为其中一个观测值被输入为文本`five`而不是数字`5`。我
们将在 @sec-import-spreadsheets 详细讨论如何修复这个问题。

```{r}
students <- students |>
  janitor::clean_names() |>
  mutate(
    meal_plan = factor(meal_plan),
    age = parse_number(if_else(age == "five", "5", age))
  )

students
```

这里有一个新的函数`if_else()`，它有三个参数。第
一个参数`test`应该是一个逻辑向量。当
`test`为`TRUE`时，结果将包含第二个参数`yes`的值；当它为`FALSE`时，将包含第三个参数`no`的值。在
这里，我们表示如果`age`是字符串 `"five"`，则将其变为 `"5"`，如果不是，则保持原样。你
将在 @sec-logicals 部分了解更多关于`if_else()`和逻辑向量的内容。

### 其他参数

这里还有一些其他重要的参数我们需要提及。如
果先向你们展示一个有用的技巧，这些参数的演示就会更容易理解：`read_csv()`可以读取你创建并格式化为 CSV 文件格式的文本字符串。

```{r}
#| message: false

read_csv(
  "a,b,c
  1,2,3
  4,5,6"
)
```

通常，`read_csv()`使用数据的第一行作为列名，这是一个非常常见的约定。但
是，在文件的顶部包含几行元数据的情况也不少见。你
可以使用`skip = n`来跳过前 n 行，或者使用`comment = "#"`来忽略所有以（例如）# 开头的行：

```{r}
#| message: false

read_csv(
  "The first line of metadata
  The second line of metadata
  x,y,z
  1,2,3",
  skip = 2
)

read_csv(
  "# A comment I want to skip
  x,y,z
  1,2,3",
  comment = "#"
)
```

在其他情况下，数据可能没有列名。你
可以使用`col_names = FALSE`来告诉 `read_csv()`不要将第一行作为标题，而是从`X1`到`Xn`顺序地给它们标记列名：

In other cases, the data might not have column names.
You can use `col_names = FALSE` to tell `read_csv()` not to treat the first row as headings and instead label them sequentially from `X1` to `Xn`:

```{r}
#| message: false

read_csv(
  "1,2,3
  4,5,6",
  col_names = FALSE
)
```

另外，你可以向`col_names`传递一个字符向量，这个字符向量将被用作列名：

```{r}
#| message: false

read_csv(
  "1,2,3
  4,5,6",
  col_names = c("x", "y", "z")
)
```

这些参数是你需要知道的，以便读取你在实践中遇到的大多数 CSV 文件。（
对于其他情况，你需要仔细检查你的 `.csv` 文件，并阅读`read_csv()`的许多其他参数的文档。）

### 其他文件类型

一旦你掌握了`read_csv()`，使用`readr`的其他函数就很简单了；你只需要知道应该使用哪个函数：

-   `read_csv2()` 用于读取分号分隔的文件。这
    些文件使用`;`而不是`,`来分隔字段，这在使用`,`作为小数点标记符的国家中很常见；

-   `read_tsv()` 用于读取制表符分隔（tab-delimited）的文件；

-   `read_delim()` 用于读取具有任何分隔符的文件，如果你没有指定分隔符，它会尝试自动猜测分隔符；

-   `read_fwf()` 用于读取固定宽度的文件。你
    可以使用`fwf_widths()`通过宽度指定字段，或者使用`fwf_positions()`通过位置指定字段；

-   `read_table()` 用于读取固定宽度文件的常见变体，其中列由空白字符分隔；

-   `read_log()` 用于读取 Apache 风格的日志文件。

### 练习

1.  如果你想要读取一个字段之间使用 "\|" 分隔的文件，你会使用什么函数？

2.  除了`file`、`skip`和`comment`之外，`read_csv()`和`read_tsv()`还有哪些共同的参数？

3.  `read_fwf()`的最重要参数是什么？

4.  有时 CSV 文件中的字符串包含逗号。为
    了防止它们引起问题，这些字符串需要用引号字符（如 `"` 或 `'`）括起来。默
    认情况下，`read_csv()`假设引号字符为 `"`。为了将以下文本读取到数据框中，你需要为`read_csv()`指定哪个参数？

    ```{r}
    #| eval: false

    "x,y\n1,'a,b'"
    ```

5.  识别以下内联CSV文件中的每个错误是什么。当
    你运行代码时会发生什么？

    ```{r}
    #| eval: false

    read_csv("a,b\n1,2,3\n4,5,6")
    read_csv("a,b,c\n1,2\n1,2,3,4")
    read_csv("a,b\n\"1")
    read_csv("a,b\n1,2\na,b")
    read_csv("a;b\n1;3")
    ```

6.  通过以下方式练习在数据框中引用非语法名称：

    a.  提取名为`1`的变量；
    b.  绘制 `1` 与 `2`的散点图；
    c.  创建一个名为`3`的新列，该列是`2`除以`1`的结果；
    d.  将列名重命名为 `one`, `two`和 `three`.

    ```{r}
    annoying <- tibble(
      `1` = 1:10,
      `2` = `1` * 2 + rnorm(length(`1`))
    )
    ```

## 控制列类型 {#sec-col-types}

CSV 文件不包含关于每个变量类型（即它是否是逻辑型、数字型、字符串型等）的任何信息，因此readr 会尝试猜测类型。本
节将描述猜测过程的工作原理，如何解决一些常见的导致猜测失败的问题，以及（如果需要的话）如何自己提供列类型。最
后，我们将提及一些在readr 遭遇严重失败且你需要更深入地了解文件结构时非常有用的通用策略。

### 猜测类型

readr 使用一种启发式方法来确定列的类型。对
于每一列，它会从第一行到最后一行均匀地抽取 1,000[^data-import-2] 行的值，并忽略缺失值。
然后，它会通过以下问题进行判断：

[^data-import-2]: 你可以使用`guess_max`参数覆盖1000的默认值。

-   它是否只包含 `F`、`T`、`FALSE` 或 `TRUE`（忽略大小写）？如果是，则它是逻辑型；
-   它是否只包含数字（如`1`、`-4.5`、`5e6`、`Inf`）？如果是，则它是数字型；
-   它是否符合 ISO8601 标准？如果是，则它是日期或日期-时间型。（我们将在\@sec-creating-datetimes 更详细地讨论日期-时间型）；
-   否则，它一定是字符串型。

你可以通过以下简单示例看到这个行为：

```{r}
#| message: false

read_csv("
  logical,numeric,date,string
  TRUE,1,2021-01-15,abc
  false,4.5,2021-02-15,def
  T,Inf,2021-02-16,ghi
")
```

如果你有一个干净的数据集，这种启发式方法很有效，但在现实生活中，你会遇到各种奇怪而美丽的失败。

### 缺失值、列类型和问题

列检测失败最常见的方式是某列包含了意外值，结果你得到了一个字符型列而不是更具体的类型。这
种情况最常见的原因之一是缺失值，这些缺失值不是使用readr 所期望的`NA`来记录的。

以下面这个简单的只有一列的 CSV 文件为例：

```{r}
simple_csv <- "
  x
  10
  .
  20
  30"
```

如果我们在没有任何附加参数的情况下读取它，`x`将变成一个字符列：

```{r}
#| message: false

read_csv(simple_csv)
```

在这个很小的例子中，你可以很容易地看到缺失值`.`。但
是，如果你的文件中有数千行，并且只有少数几个缺失值，并且这些缺失值分散在文件中，那么会发生什么呢？一
种方法是告诉readr `x` 是一列数字型数据，然后查看它在哪里失败。你
可以使用`col_types`参数来实现这一点，该参数接受一个命名列表，其中列表的名称与 CSV 文件中的列名相匹配：

```{r}
df <- read_csv(
  simple_csv, 
  col_types = list(x = col_double())
)
```

现在`read_csv()`报告存在问题，并告诉我们可以通过`problems()`找到更多信息:

```{r}
problems(df)
```

这告诉我们，在第 3 行、第 1 列出现了问题， readr 期待一个双精度浮点数，但是得到了一个`.`。这
表明这个数据集使用`.`来表示缺失值。因
此，我们设置`na = "."`，自动猜测成功，得到了我们想要的数字列：

```{r}
#| message: false

read_csv(simple_csv, na = ".")
```

### 列类型

readr总共提供了九种列类型供您使用:

-   `col_logical()`和`col_double()`分别用于读取逻辑值和实数。由于readr 通常会自动为你猜测这些类型，因此它们相对不常用（除了上述情况）；
-   `col_integer()` 用于读取整数。在本书中，我们很少区分整数和双精度浮点数，因为它们在功能上是等价的，但明确读取整数有时是有用的，因为它们占用的内存只有双精度浮点数的一半；
-   `col_character()` 用于读取字符串。当某列是数字标识符时，明确指定它可以很有用，例如，用于标识对象的长数字序列，但对这些数字应用数学运算没有意义。示例包括电话号码、社会保障号码、信用卡号码等；
-   `col_factor()`, `col_date()`和`col_datetime()` 分别用于创建因子、日期和日期-时间；当我们在\@sec-factors 和 @sec-dates-and-times 学习这些数据类型时，你会了解更多相关信息；
-   `col_number()` 是一个宽容的数字解析器，它将忽略非数字部分，特别适用于货币。在\@sec-numbers 你将了解更多相关信息；
-   `col_skip()` 用于跳过某列，使其不包含在结果中；这在处理大型 CSV 文件且只想使用其中的某些列时有用，可以加快数据读取速度。

此外，也可以通过将`list()`切换到`cols()`并指定`.default`来覆盖默认列。

```{r}
another_csv <- "
x,y,z
1,2,3"

read_csv(
  another_csv, 
  col_types = cols(.default = col_character())
)
```

Another useful helper is `cols_only()` which will read in only the columns you specify:

```{r}
read_csv(
  another_csv,
  col_types = cols_only(x = col_character())
)
```

## 从多个文件读取数据 {#sec-readr-directory}

有时，你的数据分散在多个文件中，而不是只包含在一个文件中。例
如，你可能有多个月份的销售数据，每个月的数据都保存在一个单独的文件中：1月的销售数据在`01-sales.csv`中，2月的在`02-sales.csv`中，3月的在`03-sales.csv`中。使
用`read_csv()`函数可以一次性读取这些数据，并将它们堆叠在一个数据框中。

```{r}
#| message: false

sales_files <- c("data/01-sales.csv", "data/02-sales.csv", "data/03-sales.csv")
read_csv(sales_files, id = "file")
```

同样，如果在项目的`data`文件夹中有CSV文件，上述代码就可以工作。你
可以从<https://pos.it/r4ds-01-sales>, <https://pos.it/r4ds-02-sales>和<https://pos.it/r4ds-03-sales>下载这些文件，或者你可以直接读取它们:

```{r}
#| eval: false

sales_files <- c(
  "https://pos.it/r4ds-01-sales",
  "https://pos.it/r4ds-02-sales",
  "https://pos.it/r4ds-03-sales"
)
read_csv(sales_files, id = "file")
```

`id`参数会在结果数据框中添加一个名为`file`的新列，用于标识数据来自哪个文件。这
在读取的文件没有包含可以帮助你追踪观测回到其原始来源的标识列时特别有用。

如果你有很多文件想要读取，一个个写出它们的名称可能会很麻烦。相
反，你可以使用基础函数`list.files()`来通过匹配文件名中的模式找到这些文件。你
将在\@@sec-regular-expressions 部分学习更多关于这些模式的知识。

```{r}
sales_files <- list.files("data", pattern = "sales\\.csv$", full.names = TRUE)
sales_files
```

## 写入文件 {#sec-writing-to-a-file}

readr 还提供了两个有用的函数，用于将数据写回磁盘：`write_csv()`和`write_tsv()`。这
些函数最重要的参数是`x`(要保存的数据框)和`file`(要保存的位置)。你
还可以指定如何使用`na`来写入缺失值以及是否希望将其附加到现有文件中。

```{r}
#| eval: false

write_csv(students, "students.csv")
```

现在让我们读入csv文件。请
注意，当你保存到CSV时，刚刚设置的变量类型信息会丢失，因为你重新开始从纯文本文件读取:

```{r}
#| warning: false
#| message: false

students
write_csv(students, "students-2.csv")
read_csv("students-2.csv")
```

这使得CSV在缓存中间结果时有些不可靠，每次加载时都需要重新创建列规范。主
要有两种替代方案：

1.  `write_rds()` 和 `read_rds()` 是围绕基础函数`readRDS()`和`saveRDS()`的统一包装器。这
    些函数将数据存储在R的自定义二进制格式RDS中。这
    意味着当你重新加载对象时，你加载的是与存储时完全相同的R对象。

    ```{r}
    write_rds(students, "students.rds")
    read_rds("students.rds")
    ```

2.  `arrow`包允许你读取和写入 parquet 文件，这是一种可以快速跨编程语言共享的二进制文件格式。我
    们将在 @sec-arrow 中更深入地探讨`arrow`。

    ```{r}
    #| eval: false

    library(arrow)
    write_parquet(students, "students.parquet")
    read_parquet("students.parquet")
    #> # A tibble: 6 × 5
    #>   student_id full_name        favourite_food     meal_plan             age
    #>        <dbl> <chr>            <chr>              <fct>               <dbl>
    #> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4
    #> 2          2 Barclay Lynn     French fries       Lunch only              5
    #> 3          3 Jayendra Lyne    NA                 Breakfast and lunch     7
    #> 4          4 Leon Rossini     Anchovies          Lunch only             NA
    #> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5
    #> 6          6 Güvenç Attila    Ice cream          Lunch only              6
    ```

Parquet往往比RDS快得多，并且可以在R之外使用，但确实需要`arrow`包。

```{r}
#| include: false
file.remove("students-2.csv")
file.remove("students.rds")
```

## 数据录入

有时，你需要在R脚本中手动组装一个tibble（数据框），进行一些数据录入。有
两个有用的函数可以帮助你完成这项工作，这两个函数的不同之处在于它们是通过列还是通过行来布局tibble的。`t`
`ibble()`函数是按列工作的：

```{r}
tibble(
  x = c(1, 2, 5), 
  y = c("h", "m", "g"),
  z = c(0.08, 0.83, 0.60)
)
```

按列布局数据可能会难以看到行之间的关系，因此另一种方法是`tribble()`（**tr**ansposed t**ibble**的缩写），它允许你逐行布局数据。`t`
`ribble()`是为代码中的数据输入定制的：列标题以`~`开头，条目之间用逗号分隔。这
使得以易于阅读的形式布局少量数据成为可能：

```{r}
tribble(
  ~x, ~y, ~z,
  1, "h", 0.08,
  2, "m", 0.83,
  5, "g", 0.60
)
```

## 小结

在本章中，你学习了如何使用`read_csv()`加载CSV文件，以及如何使用`tibble()`和`tribble()`进行自己的数据输入。你
了解了CSV文件的工作原理，可能会遇到的一些问题，以及如何解决这些问题。在
本书中，我们将多次涉及数据导入：从Excel和Google表格中导入数据的 @sec-import-spreadsheets ，@sec-import-databases 将向你展示如何从数据库中加载数据，@sec-arrow 将介绍如何从Parquet文件中加载数据，@sec-rectangling 将涉及从JSON中导入数据，以及\@sec-scraping 将介绍如何从网站上抓取数据。

本书的这个部分即将结束，但还有一个重要的主题需要讨论：如何获取帮助。因
此，在下一章中，你将学习一些寻求帮助的好地方，如何创建一个可重现的示例（reprex）以最大化获得良好帮助的机会，以及一些关于跟上R世界步伐的一般性建议。
