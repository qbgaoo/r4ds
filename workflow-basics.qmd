# 工作流程：基础 {#sec-workflow-basics}

```{r}
#| echo: false

source("_common.R")
```

现在你已经有了运行R代码的经验。虽
然我们没有给你很多细节，但你肯定已经了解了一些基本知识，否则你会沮丧地把这本书扔掉！当
你开始用R编程时，心情沮丧是很自然的，因为R对标点符号是如此的挑剔，一个字符不合适都可能导致它报错。当
你感到沮丧时，你要安慰自己，这种经历是普遍的、暂时的，每个人都会遇到这种情况，克服它的唯一方法就是继续努力。

在我们进一步讨论之前，让我们确保你在运行R代码方面有一个坚实的基础，并且你知道一些最有用的RStudio特性。

## 编程基础

让我们回顾一下之前我们忽略的一些基础知识，以便让您尽快学会绘图。你
可以用R来做基本的数学计算：

```{r}
1 / 200 * 30
(59 + 73 + 2) / 3
sin(pi / 2)
```

可以使用赋值操作符创建新对象`<-`:

```{r}
x <- 3 * 4
```

注意，`x`的值没有被打印出来, 它只是被保存起来了。如
果要查看该值，请在控制台中键入`x`。

可以用`c()`将多个元素组合成一个向量：

```{r}
primes <- c(2, 3, 5, 7, 11, 13)
```

向量的基本运算应用于向量的每一个元素：

```{r}
primes * 2
primes - 1
```

所有创建对象的R语句，亦即赋值语句，都有相同的形式:

```{r}
#| eval: false

object_name <- value
```

当你读这段代码时，在心里默念“对象名获得了值”。

你会进行大量的赋值操作，而`<-`打起来比较费劲，你可以使用 RStudio 的快捷键来节省时间：Alt + -（减号）。请
注意，RStudio 会自动在`<-`周围添加空格，这是一种良好的写代码习惯。代
码在美好的日子里读起来也可能很令人痛苦（试试giveyoureyesabreak），所以给你的眼睛休息一下，使用空格吧。

## 注释

R会忽略该行中`#`之后的任何文本。这
允许你编写**注释**，即 R 会忽略但人类可以阅读的文本。我
们有时会在示例中包含注释，以解释代码正在做什么。

注释可以帮助您简要描述下面代码的功能。

```{r}
# create vector of primes
primes <- c(2, 3, 5, 7, 11, 13)

# multiply primes by 2
primes * 2
```

像这样简短的代码段，可能不需要为每一行代码都留下注释。但
是，随着编写的代码变得越来越复杂，注释可以帮助你（及你的合作者）节省很多时间来弄清楚代码是做什么的。

使用注释来解释你编写代码的原因（why），而不是方法（how）或内容（what）。通
过仔细阅读代码，总是有可能弄清楚代码的方法和内容的，尽管这可能会很繁琐。如
果你在注释中描述了每一步，然后修改了代码，你需要记得同时更新注释，否则当你将来再次查看这段代码时，可能会感到困惑。

弄清楚为什么这么做往往更加困难，甚至是不可能的。例
如，`geom_smooth()`函数有一个名为`span`的参数，它控制曲线的平滑度，较大的值会产生更平滑的曲线。假
设你决定将`span`的值从默认的 0.75 改为 0.9：未来的读者很容易理解发生了什么，但除非你在注释中注明你的思考过程，否则没有人会理解你为什么要改变默认值。

对于数据分析代码，使用注释来解释你的整体策略和步骤，并在遇到重要见解时记录下来。这
些知识是无法仅从代码本身重新获取的。

## 对象名称 {#sec-whats-in-a-name}

对象名必须以字母开头，并且只能包含字母、数字、`_`和 `.`*。*你希望对象名是描述性的，因此需要为多个单词采用一种约定。我
们推荐使用蛇形命名法（**snake_case**），即使用 `_`分隔小写单词。

```{r}
#| eval: false

i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
```

当讨论 @sec-workflow-style 中的代码风格时，我们将再次回到对象名。

你可以通过输入一个对象的名字来检查它：

```{r}
x
```

下面是另外一个赋值：

```{r}
this_is_a_really_long_name <- 2.5
```

要检查这个对象，请尝试RStudio的补全功能：输入“this”，按TAB键，添加字符，直到有一个唯一的前缀，然后按回车键。

假设你犯了一个错误，`this_is_a_really_long_name`的值应该是 3.5 而不是 2.5，你可以使用另一个键盘快捷键来帮助你修正它。例
如，按 ↑ 键来调出你刚才输入的最后一个命令并进行编辑。或
者输入 "this" ，然后按 Cmd/Ctrl + ↑ 来列出输入过的所有以这些字母开头的命令，使用箭头键来导航。然
后按 Enter 键重新输入命令，将 2.5 改为 3.5 并重新运行。

再来一个赋值：

```{r}
r_rocks <- 2^3
```

试着检查一下：

```{r}
#| eval: false

r_rock
#> Error: object 'r_rock' not found
R_rocks
#> Error: object 'R_rocks' not found
```

这说明你和R之间的存在隐含约定：R会为你完成繁琐的计算，但相应地，你的指令必须完全精确。如
果不这样做，你可能会收到一个错误提示，说未找到你正在查找的对象。拼
写很重要，如你在输入`r_rock`时可能指的是`r_rocks`，但R无法读懂你的想法。大
小写也很重要，如你输入`R_rocks`时可能指的是`r_rocks`，但R同样无法读懂你的想法。

## 函数调用

R有大量的内置函数，可以这样调用:

```{r}
#| eval: false

function_name(argument1 = value1, argument2 = value2, ...)
```

让我们尝试使用`seq()`函数来生成一系列有规律的数字，同时也学习 RStudio 的一些更实用的特性。输
入`se`并按下 TAB 键，这时会弹出一个窗口显示可能的补全选项。通
过输入更多内容（如`q`）来明确指定`seq()`，或者使用 ↑/↓ 箭头来选择。注
意弹出的浮动提示，它会提醒你函数的参数和用途。如
果你想要更多帮助，按下 F1 键，在右下角窗格的帮助选项卡中获取所有详细信息。

当选择了想要的函数后，再次按下 TAB 键，RStudio 会为你添加匹配的左括号 `(` 和右括号 `)` 。输
入第一个参数的名字`from`，将其设置为等于 1，然后，输入第二个参数的名字`to`，并将其设置为等于10。最
后，按下回车键。

```{r}
seq(from = 1, to = 10)
```

在函数调用中我们经常省略前几个参数的名字，所以这一行代码也可以这样写:

```{r}
seq(1, 10)
```

输入以下代码，注意到 RStudio 在成对的引号上也提供了类似的帮助：

```{r}
x <- "hello world"
```

引号和括号总是成对出现。R
Studio 会尽力帮助你，但仍然有可能出错并导致不匹配。如
果发生这种情况，R 会显示续行字符 `+`：

```         
> x <- "hello
+
```

`+`告诉你 R 正在等待更多的输入，它认为你还没有完成。通
常，这意味着你忘记了输入一个`"` 或者一个`)`。你可以添加缺失的配对符号，或者按下 ESCAPE 键来中止表达式并重新尝试。

请注意，右上角窗格中的环境（Environment）选项卡显示了你创建的所有对象：

```{r}
#| echo: false
#| fig-alt: |
#|   Environment tab of RStudio which shows r_rocks, this_is_a_really_long_name, 
#|   x, and y in the Global Environment.

knitr::include_graphics("screenshots/rstudio-env.png")
```

## 练习

1.  为什么这段代码不能正常运行？

    ```{r}
    #| error: true

    my_variable <- 10
    my_varıable
    ```

    仔细看！这
    可能看起来像是无意义的练习，但能训练你的大脑注意到即使是微小的差异，这在编程时也会让你有所受益。

2.  微调以下每个 R 命令，以便它们可以正确运行：

    ```{r}
    #| eval: false

    libary(todyverse)

    ggplot(dTA = mpg) + 
      geom_point(maping = aes(x = displ y = hwy)) +
      geom_smooth(method = "lm)
    ```

3.  按下 Option + Shift + K / Alt + Shift + K，会发生什么？你
    如何通过菜单到达同样的地方？

4.  重新看一下来自 @sec-ggsave 的一个练习。运
    行以下代码行。哪
    个图形被保存为 `mpg-plot.png`？为
    什么？

    ```{r}
    #| eval: false

    my_bar_plot <- ggplot(mpg, aes(x = class)) +
      geom_bar()
    my_scatter_plot <- ggplot(mpg, aes(x = cty, y = hwy)) +
      geom_point()
    ggsave(filename = "mpg-plot.png", plot = my_bar_plot)
    ```

## 小结

现在你已经学习了更多关于R代码如何工作的知识以及一些提示。在
将来重新使用代码时这些提示能帮助你更好地理解它。在
下一章，我们将继续数据科学之旅，向你介绍dplyr，它是tidyverse的一个包，可以帮助你转换数据，例如选择重要的变量、筛选感兴趣的行还是计算汇总统计量。
