{
  "hash": "4a2c9715d205c224d1746a6d785661be",
  "result": {
    "engine": "knitr",
    "markdown": "# 工作流程：获取帮助 {#sec-workflow-getting-help}\n\n\n::: {.cell}\n\n:::\n\n\n本书并非孤岛，没有任何单一资源能够让你完全掌握R语言。当\n你开始将本书中描述的技术应用于自己的数据时，你很快就会遇到我们没有解答的问题。本\n节将介绍一些获取帮助和持续学习的技巧。\n\n## 充分利用互联网\n\n如果你遇到了困难，首先尝试使用Google搜索。通\n常，在查询中加上“R”就能将结果限制在相关的范围内：如果搜索结果没有帮助，那通常意味着没有特定的R语言相关结果。此\n外，添加包名如“tidyverse”或“ggplot2”将有助于将结果缩小到你更熟悉的代码范围内，例如，“如何在R中制作箱线图”与“如何在R中使用ggplot2制作箱线图”。G\noogle对错误消息特别有用，如果你收到一个错误消息而不知道它是什么意思，试着搜索它！很\n有可能其他人以前也被这个错误消息搞糊涂过，网上某个地方会有帮助。（\n如果错误消息不是英文的，运行`Sys.setenv(LANGUAGE = \"en\")`并重新运行代码；你更有可能找到英文错误消息的帮助。）\n\n如果Google没有帮助，尝试使用[Stack Overflow](https://stackoverflow.com)。首\n先花一些时间搜索现有的答案，包括`[R]`标签，以将搜索限制在使用R的问题和答案上。\n\n## 制作reprexx\n\n如果你的Google搜索没有找到有用的信息，制作一个最小化的reprex（**rep**roducible **ex**ample的缩写）是一个很好的主意。一\n个好的reprex会让其他人更容易帮助你，而且通常在制作它的过程中，你自己就会发现问题所在。制\n作reprex有两个部分：\n\n-   首先，你需要让你的代码可复现。这\n    意味着你需要捕获所有内容，即包括任何`library()`调用并创建所有必要的对象。确\n    保你已经做到这一点的最简单方法是使用`reprex`包。\n\n-   其次，你需要将其简化到最小。去\n    掉所有与问题不直接相关的内容。这\n    通常意味着创建一个比你实际面对的更小、更简单的R对象，或者甚至使用内置数据。\n\n这听起来像是一项繁重的工作！确\n实可能如此，但它的回报非常大\n\n-   80%的情况下，创建一个出色的reprex会揭示问题的根源。令\n    人惊讶的是，多少次在编写一个独立且简化的例子的过程中，你就能够自己解答问题了；\n\n-   另外20%的情况下，你已经以易于他人操作的方式捕捉到了问题的本质，这极大地提高了你获得帮助的机会！\n\n在手动创建reprex时，很容易不小心遗漏某些内容，导致你的代码无法在别人的计算机上运行。通\n过使用reprex包可以避免这个问题，该包是tidyverse的一部分。假\n设你将这段代码复制到了剪贴板（或者，在RStudio Server或Cloud上，选择它）：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 1:4\nmean(y)\n```\n:::\n\n\n然后调用`reprex()`，其默认输出格式为GitHub所需的格式:\n\n``` r\nreprex::reprex()\n```\n\n如果你正在使用RStudio，一个精美的HTML预览将会在RStudio的Viewer中显示；否则，它会在你的默认浏览器中显示。r\neprex会被自动复制到你的剪贴板（在RStudio Server或Cloud上，你需要手动复制）：\n\n````         \n``` r\ny <- 1:4\nmean(y)\n#> [1] 2.5\n```\n````\n\n这段文本以一种特殊的方式格式化，称为Markdown，它可以粘贴到像StackOverflow或Github这样的网站上，并且这些网站会自动将其渲染成代码的样子。以\n下是这段Markdown在Github上的渲染效果：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 1:4\nmean(y)\n#> [1] 2.5\n```\n:::\n\n\n任何人都可以立即复制、粘贴和运行这个例子。\n\n要使你的例子可重复，需要包含三样东西：必要的包、数据和代码。\n\n1.  **包**应该在脚本的顶部加载，这样很容易看出这个例子需要哪些包。现\n    在是检查你是否在使用每个包的最新版本的好时机；你可能发现了一个自你安装或最后一次更新包以来已经被修复的错误。对\n    于tidyverse中的包，最简单的检查方法是运行`tidyverse_update()`。\n\n2.  包含**数据**的最简单方法是使用`dput()`来生成重新创建它所需的R代码。例\n    如，要在R中重新创建`mtcars`数据集，请按照以下步骤操作：\n\n    1.  在R中运行`dput(mtcars)`\n    2.  复制输出结果t\n    3.  在reprex中，键入`mtcars <-`，然后粘贴。\n\n    尽量使用数据的最小子集，但还要能揭示问题。\n\n3.  花点时间确保你的**代码**易于他人阅读：\n\n    -   确保你使用了空格，并且你的变量名简洁但富有信息性；\n\n    -   使用注释来指出问题所在；\n\n    -   尽最大努力移除与问题无关的所有内容。\n\n    你的代码越短，就越容易理解，也就越容易修复。\n\n最后，通过启动一个新的R会话并复制粘贴你的脚本来检查你是否真的创建了一个可重复的例子。\n\n创建reprexes并不是一件简单的事情，而且学习创建好的、真正精简的reprexes需要一些实践。然\n而，学习在问题中包含代码，并投入时间使其可重复，将随着你学习和掌握R而不断得到回报。\n\n## 投资自己\n\n你也应该花一些时间在问题发生之前做好解决问题的准备。每\n天花一点时间学习R，长期来看会有丰厚的回报。一\n种方法是关注tidyverse团队在[tidyverse博客](https://www.tidyverse.org/blog/)上的动态。为\n了更广泛地了解R社区，我们推荐阅读[R Weekly](https://rweekly.org)：它是社区的一项努力，每周汇总R社区中最有趣的新闻。\n\n## 小结\n\n本书全貌概览（Whole Game）部分到此结束。现\n在你已经看到了数据科学过程中最重要的部分：可视化、转换、整理和导入。现\n在你已经有了一个对整个过程的整体认识，接下来我们将深入到各个小部分的细节。\n\n本书的下一部分，可视化，将深入探讨图形语法和如何使用ggplot2创建数据可视化，展示如何使用你迄今为止学到的工具进行探索性数据分析，并介绍创建用于交流的图的良好实践。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}