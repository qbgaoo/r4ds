{
  "hash": "0c33ce20b1274621923798e586bfdebb",
  "result": {
    "engine": "knitr",
    "markdown": "# 工作流程: 脚本和项目 {#sec-workflow-scripts-projects}\n\n\n::: {.cell}\n\n:::\n\n\n本章将向你介绍组织代码的两个基本工具：脚本和项目。\n\n## 脚本\n\n到目前为止，你已经使用控制台来运行代码。这\n是一个很好的起点，但是当你创建更复杂的ggplot2图形和更长的dplyr管道时，您会发现控制台空间很快就变得不够用了。为\n了给自己更多的工作空间，请使用脚本编辑器。通\n过点击“文件”菜单，选择“新建文件”，然后选择“R脚本”，或者使用键盘快捷键Cmd/Ctrl + Shift + N来打开它。你\n会看到四个窗格，如 @fig-rstudio-script 所示。脚\n本编辑器是测试代码的好地方。当\n你想要更改某些内容时，不再需要重新输入整个代码，只需编辑脚本并重新运行它。而\n且，一旦编写好了符合你需求的代码，可以将其保存为脚本文件，以便以后轻松返回。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Opening the script editor adds a new pane at the top-left of the\nIDE.\n](diagrams/rstudio/script.png){#fig-rstudio-script fig-alt='RStudio IDE with Editor, Console, and Output highlighted.' width=521}\n:::\n:::\n\n\n### 运行代码\n\n脚本编辑器是构建复杂的ggplot2图形或长序列的dplyr操作的好地方。有\n效使用脚本编辑器的关键是记住一个最重要的键盘快捷键：Cmd/Ctrl + Enter。这\n个快捷键可以在控制台中执行当前的R表达式。例\n如，请看下面的代码。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(nycflights13)\n\nnot_cancelled <- flights |> \n  filter(!is.na(dep_delay)█, !is.na(arr_delay))\n\nnot_cancelled |> \n  group_by(year, month, day) |> \n  summarize(mean = mean(dep_delay))\n```\n:::\n\n\n如果你的光标位于█处，按下Cmd/Ctrl + Enter将运行生成`not_cancelled`的完整命令。同\n时，光标也会移动到下一个语句（以`not_cancelled |>`开头）。这\n使得通过反复按下Cmd/Ctrl + Enter来逐步执行整个脚本变得很容易。\n\n与其逐个表达式地运行代码，还可以使用Cmd/Ctrl + Shift + S一次性执行完整的脚本。定\n期这样做是保证你捕获了脚本中代码所有重要部分的好方法。\n\n我们建议你始终在脚本开头列出所需的包。这\n样，如果与他人共享代码，他们可以轻松地看到他们需要安装哪些包。但\n是，请注意，不要在共享的脚本中包含`install.packages()`。如\n果不小心将一个会更改计算机的脚本交给他们是欠考虑的！\n\n在学习后续章节时，我们强烈推荐从脚本编辑器开始并练习您的键盘快捷键。随\n着时间的推移，以这种方式将代码发送到控制台会变得如此自然，甚至不用去考虑。\n\n### RStudio 诊断\n\n在脚本编辑器中，RStudio会在侧边栏中用一条红色弯弯曲曲的线和一个叉来突出显示语法错误。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](screenshots/rstudio-diagnostic.png){fig-alt='Script editor with the script x y <- 10. A red X indicates that there is\nsyntax error. The syntax error is also highlighted with a red squiggly line.' width=148}\n:::\n:::\n\n\n将鼠标悬停在十字上，看看问题是什么：\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](screenshots/rstudio-diagnostic-tip.png){fig-alt='Script editor with the script x y <- 10. A red X indicates that there is\nsyntax error. The syntax error is also highlighted with a red squiggly line.\nHovering over the X shows a text box with the text unexpected token y and\nunexpected token <-.' width=232}\n:::\n:::\n\n\nRStudio 还会让您了解潜在的问题：\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](screenshots/rstudio-diagnostic-warn.png){fig-alt='Script editor with the script 3 == NA. A yellow exclamation mark\nindicates that there may be a potential problem. Hovering over the\nexclamation mark shows a text box with the text use is.na to check\nwhether expression evaluates to NA.' width=439}\n:::\n:::\n\n\n### 文件保存和命名\n\nRStudio 在你退出时会自动保存脚本编辑器的内容，并在重新打开时自动加载它。然\n而，最好不要使用“Untitled1”，“Untitled2”，“Untitled3”等命名方式，而是应该保存您的脚本并给它们起一个有意义的名字。\n\n可能你会想用`code.R`或`myscript.R`来命名文件，但在选择文件名之前应该多考虑一下。文\n件命名的三个重要原则是：\n\n1.  文件名应该是**机器**可读的：避免空格、符号和特殊字符，不要依赖大小写来区分文件。\n2.  文件名应该是**人类**可读的：使用文件名来描述文件中的内容。\n3.  文件名应该与默认排序方式兼容：以数字开头命名文件，以便按字母顺序排序时，它们能按照使用的顺序排列。\n\n例如，假设您在一个项目文件夹中有以下文件：\n\n```         \nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nfig 1.png\nFigure_02.png\nmodel_first_try.R\nrun-first.r\ntemp.txt\n```\n\n这里存在几个问题：很难确定先运行哪个文件；文件名包含空格；有两个名称相同但大小写不同的文件（`finalreport` 与 `FinalReport`[^workflow-scripts-1]），并且一些名称没有描述其内容（`run-first` 和 `temp`）。\n\n[^workflow-scripts-1]: 如果你在名字中使用“final”更是在冒险😆；漫画《Piled Higher and Deeper》中有一个[关于此话题的有趣连载](https://phdcomics.com/comics/archive.php?comicid=1531)。\n\n下面是一种更好的命名和组织同一组文件的方法:\n\n```         \n01-load-data.R\n02-exploratory-analysis.R\n03-model-approach-1.R\n04-model-approach-2.R\nfig-01.png\nfig-02.png\nreport-2022-03-20.qmd\nreport-2022-04-02.qmd\nreport-draft-notes.txt\n```\n\n对关键脚本进行编号可以明确它们的运行顺序，而一致的命名方案可以更容易地看出发生了什么变化。此\n外，图表的标签也类似；报告通过文件名中包含的日期进行区分，而`temp`被重命名为`report-draft-notes`以更好地描述其内容。如\n果您在目录中有大量文件，建议进一步组织文件，将不同类型的文件（脚本、图表等）放在不同的目录中。\n\n## 项目\n\n有时，你可能需要退出R去做其他的事情，稍后再回到分析任务中；有时，你会同时处理多个任务，并且希望将它们分开。有\n时，你需要将外部世界的数据带入R，并将R中的数值结果和图表发送回外部世界。\n\n为了处理这些实际情况，你需要做出两个决定：\n\n1.  什么是真相的来源？你会保存什么作为发生的事情的永久记录？\n2.  你的分析在哪里进行？\n\n### 什么是真相的来源？\n\n作为初学者，依靠当前环境（Environment ）包含分析过程中创建的所有对象是无可厚非的。但\n是，为了更容易地进行大型项目或与他人合作，R脚本应该成为事实真相的来源，你可以通过R脚本（和数据文件）重新创建环境。如\n果只有自己的环境，则很难重新创建R脚本：你要么必须从记忆中重新键入大量代码（在此过程中不可避免地会犯错误），要么必须仔细挖掘您的R历史记录。\n\n为了帮助保持R脚本作为你分析的真相来源，我们强烈建议你不要让RStudio在会话之间保留您的工作空间（workspace）。您\n可以通过运行`usethis::use_blank_slate()`[^workflow-scripts-2]或模仿 @fig-blank-slate 中所示的选项来实现。\n这将会给您带来一些短期的痛苦，因为现在当您重新启动RStudio时，它将不再记住您上次运行的代码，您创建的对象或读取的数据集也将无法使用。\n但是这种短期的痛苦可以避免长期的痛苦，因为它迫使你在代码中捕获所有重要的过程。\n没有什么比在事实发生三个月后发现你只在环境中存储了重要计算的结果，而没有在代码中存储计算更糟糕的了。\n\n[^workflow-scripts-2]: 如果没有安装usethis，可以使用`install.packages(\"usethis\")`安装。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Copy these options in your RStudio options to always start your\nRStudio session with a clean slate.\n](diagrams/rstudio/clean-slate.png){#fig-blank-slate fig-alt='RStudio Global Options window where the option Restore .RData into workspace\nat startup is not checked. Also, the option Save workspace to .RData\non exit is set to Never.\n' width=523}\n:::\n:::\n\n\n有一组非常实用的键盘快捷键组合，它们将协同工作以确保你已经在编辑器中捕获了代码的重要部分：\n\n1.  按Cmd/Ctrl + Shift + 0/F10来重启R。\n2.  按Cmd/Ctrl + Shift + S来重新运行当前脚本。\n\n我们每周都会使用这种模式数百次。\n\n或者，如果不使用快捷键，你可以转到“会话”\\>“重启R”，然后选中并重新运行当前脚本。\n\n::: callout-note\n## RStudio server\n\n如果您使用的是RStudio server，默认情况下R会话不会自动重启。当\n你关闭RStudio server标签页时，可能会感觉正在关闭R，但实际上服务器会在后台保持其运行状态。下\n次你返回时，你将处于和离开时完全相同的位置。这\n使得定期重启R变得尤为重要，以便你是从一个干净状态开始的。\n:::\n\n### 分析在哪里进行?\n\n**工作目录**是R中非常重要的概念。R\n在这个目录中查找你想要加载的文件，也将要保存的文件存放在这里。R\nStudio在控制台顶部显示当前的工作目录：\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](screenshots/rstudio-wd.png){fig-alt='The Console tab shows the current working directory as\n~/Documents/r4ds.\n' width=321}\n:::\n:::\n\n\n可以通过运行`getwd()`函数在R代码中输出当前的工作目录:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n#> [1] \"/Users/hadley/Documents/r4ds\"\n```\n:::\n\n\n本次R会话中，当前工作目录（可以将其视为“主目录”）位于Hadley的Documents文件夹中一个名为r4ds的子文件夹中。当\n您运行此代码时，它将返回不同的结果，因为你的计算机的目录结构与Hadley的不同！\n\n作为R的初学者，让工作目录成为你的主目录、文档目录或者计算机上的任何其他奇怪的目录都是可以的。但\n是，你已经阅读了本书中的多个章节，不再是初学者了。现\n在，你应该开始将项目组织到目录中，并在处理项目时将R的工作目录设置为相关目录。\n\n你可以在R内部设置工作目录，但**不推荐这样做**：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/path/to/my/CoolProject\")\n```\n:::\n\n\n有一种更好的方法，这种方法也能让您像专家一样管理R工作。那\n就是使用RStudio项目。\n\n### RStudio项目\n\n将所有与某个项目相关的文件（输入数据、R脚本、分析结果和图表）保存在一个目录中是一种明智且常见的做法，RStudio通过项目提供了内置支持。让\n我们为您创建一个项目，以便您在使用本书的其余部分时可以使用它。点\n击“文件”\\>“新建项目”，然后按照\\@fig-new-project 中显示的步骤操作。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![To create new project: (top) first click New Directory, then (middle)\nclick New Project, then (bottom) fill in the directory (project) name,\nchoose a good subdirectory for its home and click Create Project.\n](diagrams/new-project.png){#fig-new-project fig-alt='Three screenshots of the New Project menu. In the first screenshot,\nthe Create Project window is shown and New Directory is selected.\nIn the second screenshot, the Project Type window is shown and\nEmpty Project is selected. In the third screenshot, the Create New\nProject  window is shown and the directory name is given as r4ds and\nthe project is being created as subdirectory of the Desktop.\n' width=1172}\n:::\n:::\n\n\n将你的项目命名为`r4ds`，并仔细考虑将其放在哪个子目录中。如\n果不将其存储在一个合理的地方，将来会很难找到它！\n\n一旦完成此过程，你将获得一个专为此书创建的新RStudio项目。请\n检查项目的“主目录”是否已设置为当前工作目录：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n#> [1] /Users/hadley/Documents/r4ds\n```\n:::\n\n\n现在，在脚本编辑器中输入以下命令并将文件保存为“diamonds.R”。然\n后，创建一个名为“data”的新文件夹。你\n可以通过在RStudio的“文件”面板中点击“新建文件夹”按钮来完成此操作。最\n后，运行完整的脚本，它将把PNG和CSV文件保存到您的项目目录中。不\n用关注细节，你将在本书的后续中学习它们。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(diamonds, aes(x = carat, y = price)) + \n  geom_hex()\nggsave(\"diamonds.png\")\n\nwrite_csv(diamonds, \"data/diamonds.csv\")\n```\n:::\n\n\n退出RStudio。检\n查与你的项目关联的文件夹——注意`.Rproj`文件。双\n击该文件以重新打开项目。请\n注意，你回到了离开时的位置：工作目录和命令历史与原来相同，你正在处理的所有文件仍然打开。但\n是，由于遵循了上面的说明，你将拥有一个全新的环境，确保你是从一个干净的状态开始的。\n\n根据操作系统的不同，选择你最喜欢的方式在计算机上搜索`diamonds.png`。你\n会找到PNG文件（这并不奇怪），还会找到创建它的脚本文件`diamonds.R`。这\n是一个巨大的胜利！有\n一天，你可能会想要重新生成一个图形或只是了解它的来源。如\n果你严格地使用R代码将图形保存到文件中而从不使用鼠标或剪贴板，那么你将能够轻松地重复以前的工作！\n\n### 相对和绝对路径\n\n一旦进入一个项目，你应该只使用相对路径而不是绝对路径。有\n什么区别呢？相\n对路径是相对于工作目录的，即项目的根目录。当\nHadley在上面写`data/diamonds.csv`时，它是`/Users/hadley/Documents/r4ds/data/diamonds.csv`的快捷方式。但\n如果Mine在她的计算机上运行这段代码，它将指向`/Users/Mine/Documents/r4ds/data/diamonds.csv`。这\n就是为什么相对路径很重要：无论R项目文件夹最终位于何处，它们都能正常工作。\n\n绝对路径是指向同一个位置，与你的工作目录无关。根\n据操作系统不同，它们看上去会有所不同。在\nWindows上，它们以驱动器字母（例如，`C:`）或两个反斜杠（例如，`\\\\servername`）开头，而在Mac/Linux上，它们以斜杠“/”开头（例如，`/users/hadley`）。你\n不应该在脚本中使用绝对路径，因为它们会妨碍共享：没有人会拥有与你完全相同的目录配置。\n\n操作系统之间还有一个重要的区别：如何分隔路径的各个部分。M\nac和Linux使用斜杠（例如，`data/diamonds.csv`），而Windows使用反斜杠（例如，`data\\diamonds.csv`）。R\n可以与这两种类型一起工作（无论你当前使用什么平台），但不幸的是，反斜杠在R中有特殊含义，要在路径中获得单个反斜杠，您需要键入两个反斜杠！这\n会使生活变得令人沮丧，因此我们建议使用Linux/Mac风格的斜杠。\n\n## 练习\n\n1.  登录RStudio Tips Twitter账户 <https://twitter.com/rstudiotips>，找到一个有趣的技巧，练习使用它！\n\n2.  RStudio诊断还会报告哪些常见错误？阅\n    读 <https://support.posit.co/hc/en-us/articles/205753617-Code-Diagnostics> 找到答案。\n\n## 小结\n\n在本章中，你学习了如何在脚本（文件）和项目（目录）中组织代码。就\n像代码风格一样，这在一开始可能会感觉像是在做无用功。但\n是，随着你在多个项目中积累更多的代码，你会开始认识到前期的一点组织工作可以为你节省大量的时间。\n\n总的来说，脚本和项目为你提供了一个坚实的工作流程，这会在未来很好地为你服务：\n\n-   为每个数据分析项目创建一个RStudio项目；\n-   在项目中保存你的脚本（起一个带有信息的名字），编辑它们，分部分或整体运行它们；经常重新启动R以确保你已将所有内容捕获到脚本中。\n-   永远只使用相对路径，而不是绝对路径。\n\n然后，你需要的所有内容都存放于一个地方，并且与您正在处理的所有其他项目干净地分隔开。\n\n到目前为止，我们一直在使用R包中包含的数据集。这\n使得在预先准备的数据上进行一些实践变得更容易，但显然你的数据不会以这种方式提供。因\n此，在下一章中将学习如何使用readr包将数据从磁盘加载到R会话中。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}