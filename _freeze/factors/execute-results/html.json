{
  "hash": "517a6f99e6611ab59f0729b0aeabf097",
  "result": {
    "engine": "knitr",
    "markdown": "# 因子 {#sec-factors}\n\n\n::: {.cell}\n\n:::\n\n\n## 引言\n\n因子用于分类变量，这些变量具有一组固定且已知的可能取值。当\n你希望以非字母顺序显示字符向量时，它们也很有用。\n\n我们将从解释为什么数据分析需要因子 (factor)[^factors-1] 以及如何使用`factor()`函数创建它们开始。\n接着，我们将向您介绍`gss_cat`数据集，它包含一系列可供实验的分类变量。\n之后，你将使用此数据集练习修改因子的顺序和值，最后我们将讨论有序因子。\n\n[^factors-1]: 它们对建模也很重要。\n\n### 必要条件\n\n基础 R 提供了一些用于创建和操作因子的基本工具。我\n们将使用 `forcats` 包来补充这些工具，`forcats` 是 tidyverse 的一部分，它提供了处理分类变量 (它是 factors 的字母重新排列!) 的工具，并提供了多种与因子一起工作的辅助函数。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## 因子基础\n\n假设你有一个记录月份的变量:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n```\n:::\n\n\n使用字符串记录这个变量有两个问题:\n\n1.  只有十二个可能的月份，而且没有什么能阻止你出现打字错误：\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x2 <- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\n    ```\n    :::\n\n\n2.  它并没有以有用的方式进行排序：\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sort(x1)\n    #> [1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n    ```\n    :::\n\n\n你可以使用因子（factor）来解决这两个问题。要\n创建一个因子，首先需要创建一个有效水平 (**levels**) 的列表：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_levels <- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n```\n:::\n\n\n现在你可以创建一个因子:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny1 <- factor(x1, levels = month_levels)\ny1\n#> [1] Dec Apr Jan Mar\n#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nsort(y1)\n#> [1] Jan Mar Apr Dec\n#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n\n\n任何不在水平列表中的值都将被静默地转换为NA（缺失值）：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny2 <- factor(x2, levels = month_levels)\ny2\n#> [1] Dec  Apr  <NA> Mar \n#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n\n\n这似乎有点风险，因此你可能想用`forcats::fct()`来代替：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny2 <- fct(x2, levels = month_levels)\n#> Error in `fct()`:\n#> ! All values of `x` must appear in `levels` or `na`\n#> ℹ Missing level: \"Jam\"\n```\n:::\n\n\n如果省略了水平，则将按照字母顺序从数据中获取:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(x1)\n#> [1] Dec Apr Jan Mar\n#> Levels: Apr Dec Jan Mar\n```\n:::\n\n\n按字母顺序排序稍有风险，因为并非每台计算机都会以相同的方式对字符串进行排序。因\n此，`forcats::fct()`是按照首次出现的顺序进行排序的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfct(x1)\n#> [1] Dec Apr Jan Mar\n#> Levels: Dec Apr Jan Mar\n```\n:::\n\n\n如果你需要直接访问有效的水平集合，可以使用`levels()`函数来做到这一点：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(y2)\n#>  [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n```\n:::\n\n\n你也可以在使用`readr`包读取数据时，通过`col_factor()`来创建一个因子：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsv <- \"\nmonth,value\nJan,12\nFeb,56\nMar,12\"\n\ndf <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))\ndf$month\n#> [1] Jan Feb Mar\n#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n\n\n## 一般社会调查\n\n在本章的剩余部分我们将使用`forcats::gss_cat`，它是来自一般社会调查 ([General Social Survey](https://gss.norc.org)) 的样本数据。该\n调查是由芝加哥大学独立研究机构NORC主导，在美国进行的一项长期调查。这\n项调查包含数千个问题，因此在`gss_cat`中Hadley选择了一些问题来说明你在处理因子时会遇到的一些常见挑战。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat\n#> # A tibble: 21,483 × 9\n#>    year marital         age race  rincome        partyid           \n#>   <int> <fct>         <int> <fct> <fct>          <fct>             \n#> 1  2000 Never married    26 White $8000 to 9999  Ind,near rep      \n#> 2  2000 Divorced         48 White $8000 to 9999  Not str republican\n#> 3  2000 Widowed          67 White Not applicable Independent       \n#> 4  2000 Never married    39 White Not applicable Ind,near rep      \n#> 5  2000 Divorced         25 White Not applicable Not str democrat  \n#> 6  2000 Married          25 White $20000 - 24999 Strong democrat   \n#> # ℹ 21,477 more rows\n#> # ℹ 3 more variables: relig <fct>, denom <fct>, tvhours <int>\n```\n:::\n\n\n(记住，由于该数据集是由包提供的，因此可以使用`?gss_cat`获取有关变量的更多信息)\n\n当因子 (factors) 存储在tibble中时，你不能那么容易地看到它们的水平（levels）。查\n看它们的一种方法是使用`count()`函数。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  count(race)\n#> # A tibble: 3 × 2\n#>   race      n\n#>   <fct> <int>\n#> 1 Other  1959\n#> 2 Black  3129\n#> 3 White 16395\n```\n:::\n\n\n在处理因子时，两种最常见的操作是改变水平的顺序和改变水平的值。这\n些操作将在下面的部分中描述。\n\n### 练习\n\n1.  探索`rincome` (申报收入) 的分布。默\n    认的条形图为什么难以理解？如\n    何改进该图？\n\n2.  这个调查中哪个`relig`最常见？哪\n    个`partyid`最常见？\n\n3.  `denom`（教派）适用于哪个宗教？你\n    如何用表格来查找？你\n    如何用可视化来查找？\n\n## 修改因子顺序 {#sec-modifying-factor-order}\n\n在可视化中改变因子水平的顺序通常很有用。例\n如，假设你想要探索不同宗教每天平均看电视的小时数：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary <- gss_cat |>\n  group_by(relig) |>\n  summarize(\n    tvhours = mean(tvhours, na.rm = TRUE),\n    n = n()\n  )\n\nggplot(relig_summary, aes(x = tvhours, y = relig)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](factors_files/figure-html/unnamed-chunk-16-1.png){fig-alt='A scatterplot of with tvhours on the x-axis and religion on the y-axis.\nThe y-axis is ordered seemingly aribtrarily making it hard to get\nany sense of overall pattern.' width=576}\n:::\n:::\n\n\n这个图很难阅读，因为没有整体的模式。我\n们可以使用`fct_reorder()`函数来重新排序`relig`的水平以改进它。`f`\n`ct_reorder()`接受三个参数：\n\n-   `.f`, 要修改水平的因子；\n-   `.x`, 一个用于对水平重新排序的数字向量；\n-   可选参数，`.fun`是一个函数，在`.f`的每个值对应多个`.x`值时使用。默认值是`median`。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](factors_files/figure-html/unnamed-chunk-17-1.png){fig-alt='The same scatterplot as above, but now the religion is displayed in\nincreasing order of tvhours. \"Other eastern\" has the fewest tvhours\nunder 2, and \"Don\\'t know\" has the highest (over 5).' width=576}\n:::\n:::\n\n\n宗教重新排序后，可以更容易看出“不知道”类别的人看电视更多，而印度教和其他东方宗教的人则看得更少。\n\n当你开始进行更复杂的转换时，我们建议你将它们从`aes()`中移出，并放入一个单独的`mutate()`步骤中。例\n如，你可以将上面的图形重写为：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary |>\n  mutate(\n    relig = fct_reorder(relig, tvhours)\n  ) |>\n  ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()\n```\n:::\n\n\n如果我们创建一个类似的图形来查看申报的收入水平如何随着平均年龄而变化，该怎么做呢？\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrincome_summary <- gss_cat |>\n  group_by(rincome) |>\n  summarize(\n    age = mean(age, na.rm = TRUE),\n    n = n()\n  )\n\nggplot(rincome_summary, aes(x = age, y = fct_reorder(rincome, age))) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](factors_files/figure-html/unnamed-chunk-19-1.png){fig-alt='A scatterplot with age on the x-axis and income on the y-axis. Income\nhas been reordered in order of average age which doesn\\'t make much\nsense. One section of the y-axis goes from $6000-6999, then <$1000,\nthen $8000-9999.' width=576}\n:::\n:::\n\n\n在这里，随意重新排序水平不是一个好主意！因\n为`rincome`已经有了一个基于原则的顺序，我们不应该随意打乱它。`f`\n`ct_reorder()`用于那些水平是任意排序的因子。\n\n但是，将“Not applicable”与其他特殊水平一起放在前面是有意义的。这\n时可以使用`fct_relevel()`，这个函数接收一个因子`.f`，然后是你想移动到行前面的任意数量的水平。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rincome_summary, aes(x = age, y = fct_relevel(rincome, \"Not applicable\"))) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](factors_files/figure-html/unnamed-chunk-20-1.png){fig-alt='The same scatterplot but now \"Not Applicable\" is displayed at the\nbottom of the y-axis. Generally there is a positive association\nbetween income and age, and the income band with the highethst average\nage is \"Not applicable\".' width=576}\n:::\n:::\n\n\n你觉得为什么“不适用”的平均年龄这么高？\n\n另一种重新排序在你为图形上的线条着色时很有用。`f`\n`ct_reorder2(.f, .x, .y)`通过与`.x`值中最大的值相关联的`.y`值来重新排序因子`.f`。这\n使得图形更容易阅读，因为图形最右边的线条颜色将与图例对齐。\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nby_age <- gss_cat |>\n  filter(!is.na(age)) |> \n  count(age, marital) |>\n  group_by(age) |>\n  mutate(\n    prop = n / sum(n)\n  )\n\nggplot(by_age, aes(x = age, y = prop, color = marital)) +\n  geom_line(linewidth = 1) + \n  scale_color_brewer(palette = \"Set1\")\n\nggplot(by_age, aes(x = age, y = prop, color = fct_reorder2(marital, age, prop))) +\n  geom_line(linewidth = 1) +\n  scale_color_brewer(palette = \"Set1\") + \n  labs(color = \"marital\") \n```\n\n::: {.cell-output-display}\n![](factors_files/figure-html/unnamed-chunk-21-1.png){fig-alt='A line plot with age on the x-axis and proportion on the y-axis.\nThere is one line for each category of marital status: no answer,\nnever married, separated, divorced, widowed, and married. It is\na little hard to read the plot because the order of the legend is\nunrelated to the lines on the plot. Rearranging the legend makes\nthe plot easier to read because the legend colors now match the\norder of the lines on the far right of the plot. You can see some\nunsurprising patterns: the proportion never married decreases with\nage, married forms an upside down U shape, and widowed starts off\nlow but increases steeply after age 60.' width=288}\n:::\n\n::: {.cell-output-display}\n![](factors_files/figure-html/unnamed-chunk-21-2.png){fig-alt='A line plot with age on the x-axis and proportion on the y-axis.\nThere is one line for each category of marital status: no answer,\nnever married, separated, divorced, widowed, and married. It is\na little hard to read the plot because the order of the legend is\nunrelated to the lines on the plot. Rearranging the legend makes\nthe plot easier to read because the legend colors now match the\norder of the lines on the far right of the plot. You can see some\nunsurprising patterns: the proportion never married decreases with\nage, married forms an upside down U shape, and widowed starts off\nlow but increases steeply after age 60.' width=288}\n:::\n:::\n\n\n最后，对于条形图，你可以使用`fct_infreq()`来按频数递减的顺序排列水平：这是最简单的重新排序类型，因为它不需要任何额外的变量。如\n果你希望按频数递增的顺序排列它们（这样在条形图中最大的值位于右侧而不是左侧），可以将它与`fct_rev()`结合使用。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(marital = marital |> fct_infreq() |> fct_rev()) |>\n  ggplot(aes(x = marital)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](factors_files/figure-html/unnamed-chunk-22-1.png){fig-alt='A bar char of marital status ordered from least to most common:\nno answer (~0), separated (~1,000), widowed (~2,000), divorced\n(~3,000), never married (~5,000), married (~10,000).' width=576}\n:::\n:::\n\n\n### 练习\n\n1.  `tvhours`中有一些可疑的大数。均\n    数是一个好的汇总吗？\n\n2.  对于`gss_cat`中的每个因子，确定其水平的顺序是任意的还是遵循原则的。\n\n3.  为什么将“Not applicable”移至水平的前端会使其在图的底部显示？\n\n## 修改因子水平\n\n比改变水平顺序更有影响力的是修改它们的值。这\n允许你明确标签以便适合发表，合并水平以便更好显示。最\n通用且强大的工具是`fct_recode()`，它允许你重编码或改变每个水平的值。例\n如，从`gss_cat`数据框中取出`partyid`变量：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |> count(partyid)\n#> # A tibble: 10 × 2\n#>   partyid                n\n#>   <fct>              <int>\n#> 1 No answer            154\n#> 2 Don't know             1\n#> 3 Other party          393\n#> 4 Strong republican   2314\n#> 5 Not str republican  3032\n#> 6 Ind,near rep        1791\n#> # ℹ 4 more rows\n```\n:::\n\n\n这些水平的标签简洁且不一致。让\n我们调整一下使它们更长，并且使用平行结构。和\ntidyverse中大多数重命名和重新编码函数一样，新值在左侧，旧值在右侧：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(\n    partyid = fct_recode(partyid,\n      \"Republican, strong\"    = \"Strong republican\",\n      \"Republican, weak\"      = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\"        = \"Not str democrat\",\n      \"Democrat, strong\"      = \"Strong democrat\"\n    )\n  ) |>\n  count(partyid)\n#> # A tibble: 10 × 2\n#>   partyid                   n\n#>   <fct>                 <int>\n#> 1 No answer               154\n#> 2 Don't know                1\n#> 3 Other party             393\n#> 4 Republican, strong     2314\n#> 5 Republican, weak       3032\n#> 6 Independent, near rep  1791\n#> # ℹ 4 more rows\n```\n:::\n\n\n`fct_recode()`会保留没有明确提及的水平不变，并且如果你不小心引用了不存在的水平，它会警告你。\n\n要合并水平，你可以将多个旧水平分配给同一个新水平：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(\n    partyid = fct_recode(partyid,\n      \"Republican, strong\"    = \"Strong republican\",\n      \"Republican, weak\"      = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\"        = \"Not str democrat\",\n      \"Democrat, strong\"      = \"Strong democrat\",\n      \"Other\"                 = \"No answer\",\n      \"Other\"                 = \"Don't know\",\n      \"Other\"                 = \"Other party\"\n    )\n  )\n```\n:::\n\n\n请谨慎使用这种方法：如果你将真正不同的类别组合在一起，最终可能会得到误导性的结果。\n\n如果你想要合并很多水平，`fct_collapse()`是`fct_recode()`的一个有用的变体。对\n于每个新变量，你可以提供一个旧水平的向量：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(\n    partyid = fct_collapse(partyid,\n      \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n      \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n      \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n      \"dem\" = c(\"Not str democrat\", \"Strong democrat\")\n    )\n  ) |>\n  count(partyid)\n#> # A tibble: 4 × 2\n#>   partyid     n\n#>   <fct>   <int>\n#> 1 other     548\n#> 2 rep      5346\n#> 3 ind      8409\n#> 4 dem      7180\n```\n:::\n\n\n有时你只是想将小的组合并在一起，以使绘图或表格更简洁。这\n就是`fct_lump_*()`函数家族的任务。`f`\n`ct_lump_lowfreq()`是一个简单的起点，它逐步将最小的组类别合并为“Other”，并始终保持“Other”为最小的类别。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(relig = fct_lump_lowfreq(relig)) |>\n  count(relig)\n#> # A tibble: 2 × 2\n#>   relig          n\n#>   <fct>      <int>\n#> 1 Protestant 10846\n#> 2 Other      10637\n```\n:::\n\n\n在这种情况下，它不是很有用：这项调查中的大多数美国人是新教徒，但我们可能想看到更多细节！相\n反，我们可以使用`fct_lump_n()`来指定我们正好想要10个组：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(relig = fct_lump_n(relig, n = 10)) |>\n  count(relig, sort = TRUE)\n#> # A tibble: 10 × 2\n#>   relig          n\n#>   <fct>      <int>\n#> 1 Protestant 10846\n#> 2 Catholic    5124\n#> 3 None        3523\n#> 4 Christian    689\n#> 5 Other        458\n#> 6 Jewish       388\n#> # ℹ 4 more rows\n```\n:::\n\n\n阅读文档了解`fct_lump_min()`和`fct_lump_prop()`，它们在其他情况下很有用。\n\n### 练习\n\n1.  人们将自己视为民主党人、共和党人和无党派人士的比例是如何随时间变化的？\n\n2.  你如何将`rincome`合并成一小类？\n\n3.  请注意上面的`fct_lump`示例中有9个组 (不包括其他) ，为什么不是10个？(\n    提示：键入`?fct_lump`，并找到参数`other_level`的默认值为\"Other\")\n\n## 有序因子 {#sec-ordered-factors}\n\n在我们继续之前，有一种特殊的因子需要简要地提一下：有序因子。有\n序因子使用`ordered()`创建，表示水平之间存在严格的顺序和相等的距离：第一个水平“小于”第二个水平的程度与第二个水平“小于”第三个水平的程度相同，以此类推。在\n输出时可以通过因子水平之间使用的`<`来识别它们：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nordered(c(\"a\", \"b\", \"c\"))\n#> [1] a b c\n#> Levels: a < b < c\n```\n:::\n\n\n在实践中，`ordered()`因子与常规因子的行为非常相似。你\n只有在以下两种情况下可能会注意到不同的行为：\n\n-   如果你在`ggplot2`中将有序因子映射到颜色或填充上，它将默认使用`scale_color_viridis()`/`scale_fill_viridis()`，这是一种暗含排名的颜色比例尺。\n-   如果你在线性模型中使用有序函数，它将使用“多边形对比”。这些对比有些用处，但除非你拥有统计学博士学位，否则你可能不会听说过它们，即使你有，你也可能不会常规地解释它们。如果你想了解更多，我们推荐阅读 Lisa DeBruine 写的`vignette(\"contrasts\", package = \"faux\")`。\n\n鉴于这些差异有争议，我们一般不推荐使用有序因子。\n\n## 小结\n\n本章向你介绍了用于处理因子的实用包forcats，并介绍了最常用的函数。f\norcats还包含了许多其他辅助函数，在这里我们没有足够的篇幅讨论它们；因此，每当你面临以前从未遇到的因子分析挑战时，我强烈建议你浏览[reference index](https://forcats.tidyverse.org/reference/index.html)，看看是否有现成的函数可以帮助你解决问题。\n\n如果你在阅读本章后想了解更多关于因子的内容，我们建议您阅读Amelia McNamara和Nicholas Horton的论文《[Wrangling categorical data in R](https://peerj.com/preprints/3163/)》。这\n篇论文概述了[stringsAsFactors: An unauthorized biography](https://simplystatistics.org/posts/2015-07-24-stringsasfactors-an-unauthorized-biography/)和[stringsAsFactors = \\<sigh\\>](https://notstatschat.tumblr.com/post/124987394001/stringsasfactors-sigh)中讨论的一些历史，并将本书中概述的分类数据的整齐方法与R基础方法进行了比较。这\n篇论文的早期版本有助于推动forcats包的开发和范围确定；感谢Amelia和Nick！\n\n在下一章中，我们将转变话题，开始学习R中的日期和时间。日\n期和时间看起来很简单，但你很快就会看到，随着对它们了解得越多，它们似乎变得越复杂！\n",
    "supporting": [
      "factors_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}