{
  "hash": "21a4d24258fde9a548b6110af01856c6",
  "result": {
    "engine": "knitr",
    "markdown": "# 逻辑向量 {#sec-logicals}\n\n\n::: {.cell}\n\n:::\n\n\n## 引言\n\n在本章中，你将学习处理逻辑向量的工具。逻\n辑向量是最简单的向量类型，因为每个元素只能是三个可能值之一：`TRUE`（真）、`FALSE`（假）和`NA`（缺失值）。在\n原始数据中直接找到逻辑向量的情况相对较少，但在几乎每次分析的过程中，你都会创建和操作它们。\n\n我们将首先讨论创建逻辑向量的最常见方法：通过数值比较。然\n后，你将学习如何使用布尔代数来组合不同的逻辑向量，以及一些有用的总结。最\n后，我们将介绍`if_else()`和`case_when()`这两个由逻辑向量驱动的用于进行条件更改的有用函数。\n\n### 必要条件\n\n本章中你将学习的大部分函数都是由基础R提供的，因此我们不需要tidyverse，但我们仍然会加载它，以便我们可以使用`mutate()`、`filter()`等函数来处理数据框。我\n们还将继续从`nycflights13::flights`数据集中提取示例。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n然而，随着我们开始介绍更多的工具，并不总是会有一个完美的真实示例。因\n此，我们将开始使用`c()`创建一些虚拟数据:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, 3, 5, 7, 11, 13)\nx * 2\n#> [1]  2  4  6 10 14 22 26\n```\n:::\n\n\n这样做使得解释单个函数变得更容易，但代价是使得它较难应用于你的数据问题。请\n记住，我们对自由浮动的向量所做的任何操作，你都可以通过`mutate()`等函数对数据框中的变量执行相同的操作。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(x)\ndf |> \n  mutate(y = x * 2)\n#> # A tibble: 7 × 2\n#>       x     y\n#>   <dbl> <dbl>\n#> 1     1     2\n#> 2     2     4\n#> 3     3     6\n#> 4     5    10\n#> 5     7    14\n#> 6    11    22\n#> # ℹ 1 more row\n```\n:::\n\n\n## 比较\n\n创建逻辑向量的一个非常常见的方式是通过使用`<`、`<=`、`>`、`>=`、`!=`和`==`进行数值比较。到\n目前为止，我们主要在`filter()`内部临时创建逻辑变量，它们被计算、使用，然后就被丢弃了。例\n如，下面的`filter()`查找所有大致准时到达的日间航班：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dep_time > 600 & dep_time < 2000 & abs(arr_delay) < 20)\n#> # A tibble: 172,286 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1      601            600         1      844            850\n#> 2  2013     1     1      602            610        -8      812            820\n#> 3  2013     1     1      602            605        -3      821            805\n#> 4  2013     1     1      606            610        -4      858            910\n#> 5  2013     1     1      606            610        -4      837            845\n#> 6  2013     1     1      607            607         0      858            915\n#> # ℹ 172,280 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\n知道这是一种快捷方式，并且可以使用`mutate()`明确创建底层的逻辑变量是很有用的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    daytime = dep_time > 600 & dep_time < 2000,\n    approx_ontime = abs(arr_delay) < 20,\n    .keep = \"used\"\n  )\n#> # A tibble: 336,776 × 4\n#>   dep_time arr_delay daytime approx_ontime\n#>      <int>     <dbl> <lgl>   <lgl>        \n#> 1      517        11 FALSE   TRUE         \n#> 2      533        20 FALSE   FALSE        \n#> 3      542        33 FALSE   FALSE        \n#> 4      544       -18 FALSE   TRUE         \n#> 5      554       -25 FALSE   FALSE        \n#> 6      554        12 FALSE   TRUE         \n#> # ℹ 336,770 more rows\n```\n:::\n\n\n这在处理更复杂的逻辑时特别有用，因为命名中间步骤既可以让代码更易读，也更容易检查每个步骤是否正确计算。\n\n总的来说，最初的`filter`函数相当于：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    daytime = dep_time > 600 & dep_time < 2000,\n    approx_ontime = abs(arr_delay) < 20,\n  ) |> \n  filter(daytime & approx_ontime)\n```\n:::\n\n\n### 浮点数比较 {#sec-fp-comparison}\n\n对数字慎用==。例\n如，下面这个向量看起来包含数字1和2：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1 / 49 * 49, sqrt(2) ^ 2)\nx\n#> [1] 1 2\n```\n:::\n\n\n但如果你测试它们是否相等，你得到 `FALSE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx == c(1, 2)\n#> [1] FALSE FALSE\n```\n:::\n\n\n这是怎么回事呢？计\n算机存储数字时只有固定的小数位数，因此无法精确表示1/49或`sqrt(2)`，随后的计算将略有偏差。我\n们可以通过在`print()`函数中指定`digits`[^logicals-1] 参数来查看精确值：\n\n[^logicals-1]: R 通常会自动为你调用`print`函数（即`x`是`print(x)`的简写），但如果你想要提供其他参数，显式调用`print`函数会很有用。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(x, digits = 16)\n#> [1] 0.9999999999999999 2.0000000000000004\n```\n:::\n\n\n你可以看到为什么R默认会对这些数字进行四舍五入；它们确实非常接近你预期的值。\n\n既然你已经明白了为什么`==`会失败，那你能做什么呢？一\n个选择是使用`dplyr::near()`函数，它会忽略微小的差异：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnear(x, c(1, 2))\n#> [1] TRUE TRUE\n```\n:::\n\n\n### 缺失值 {#sec-na-comparison}\n\n缺失值代表未知，因此它们是“具有传染性的”：几乎任何涉及未知值的操作也将是未知的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNA > 5\n#> [1] NA\n10 == NA\n#> [1] NA\n```\n:::\n\n\n最令人困惑的结果是这一个：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNA == NA\n#> [1] NA\n```\n:::\n\n\n如果我们人为地添加一些额外的上下文，将更容易理解为什么这是正确的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We don't know how old Mary is\nage_mary <- NA\n\n# We don't know how old John is\nage_john <- NA\n\n# Are Mary and John the same age?\nage_mary == age_john\n#> [1] NA\n# We don't know!\n```\n:::\n\n\n所以，如果你想要找出所有`dep_time`缺失的航班，以下代码是不起作用的，因为`dep_time == NA`对于每一行都会返回`NA`，而`filter()`函数会自动丢弃缺失值：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dep_time == NA)\n#> # A tibble: 0 × 19\n#> # ℹ 19 variables: year <int>, month <int>, day <int>, dep_time <int>,\n#> #   sched_dep_time <int>, dep_delay <dbl>, arr_time <int>, …\n```\n:::\n\n\n相反，我们需要一个新工具: `is.na()`.\n\n### `is.na()`\n\n`is.na(x)`适用于任何类型的向量，对于缺失值返回 `TRUE`，对于其他所有值返回 `FALSE`。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(c(TRUE, NA, FALSE))\n#> [1] FALSE  TRUE FALSE\nis.na(c(1, NA, 3))\n#> [1] FALSE  TRUE FALSE\nis.na(c(\"a\", NA, \"b\"))\n#> [1] FALSE  TRUE FALSE\n```\n:::\n\n\n我们可以使用`is.na()`来找到所有缺失`dep_time`的行：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(is.na(dep_time))\n#> # A tibble: 8,255 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1       NA           1630        NA       NA           1815\n#> 2  2013     1     1       NA           1935        NA       NA           2240\n#> 3  2013     1     1       NA           1500        NA       NA           1825\n#> 4  2013     1     1       NA            600        NA       NA            901\n#> 5  2013     1     2       NA           1540        NA       NA           1747\n#> 6  2013     1     2       NA           1620        NA       NA           1746\n#> # ℹ 8,249 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\n`is.na()`在`arrange()`函数中也非常有用。`a`\n`rrange()`通常将所有缺失值放在最后，但你可以通过首先根据`is.na()`进行排序来覆盖这个默认行为：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(month == 1, day == 1) |> \n  arrange(dep_time)\n#> # A tibble: 842 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1      517            515         2      830            819\n#> 2  2013     1     1      533            529         4      850            830\n#> 3  2013     1     1      542            540         2      923            850\n#> 4  2013     1     1      544            545        -1     1004           1022\n#> 5  2013     1     1      554            600        -6      812            837\n#> 6  2013     1     1      554            558        -4      740            728\n#> # ℹ 836 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n\nflights |> \n  filter(month == 1, day == 1) |> \n  arrange(desc(is.na(dep_time)), dep_time)\n#> # A tibble: 842 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1       NA           1630        NA       NA           1815\n#> 2  2013     1     1       NA           1935        NA       NA           2240\n#> 3  2013     1     1       NA           1500        NA       NA           1825\n#> 4  2013     1     1       NA            600        NA       NA            901\n#> 5  2013     1     1      517            515         2      830            819\n#> 6  2013     1     1      533            529         4      850            830\n#> # ℹ 836 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\n我们将在 @sec-missing-values 更深入地讨论缺失值。\n\n### 练习\n\n1.  `dplyr::near()` 是如何工作的？键入`near`以查看源代码。 `sqrt(2)^2` 与 2接近吗？\n2.  结合使用`mutate()`,`is.na()`,和`count()`来描述`dep_time`、`sched_dep_time`和`dep_delay`中缺失值之间的联系。\n\n## 布尔代数\n\n若你有了多个逻辑向量，可以使用布尔代数将它们组合在一起。在\nR中，`&`是“和”，`|`是“或”，`!` 是“非”，而`xor()`是异或[^logicals-2]。\n例如，`df %>% filter(!is.na(x))`查找所有`x`不缺失的行，而`df %>% filter(x < -10 | x > 0)`查找所有`x`小于-10或大于0的行。\n@fig-bool-ops 展示了完整的布尔操作集以及它们是如何工作的。\n\n[^logicals-2]: 也就是说，如果`x`为真，或`y`为真，但两者不同时为真，那么`xor(x, y)`就为真。这\n    通常是我们在英语中使用“或”的方式。“\n    两者都”通常不是对“你想要冰淇淋还是蛋糕？”\n    这个问题的可接受答案。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The complete set of Boolean operations. `x` is the left-hand\ncircle, `y` is the right-hand circle, and the shaded region show\nwhich parts each operator selects.\n](diagrams/transform.png){#fig-bool-ops fig-alt='Seven Venn diagrams, each explaining a given logical operator. The\ncircles (sets) in each of the Venn diagrams represent x and y. x &\n!y is x but none of y; x & y is the intersection of x and y; !x & y is\ny but none of x; x is all of x none of y; xor(x, y) is everything\nexcept the intersection of x and y; y is all of y and none of x; and\nx | y is everything.' width=395}\n:::\n:::\n\n\n除了`&`和`|`之外，R 还有`&&`和`||`。不\n要在 dplyr 函数中使用它们！这\n些被称为短路运算符，并且总是只返回一个 `TRUE` 或 `FALSE`。它\n们对编程很重要，但对数据科学来说并不重要。\n\n### 缺失值 {#sec-na-boolean}\n\n布尔代数中缺失值的规则有点难解释，因为乍一看它们似乎不一致：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(x = c(TRUE, FALSE, NA))\n\ndf |> \n  mutate(\n    and = x & NA,\n    or = x | NA\n  )\n#> # A tibble: 3 × 3\n#>   x     and   or   \n#>   <lgl> <lgl> <lgl>\n#> 1 TRUE  NA    TRUE \n#> 2 FALSE FALSE NA   \n#> 3 NA    NA    NA\n```\n:::\n\n\n要理解其中的原因，可以考虑`NA | TRUE`（即`NA`或`TRUE`）。在\n逻辑向量中，缺失值意味着该值可能是`TRUE`或`FALSE`。因\n为至少有一个是`TRUE`，所以`TRUE | TRUE`和`FALSE | TRUE` 都是`TRUE`。`N`\n`A | TRUE`也必须是`TRUE`，因为`NA`可以是`TRUE`或`FALSE`。然\n而，`NA | FALSE`是`NA`，因为我们不知道`NA`是`TRUE`还是`FALSE`。类\n似的推理也适用于`NA & FALSE`。\n\n### 运算顺序\n\n请注意，操作的顺序并不与英语中的顺序相同。以\n下代码用于查找所有在十一月或十二月出发的航班：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n   filter(month == 11 | month == 12)\n```\n:::\n\n\n你可能会想要像在英语中那样写： \"Find all flights that departed in November or December.\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n   filter(month == 11 | 12)\n#> # A tibble: 336,776 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1      517            515         2      830            819\n#> 2  2013     1     1      533            529         4      850            830\n#> 3  2013     1     1      542            540         2      923            850\n#> 4  2013     1     1      544            545        -1     1004           1022\n#> 5  2013     1     1      554            600        -6      812            837\n#> 6  2013     1     1      554            558        -4      740            728\n#> # ℹ 336,770 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\n这段代码没有报错，但看起来也没有正常工作。这\n是怎么回事呢？在\n这里，R 首先计算`month == 11`创建一个逻辑向量，我们称之为`nov`。然\n后它计算`nov | 12`。当\n你使用数字与逻辑运算符结合时，除了0以外的所有数字都会被转换为TRUE，因此这等价于`nov | TRUE`，而`TRUE | TRUE`总是`TRUE`，所以每一行都会被选中：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    nov = month == 11,\n    final = nov | 12,\n    .keep = \"used\"\n  )\n#> # A tibble: 336,776 × 3\n#>   month nov   final\n#>   <int> <lgl> <lgl>\n#> 1     1 FALSE TRUE \n#> 2     1 FALSE TRUE \n#> 3     1 FALSE TRUE \n#> 4     1 FALSE TRUE \n#> 5     1 FALSE TRUE \n#> 6     1 FALSE TRUE \n#> # ℹ 336,770 more rows\n```\n:::\n\n\n### `%in%`\n\n避免 `==`s 和 `|`s 顺序错误的一个简单方法是使用`%in%`。`x`\n`%in% y`返回一个与`x`长度相同的逻辑向量，当`x`中的某个值在`y`中时，该逻辑向量的对应位置为`TRUE`。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:12 %in% c(1, 5, 11)\n#>  [1]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\nletters[1:10] %in% c(\"a\", \"e\", \"i\", \"o\", \"u\")\n#>  [1]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE\n```\n:::\n\n\n因此，要查找11月和12月的所有航班，可以这样写:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(month %in% c(11, 12))\n```\n:::\n\n\n请注意，`%in%`对`NA`的处理规则与`==`不同，因为`NA %in% NA`是TRUE。\n\nNote that `%in%` obeys different rules for `NA` to `==`, as `NA %in% NA` is `TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, NA) == NA\n#> [1] NA NA NA\nc(1, 2, NA) %in% NA\n#> [1] FALSE FALSE  TRUE\n```\n:::\n\n\n这可以作为一个有用的快捷方式:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dep_time %in% c(NA, 0800))\n#> # A tibble: 8,803 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1      800            800         0     1022           1014\n#> 2  2013     1     1      800            810       -10      949            955\n#> 3  2013     1     1       NA           1630        NA       NA           1815\n#> 4  2013     1     1       NA           1935        NA       NA           2240\n#> 5  2013     1     1       NA           1500        NA       NA           1825\n#> 6  2013     1     1       NA            600        NA       NA            901\n#> # ℹ 8,797 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\n### 练习\n\n1.  找出所有到达延误（`arr_delay`）缺失但起飞延误（`dep_delay`）不缺失的航班。找出所有到达时间（`arr_time`）和计划到达时间（`sched_arr_time`）都不缺失，但到达延误（`arr_delay`）缺失的航班。\n2.  有多少航班的起飞时间（`dep_time`）是缺失的？这些行中还缺失了哪些其他变量？这些行可能代表什么？\n3.  假设缺失的起飞时间（`dep_time`）意味着航班被取消，查看每天取消的航班数量。是否存在某种模式？被取消航班的比例与非】未被取消航班的平均延误之间是否存在联系？\n\n## 小结 {#sec-logical-summaries}\n\n以下部分描述了一些用于总结逻辑向量的有用技术。除\n了专门与逻辑向量一起工作的函数外，你还可以使用与数字向量一起工作的函数。\n\n### 逻辑汇总函数（logical summaries）\n\n有两个主要的逻辑汇总函数：`any()`和`all()`。`a`\n`ny(x)`相当于`|`，如果`x`中有任何`TRUE`值，它就会返回`TRUE`。`a`\n`ll(x)`相当于`&`，只有当`x`的所有值都是`TRUE`时，它才会返回`TRUE`。像\n所有汇总函数一样，如果存在任何缺失值，它们将返回`NA`，并且你可以像往常一样使用`na.rm = TRUE`来让缺失值消失。\n\n例如，我们可以使用`all()`和`any()`来找出是否每个航班的起飞延误都不超过一个小时，或者是否有任何航班的到达延误了五个小时或更多。使\n用`group_by()`可以让我们按天来执行这些操作：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(year, month, day) |> \n  summarize(\n    all_delayed = all(dep_delay <= 60, na.rm = TRUE),\n    any_long_delay = any(arr_delay >= 300, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n#> # A tibble: 365 × 5\n#>    year month   day all_delayed any_long_delay\n#>   <int> <int> <int> <lgl>       <lgl>         \n#> 1  2013     1     1 FALSE       TRUE          \n#> 2  2013     1     2 FALSE       TRUE          \n#> 3  2013     1     3 FALSE       FALSE         \n#> 4  2013     1     4 FALSE       FALSE         \n#> 5  2013     1     5 FALSE       TRUE          \n#> 6  2013     1     6 FALSE       FALSE         \n#> # ℹ 359 more rows\n```\n:::\n\n\n然而，在大多数情况下，`any()`和`all()`有点过于粗略，如果能够更详细地了解有多少值是`TRUE`或`FALSE`就好了。这\n就引出了数值摘要（numeric summaries）。\n\n### 逻辑向量的数值汇总 {#sec-numeric-summaries-of-logicals}\n\n当你在数值上下文中使用逻辑向量时，`TRUE` 变成 1，`FALSE` 变成 0。这\n使得`sum()`和`mean()`函数对逻辑向量非常有用，因为`sum(x)`给出 `TRUE` 的数量，而`mean(x)`给出 `TRUE` 的比例（因为`mean()`实际上就是`sum()`除以`length()`）。\n\n例如，我们可以查看起飞延误最多一小时的航班的比例，以及到达延误五小时或更多的航班的数量：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(year, month, day) |> \n  summarize(\n    proportion_delayed = mean(dep_delay <= 60, na.rm = TRUE),\n    count_long_delay = sum(arr_delay >= 300, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n#> # A tibble: 365 × 5\n#>    year month   day proportion_delayed count_long_delay\n#>   <int> <int> <int>              <dbl>            <int>\n#> 1  2013     1     1              0.939                3\n#> 2  2013     1     2              0.914                3\n#> 3  2013     1     3              0.941                0\n#> 4  2013     1     4              0.953                0\n#> 5  2013     1     5              0.964                1\n#> 6  2013     1     6              0.959                0\n#> # ℹ 359 more rows\n```\n:::\n\n\n### 逻辑子集（logical subsetting）\n\n逻辑向量在汇总中的最后一个用途是：你可以使用逻辑向量来筛选单个变量到感兴趣的子集。这\n利用了基本的子集操作符`[`（发音为“subset”），你将在 @sec-subset-many 中学到更多关于它的内容。\n\n我们想要查看实际上有延误的航班的平均延误时间。一\n种方法是先筛选航班，然后计算平均延误时间：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(arr_delay > 0) |> \n  group_by(year, month, day) |> \n  summarize(\n    behind = mean(arr_delay),\n    n = n(),\n    .groups = \"drop\"\n  )\n#> # A tibble: 365 × 5\n#>    year month   day behind     n\n#>   <int> <int> <int>  <dbl> <int>\n#> 1  2013     1     1   32.5   461\n#> 2  2013     1     2   32.0   535\n#> 3  2013     1     3   27.7   460\n#> 4  2013     1     4   28.3   297\n#> 5  2013     1     5   22.6   238\n#> 6  2013     1     6   24.4   381\n#> # ℹ 359 more rows\n```\n:::\n\n\n这样做是可以的，但如果我们还想计算提前到达的航班的平均延误时间呢？我\n们需要执行一个单独的筛选步骤，然后考虑如何将两个数据框合并在一起。相\n反，你可以使用`[`来执行内联筛选：`arr_delay[arr_delay > 0]`将仅返回正的到达延误时间。\n\n由此引出：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(year, month, day) |> \n  summarize(\n    behind = mean(arr_delay[arr_delay > 0], na.rm = TRUE),\n    ahead = mean(arr_delay[arr_delay < 0], na.rm = TRUE),\n    n = n(),\n    .groups = \"drop\"\n  )\n#> # A tibble: 365 × 6\n#>    year month   day behind ahead     n\n#>   <int> <int> <int>  <dbl> <dbl> <int>\n#> 1  2013     1     1   32.5 -12.5   842\n#> 2  2013     1     2   32.0 -14.3   943\n#> 3  2013     1     3   27.7 -18.2   914\n#> 4  2013     1     4   28.3 -17.0   915\n#> 5  2013     1     5   22.6 -14.0   720\n#> 6  2013     1     6   24.4 -13.6   832\n#> # ℹ 359 more rows\n```\n:::\n\n\n同时也要注意组大小的差异：在第一部分中，`n()`给出的是每天延误航班的数量；在第二部分中，`n()`给出的是总航班数量。\n\n### 练习\n\n1.  `sum(is.na(x))` 会告诉你什么信息？ `mean(is.na(x))`呢？\n2.  当应用于逻辑向量时，`prod()`返回什么？它等于什么逻辑汇总函数？当应用于逻辑向量时`min()`返回什么？它等于什么逻辑汇总函数？阅读文档并进行一些实验。\n\n## 条件转换\n\n逻辑向量最强大的功能之一是用于条件转换，即当满足条件x时执行一个操作，当满足条件y时执行另一个操作。有\n两个重要的工具可以实现这一功能：`if_else()`和`case_when()`。\n\n### `if_else()`\n\n如果你想要在一个条件为`TRUE`时使用一个值，而在条件为`FALSE`时使用另一个值，你可以使用`dplyr::if_else()`。你\n总是会用到`if_else()`的前三个参数。第\n一个参数`condition`，是一个逻辑向量；第二个参数`true`，给出当条件为真时的输出；第三个参数`false`，给出当条件为假时的输出。\n\n让我们从一个简单的例子开始，将一个数值向量标记为“+ve”（正）或“-ve”（负）：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(-3:3, NA)\nif_else(x > 0, \"+ve\", \"-ve\")\n#> [1] \"-ve\" \"-ve\" \"-ve\" \"-ve\" \"+ve\" \"+ve\" \"+ve\" NA\n```\n:::\n\n\n还有一个可选的第四个参数，如果输入是`NA`，则会使用`missing`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif_else(x > 0, \"+ve\", \"-ve\", \"???\")\n#> [1] \"-ve\" \"-ve\" \"-ve\" \"-ve\" \"+ve\" \"+ve\" \"+ve\" \"???\"\n```\n:::\n\n\n你还可以使用向量作为`true`和`false`参数。例\n如，这允许我们创建一个`abs()`函数的简化实现：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif_else(x < 0, -x, x)\n#> [1]  3  2  1  0  1  2  3 NA\n```\n:::\n\n\n到目前为止，所有的参数都使用了相同的向量，当然你也可以混合和匹配。例\n如，你可以像这样实现`coalesce()`函数的简单版本：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(NA, 1, 2, NA)\ny1 <- c(3, NA, 4, 6)\nif_else(is.na(x1), y1, x1)\n#> [1] 3 1 2 6\n```\n:::\n\n\n你可能已经注意到我们上面标记示例中的一个小瑕疵：零既不是正数也不是负数。我\n们可以通过添加另一个`if_else()`来解决这个问题：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif_else(x == 0, \"0\", if_else(x < 0, \"-ve\", \"+ve\"), \"???\")\n#> [1] \"-ve\" \"-ve\" \"-ve\" \"0\"   \"+ve\" \"+ve\" \"+ve\" \"???\"\n```\n:::\n\n\n这已经有点难以阅读了，你可以想象如果有更多的条件，它只会变得更难。相\n反，你可以切换到`dplyr::case_when()`。\n\n### `case_when()`\n\ndplyr的`case_when()`是受SQL的`CASE`语句启发，为不同条件执行不同计算提供了灵活的方法。它\n有一个特殊的语法，不过这个语法看起来与tidyverse中将要使用的任何其他内容都不相似。它\n接受形如`condition ~ output`的组合，`condition`必须是一个逻辑向量，当它为TRUE时，将使用`output`。\n\n这意味着我们可以将之前嵌套的`if_else()`重新创建如下：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(-3:3, NA)\ncase_when(\n  x == 0   ~ \"0\",\n  x < 0    ~ \"-ve\", \n  x > 0    ~ \"+ve\",\n  is.na(x) ~ \"???\"\n)\n#> [1] \"-ve\" \"-ve\" \"-ve\" \"0\"   \"+ve\" \"+ve\" \"+ve\" \"???\"\n```\n:::\n\n\n虽然代码更多，但它也更清晰。\n\n为了解释`case_when()`是如何工作的，让我们探索一些更简单的案例。如\n果没有任何情况匹配，则输出为NA：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncase_when(\n  x < 0 ~ \"-ve\",\n  x > 0 ~ \"+ve\"\n)\n#> [1] \"-ve\" \"-ve\" \"-ve\" NA    \"+ve\" \"+ve\" \"+ve\" NA\n```\n:::\n\n\n如果你想为未匹配到任何条件的情况设置一个“默认”的值，可以使用`.default`：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncase_when(\n  x < 0 ~ \"-ve\",\n  x > 0 ~ \"+ve\",\n  .default = \"???\"\n)\n#> [1] \"-ve\" \"-ve\" \"-ve\" \"???\" \"+ve\" \"+ve\" \"+ve\" \"???\"\n```\n:::\n\n\n注意，如果多个条件匹配，只会使用第一个条件:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncase_when(\n  x > 0 ~ \"+ve\",\n  x > 2 ~ \"big\"\n)\n#> [1] NA    NA    NA    NA    \"+ve\" \"+ve\" \"+ve\" NA\n```\n:::\n\n\n就像使用`if_else()`一样，你可以在`~`的两边使用变量，并且可以根据需要混合和匹配变量来解决你的问题。例\n如，我们可以使用`case_when()`为到达延误提供一些人们可读的标签：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    status = case_when(\n      is.na(arr_delay)      ~ \"cancelled\",\n      arr_delay < -30       ~ \"very early\",\n      arr_delay < -15       ~ \"early\",\n      abs(arr_delay) <= 15  ~ \"on time\",\n      arr_delay < 60        ~ \"late\",\n      arr_delay < Inf       ~ \"very late\",\n    ),\n    .keep = \"used\"\n  )\n#> # A tibble: 336,776 × 2\n#>   arr_delay status \n#>       <dbl> <chr>  \n#> 1        11 on time\n#> 2        20 late   \n#> 3        33 late   \n#> 4       -18 early  \n#> 5       -25 early  \n#> 6        12 on time\n#> # ℹ 336,770 more rows\n```\n:::\n\n\n在编写这种复杂的`case_when()`语句时要小心；我最初的两次尝试混合使用了`<`和`>`，结果不小心创建了重叠的条件。\n\n### 兼容类型（compatible types）\n\n请注意，`if_else()`和`case_when()`都要求输出具有兼容的类型。如\n果它们不兼容，你会看到类似这样的错误：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif_else(TRUE, \"a\", 1)\n#> Error in `if_else()`:\n#> ! Can't combine `true` <character> and `false` <double>.\n\ncase_when(\n  x < -1 ~ TRUE,  \n  x > 0  ~ now()\n)\n#> Error in `case_when()`:\n#> ! Can't combine `..1 (right)` <logical> and `..2 (right)` <datetime<local>>.\n```\n:::\n\n\n总体来说，兼容的类型是相对较少的，因为自动将一个类型的向量转换为另一个类型的向量是常见的错误来源。以\n下是一些最重要的兼容情况：\n\n-   数字和逻辑向量是兼容的，正如我们在\\@sec-numeric-summaries-of-logicals 讨论的那样。\n-   字符串和因子（@sec-factors） 是兼容的，因为可以将因子视为一组具有固定值的字符串。\n-   日期和日期-时间，我们将在 @sec-dates-and-times 部分讨论，它们是兼容的，因为你可以将日期视为日期-时间的一个特例。\n-   `NA`, 从技术上讲是逻辑向量，与所有类型都兼容，因为每个向量都有表示缺失值的方式。\n\n我们不要求你记住这些规则，但随着时间的推移，它们应该变得自然而然，因为它们在整个tidyverse中都被一致地应用。\n\n### 练习\n\n1.  如果一个数能被2整除，那么它就是偶数。在\n    R中，你可以通过`x %% 2 == 0`来判断一个数是否为偶数。利\n    用这个事实和`if_else()`函数来确定0到20之间的每个数是偶数还是奇数。\n\n2.  给定一个天数向量，如`x <- c(\"Monday\", \"Saturday\", \"Wednesday\")`，使用`if_else()`语句将它们标记为周末或工作日。\n\n3.  使用`if_else()`函数计算一个名为`x`的数值向量的绝对值。\n\n4.  编写一个`case_when()`语句，利用`flights`数据集中的`month`和`day`列来标记一些重要的美国节假日（例如，新年、7月4日、感恩节和圣诞节）。首\n    先创建一个逻辑列，其值为`TRUE`或`FALSE`，然后创建一个字符列，该列要么给出节假日的名称，要么是NA。\n\n## 小结\n\n逻辑向量的定义很简单，因为每个值都必须是`TRUE`、`FALSE`或`NA`。但\n逻辑向量提供了巨大的功能。在\n本章中，你学习了如何使用`>`、`<`、`<=`、`>=`、`==`、`!=`和`is.na()`创建逻辑向量，如何使用`!`、`&`和`|`组合它们，以及如何使用`any()`、`all()`、`sum()`和`mean()`对它们进行汇总。你\n还学习了强大的`if_else()`和`case_when()`函数，这些函数允许你根据逻辑向量的值返回值。\n\n在接下来的章节中，我们将一次又一次地看到逻辑向量。例\n如，在\\@sec-strings ，你将学习`str_detect(x, pattern)`，它返回一个逻辑向量，对于x中匹配模式的元素，该向量的值为`TRUE`；在\\@sec-dates-and-times ，你将通过比较日期和时间来创建逻辑向量。但\n现在，我们将转向下一个最重要的向量类型：数值向量。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}