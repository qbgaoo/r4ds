{
  "hash": "8ce8e3a35750c03fde55640a2e83f111",
  "result": {
    "engine": "knitr",
    "markdown": "# 正则表达式 {#sec-regular-expressions}\n\n\n::: {.cell}\n\n:::\n\n\n## 引言\n\n在 @sec-strings 部分，你学习了一系列用于处理字符串的有用函数。本\n章将重点介绍使用正则表达式的函数，正则表达式（regular expression）是一种简洁而强大的语言，用于描述字符串中的模式。术\n语“正则表达式”有点长，所以大多数人将其缩写为“regex”[^regexps-1]或“regexp”。\n\n[^regexps-1]: 你可以用硬音 g（reg-x）或软音 g（rej-x）来发音。\n\n本章首先介绍正则表达式的基础知识以及数据分析中最有用的`stringr`函数。然\n后，我们将扩展你对模式的了解，并介绍七个重要的新主题（转义、锚定、字符类、简写类、量词、优先级和分组）。接\n下来，我们将讨论`stringr`函数可以处理的其他类型的模式，以及允许你调整正则表达式操作的各种“标志”。最\n后，我们将概述tidyverse和base R中可能会使用正则表达式的其他地方。\n\n### 必要条件\n\n在本章中，我们将使用tidyverse的核心成员stringr和tidyr中的正则表达式函数，以及`babynames`包中的数据。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(babynames)\n```\n:::\n\n\n在本章中，我们将使用非常简单的内联示例的混合方式，以便你能够理解基本概念，还会使用babynames数据集中的数据，以及来自stringr的三个字符向量：\n\n-   `fruit` 包含了80种水果的名称。\n-   `words` 包含了980个常见的英语单词。\n-   `sentences` 包含了720个短句。\n\n## 模式的基础 {#sec-reg-basics}\n\n我们将使用`str_view()`来学习正则表达式模式是如何工作的。在\n上一章中，我们使用`str_view()`来更好地理解字符串与其输出表示之间的区别，现在我们将使用它的第二个参数，即正则表达式。当\n提供这个参数时，`str_view()`将仅显示字符串向量中匹配的部分，将每个匹配项用`< >`括起来，并在可能的情况下将匹配项以蓝色高亮显示。\n\n最简单的模式由字母和数字组成，它们会精确匹配这些字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"berry\")\n#>  [6] │ bil<berry>\n#>  [7] │ black<berry>\n#> [10] │ blue<berry>\n#> [11] │ boysen<berry>\n#> [19] │ cloud<berry>\n#> [21] │ cran<berry>\n#> ... and 8 more\n```\n:::\n\n\n字母和数字进行精确匹配，被称为字面字符（literal characters）。大\n多数标点符号字符，如`.`、`+`、`*`、`[`、`]`和`?` 具有特殊含义[^regexps-2]，被称为元字符（metacharacters）。\n例如，`.`将匹配任何字符[^regexps-3]，所以 `\"a.\"` 将匹配任何包含 \"a\" 后面跟着另一个字符的字符串\n：\n\n[^regexps-2]: 你将在 @sec-regexp-escaping 中学习如何转义这些特殊含义。\n\n[^regexps-3]: 除了`\\n`以外的任何字符。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"a\", \"ab\", \"ae\", \"bd\", \"ea\", \"eab\"), \"a.\")\n#> [2] │ <ab>\n#> [3] │ <ae>\n#> [6] │ e<ab>\n```\n:::\n\n\n或者，我们可以找到所有包含“a”，后跟三个字母，再后跟“e”的水果：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"a...e\")\n#>  [1] │ <apple>\n#>  [7] │ bl<ackbe>rry\n#> [48] │ mand<arine>\n#> [51] │ nect<arine>\n#> [62] │ pine<apple>\n#> [64] │ pomegr<anate>\n#> ... and 2 more\n```\n:::\n\n\n**量词（Quantifiers）** 控制模式可以匹配的次数：\n\n-   `?` 使得一个模式变为可选的（即它匹配0次或1次）\n-   `+` 允许一个模式重复（即它至少匹配一次）\n-   `*` 允许一个模式变为可选的或重复（即它匹配任意次数，包括0次）\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ab? matches an \"a\", optionally followed by a \"b\".\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab?\")\n#> [1] │ <a>\n#> [2] │ <ab>\n#> [3] │ <ab>b\n\n# ab+ matches an \"a\", followed by at least one \"b\".\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab+\")\n#> [2] │ <ab>\n#> [3] │ <abb>\n\n# ab* matches an \"a\", followed by any number of \"b\"s.\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab*\")\n#> [1] │ <a>\n#> [2] │ <ab>\n#> [3] │ <abb>\n```\n:::\n\n\n**字符类（Character classes）**由`[]`定义，允许你匹配一组字符，例如，`[abcd]`匹配“a”、“b”、“c”或“d”。你\n也可以通过在开头使用`^`来反转匹配：`[^abcd]`匹配除“a”、“b”、“c”或“d”之外的任何字符。我\n们可以利用这个思路来查找被元音字母包围的“x”，或者被辅音字母包围的“y”。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(words, \"[aeiou]x[aeiou]\")\n#> [284] │ <exa>ct\n#> [285] │ <exa>mple\n#> [288] │ <exe>rcise\n#> [289] │ <exi>st\nstr_view(words, \"[^aeiou]y[^aeiou]\")\n#> [836] │ <sys>tem\n#> [901] │ <typ>e\n```\n:::\n\n\n你可以使用**分隔符（alternation）**`|` 在一个或多个备选模式中进行选择。例\n如，下面的模式会查找包含“apple”、“melon”或“nut”，或者一个重复元音字母的水果。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"apple|melon|nut\")\n#>  [1] │ <apple>\n#> [13] │ canary <melon>\n#> [20] │ coco<nut>\n#> [52] │ <nut>\n#> [62] │ pine<apple>\n#> [72] │ rock <melon>\n#> ... and 1 more\nstr_view(fruit, \"aa|ee|ii|oo|uu\")\n#>  [9] │ bl<oo>d orange\n#> [33] │ g<oo>seberry\n#> [47] │ lych<ee>\n#> [66] │ purple mangost<ee>n\n```\n:::\n\n\n正则表达式非常紧凑，使用了大量标点符号字符，所以一开始可能会显得让人难以理解和难以阅读。不\n过不用担心，随着不断实践，你会越来越熟练，简单的模式很快就会变得驾轻就熟。让\n我们通过练习一些有用的`stringr`函数来开始这个过程吧。\n\n## 关键函数 {#sec-stringr-regex-funs}\n\n既然你已经掌握了正则表达式的基础知识，接下来就让我们使用`stringr`和`tidyr`函数来应用它们吧。在\n以下部分，你将学习如何检测匹配项是否存在，如何计算匹配项的数量，如何用固定文本替换匹配项，以及如何使用模式来提取文本。\n\n### 检测匹配项\n\n`str_detect()` 函数返回一个逻辑向量，如果模式与字符向量中的某个元素匹配，则返回`TRUE`，否则返回`FALSE`：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(c(\"a\", \"b\", \"c\"), \"[aeiou]\")\n#> [1]  TRUE FALSE FALSE\n```\n:::\n\n\n由于`str_detect()`返回一个与初始向量长度相同的逻辑向量，因此能与`filter()`搭配很好。例\n如，这段代码用于查找所有包含小写字母\"x\"的最受欢迎的名字：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames |> \n  filter(str_detect(name, \"x\")) |> \n  count(name, wt = n, sort = TRUE)\n#> # A tibble: 974 × 2\n#>   name           n\n#>   <chr>      <int>\n#> 1 Alexander 665492\n#> 2 Alexis    399551\n#> 3 Alex      278705\n#> 4 Alexandra 232223\n#> 5 Max       148787\n#> 6 Alexa     123032\n#> # ℹ 968 more rows\n```\n:::\n\n\n还可以通过将`str_detect()`与`summarize()`结合，并搭配`sum()`或`mean()`来使用。`s`\n`um(str_detect(x, pattern))`告诉你匹配的观测的数量，而`mean(str_detect(x, pattern))`告诉你匹配的比例。例\n如，以下代码段计算和可视化了按年份划分的婴儿名字[^regexps-4] 包含\"x\"的比例。\n看来最近它们的受欢迎程度大幅增加了！\n\n[^regexps-4]: 这给出了包含\"x\"的名字的比例；如果你想要知道名字中包含\"x\"的婴儿的比例，你需要计算一个加权平均值。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames |> \n  group_by(year) |> \n  summarize(prop_x = mean(str_detect(name, \"x\"))) |> \n  ggplot(aes(x = year, y = prop_x)) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](regexps_files/figure-html/unnamed-chunk-11-1.png){fig-alt='A time series showing the proportion of baby names that contain the letter x.\nThe proportion declines gradually from 8 per 1000 in 1880 to 4 per 1000 in\n1980, then increases rapidly to 16 per 1000 in 2019.' width=576}\n:::\n:::\n\n\n与`str_detect()`密切相关的两个函数是`str_subset()`和`str_which()`。`s`\n`tr_subset()`返回一个只包含匹配字符串的字符向量；`str_which()`返回一个给出匹配字符串位置的整数向量。\n\n### 匹配次数\n\n从复杂度来看，比`str_detect()`更进一步的是`str_count()`：它不仅仅告诉你匹配与否，还会告诉你每个字符串中有多少匹配项。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"apple\", \"banana\", \"pear\")\nstr_count(x, \"p\")\n#> [1] 2 0 1\n```\n:::\n\n\n请注意，每个匹配都从上一个匹配的末尾开始，即正则表达式匹配永远不会重叠。例\n如，在`\"abababa\"`中，`\"aba\"`模式将匹配多少次？正\n则表达式说是两次，而不是三次：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_count(\"abababa\", \"aba\")\n#> [1] 2\nstr_view(\"abababa\", \"aba\")\n#> [1] │ <aba>b<aba>\n```\n:::\n\n\n`str_count()`与`mutate()`结合使用是很自然的。下\n面的示例使用`str_count()`与字符类来计算每个名字中的元音和辅音字母的数量。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames |> \n  count(name) |> \n  mutate(\n    vowels = str_count(name, \"[aeiou]\"),\n    consonants = str_count(name, \"[^aeiou]\")\n  )\n#> # A tibble: 97,310 × 4\n#>   name          n vowels consonants\n#>   <chr>     <int>  <int>      <int>\n#> 1 Aaban        10      2          3\n#> 2 Aabha         5      2          3\n#> 3 Aabid         2      2          3\n#> 4 Aabir         1      2          3\n#> 5 Aabriella     5      4          5\n#> 6 Aada          1      2          2\n#> # ℹ 97,304 more rows\n```\n:::\n\n\n如果仔细观察，你会注意到我们的计算有些问题：\"Aaban\" 包含三个 \"a\"，但我们的汇总报告只显示了两个元音字母。这\n是因为正则表达式是区分大小写的。有\n三种方法可以修复这个问题：\n\n-   将大写元音字母添加到字符类中：\n\n    `str_count(name, \"[aeiouAEIOU]\")`。\n\n-   告诉正则表达式忽略大小写：\n\n    `str_count(name, regex(\"[aeiou]\", ignore_case = TRUE))`。\n\n    我们将在 @sec-flags 讨论更多内容。\n\n-   使用`str_to_lower()`将名字转换为小写：\n\n    `str_count(str_to_lower(name), \"[aeiou]\")`。\n\n在处理字符串时，这种多样化的方法是非常典型的——通常有多种方式可以达到你的目标，要么是通过使你的模式更复杂，要么是对你的字符串进行一些预处理。如\n果你在使用一种方法时遇到困难，从另一个角度解决问题往往是有用的。\n\n在这种情况下，由于我们对名字应用了两个函数，我认为先转换它更容易：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames |> \n  count(name) |> \n  mutate(\n    name = str_to_lower(name),\n    vowels = str_count(name, \"[aeiou]\"),\n    consonants = str_count(name, \"[^aeiou]\")\n  )\n#> # A tibble: 97,310 × 4\n#>   name          n vowels consonants\n#>   <chr>     <int>  <int>      <int>\n#> 1 aaban        10      3          2\n#> 2 aabha         5      3          2\n#> 3 aabid         2      3          2\n#> 4 aabir         1      3          2\n#> 5 aabriella     5      5          4\n#> 6 aada          1      3          1\n#> # ℹ 97,304 more rows\n```\n:::\n\n\n### 替换值\n\n除了检测和计算匹配项之外，我们还可以使用`str_replace()`和`str_replace_all()`来修改它们。`s`\n`tr_replace()`替换第一个匹配项，如其名所示；`str_replace_all()`则会替换所有匹配项。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"apple\", \"pear\", \"banana\")\nstr_replace_all(x, \"[aeiou]\", \"-\")\n#> [1] \"-ppl-\"  \"p--r\"   \"b-n-n-\"\n```\n:::\n\n\n`str_remove()` and `str_remove_all()` are handy shortcuts for `str_replace(x, pattern, \"\")`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"apple\", \"pear\", \"banana\")\nstr_remove_all(x, \"[aeiou]\")\n#> [1] \"ppl\" \"pr\"  \"bnn\"\n```\n:::\n\n\n在进行数据清洗时，这些函数通常会与`mutate()`一起使用，并且你会经常反复应用它们来消除不一致格式的多层结构。\n\n### 提取变量 {#sec-extract-variables}\n\n我们要讨论的最后一个函数`separate_wider_regex()`使用正则表达式将数据从一个列提取到一个或多个新列中。它\n与你在 @sec-string-columns 中了解的`separate_wider_position()`和`separate_wider_delim()`是同类函数。这\n些函数存在于`tidyr`中，因为它们操作的是数据框（的列），而不是单独的向量。\n\n让我们创建一个简单的数据集来展示它的工作原理。这\n里我们有一些从`babynames`派生的数据，其中包含了一些人的名字、性别和年龄，但这些数据的格式相当奇怪的[^regexps-5]：\n\n[^regexps-5]: 我们希望能向你保证，在现实生活中你永远不会看到这种奇怪的数据格式；但不幸的是，在你的职业生涯中，你可能会看到比这更奇怪的数据格式！\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~str,\n  \"<Sheryl>-F_34\",\n  \"<Kisha>-F_45\", \n  \"<Brandon>-N_33\",\n  \"<Sharon>-F_38\", \n  \"<Penny>-F_58\",\n  \"<Justin>-M_41\", \n  \"<Patricia>-F_84\", \n)\n```\n:::\n\n\n要使用`separate_wider_regex()`提取这些数据，我们只需要构建一系列与每个部分匹配的正则表达式。如\n果希望该部分内容出现在输出中，给它指定一个名称：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  separate_wider_regex(\n    str,\n    patterns = c(\n      \"<\", \n      name = \"[A-Za-z]+\", \n      \">-\", \n      gender = \".\",\n      \"_\",\n      age = \"[0-9]+\"\n    )\n  )\n#> # A tibble: 7 × 3\n#>   name    gender age  \n#>   <chr>   <chr>  <chr>\n#> 1 Sheryl  F      34   \n#> 2 Kisha   F      45   \n#> 3 Brandon N      33   \n#> 4 Sharon  F      38   \n#> 5 Penny   F      58   \n#> 6 Justin  M      41   \n#> # ℹ 1 more row\n```\n:::\n\n\n如果匹配失败，你可以使用`too_few = \"debug\"`来找出问题所在，就像`separate_wider_delim()`和`separate_wider_position()`一样。\n\n### 练习\n\n1.  哪个婴儿名字中含有的元音字母最多？哪\n    个名字的元音字母比例最高？（\n    提示：分母是什么？）\n\n2.  将 `\"a/b/c/d/e\"` 中的所有正斜杠（/）替换为反斜杠（\\\\）。如\n    果 试图通过将所有反斜杠替换为正斜杠来撤销这个转换会发生什么？（\n    我们很快就会讨论这个问题。）\n\n3.  使用`str_replace_all()`实现一个简单的`str_to_lower()`版本。\n\n4.  创建一个正则表达式，用来匹配你所在国家常见的电话号码书写方式。\n\n## 模式的细节\n\n现在你已经了解了模式语言的基础知识，以及如何将其与一些`stringr`和`tidyr`函数一起使用，现在是时候深入了解更多细节了。首\n先，我们将从转义（**escaping**）开始，它允许你匹配通常会被特殊处理的元字符。接\n下来，你将学习锚点（**anchors**），它允许你匹配字符串的开始或结束。然\n后，你将更深入地了解字符类（**character classes**）和它们的快捷方式，它们允许你匹配集合中的任何字符。接\n着，你将学习量词（**quantifiers**）的最后一些细节，它们控制模式可以匹配多少次。之\n后，我们必须覆盖重要（但复杂）的主题，即运算符优先级（**operator precedence**）和括号。最\n后，我们将以模式分组（**grouping**）组件的一些细节结束。\n\n我们在这里使用的术语是每个组件的技术名称。它\n们并不总是最能体现其目的，但如果你以后想在网上搜索更多细节，知道正确的术语会很有帮助。\n\n### 转义 {#sec-regexp-escaping}\n\n为了匹配字面上的`.`，你需要一个转义符，它告诉正则表达式要从字面上匹配元字符[^regexps-6]。\n和字符串一样，正则表达式使用反斜杠进行转义。\n因此，要匹配`.`，正则表达式为`\\.`。不幸的是这会造成一个问题。\n我们使用字符串来表示正则表达式，而`\\`也在字符串中用作转义符。\n因此，要创建正则表达式`\\.`，我们需要字符串`\"\\\\.\"`，如下例所示。\n\n[^regexps-6]: 元字符的完备集为 `.^$\\|*+?{}[]()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To create the regular expression \\., we need to use \\\\.\ndot <- \"\\\\.\"\n\n# But the expression itself only contains one \\\nstr_view(dot)\n#> [1] │ \\.\n\n# And this tells R to look for an explicit .\nstr_view(c(\"abc\", \"a.c\", \"bef\"), \"a\\\\.c\")\n#> [2] │ <a.c>\n```\n:::\n\n\n在这本书中，我们通常会在没有引号的情况下编写正则表达式，比如`\\.`。如\n果我们需要强调实际输入的内容，我们会用引号将其括起来并添加额外的转义字符，比如`\"\\\\.\"`。\n\n如果`\\`在正则表达式中被用作转义字符，那么如何匹配一个实际的`\\`呢？你\n需要对它进行转义，创建正则表达式`\\\\`。为\n了创建这个正则表达式，你需要使用字符串，而字符串本身也需要对`\\`进行转义。这\n意味着要匹配一个实际的`\\`，你需要写`\"\\\\\\\\\"`——你需要四个反斜杠来匹配一个！\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"a\\\\b\"\nstr_view(x)\n#> [1] │ a\\b\nstr_view(x, \"\\\\\\\\\")\n#> [1] │ a<\\>b\n```\n:::\n\n\n或者，你可能发现使用 @sec-raw-strings 中学到的原始字符串会更加简单。这\n样可以让你避免一层的转义：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(x, r\"{\\\\}\")\n#> [1] │ a<\\>b\n```\n:::\n\n\n如果你试图匹配一个字面上的`.`、`$`、`|`、`*`、`+`、`?`、`{`、`}`、`(`或`)`，除了使用反斜杠转义之外还有一个替代方案：你可以使用字符类：`.`、`$`、`|`、...\n都匹配其字面值。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"abc\", \"a.c\", \"a*c\", \"a c\"), \"a[.]c\")\n#> [2] │ <a.c>\nstr_view(c(\"abc\", \"a.c\", \"a*c\", \"a c\"), \".[*]c\")\n#> [3] │ <a*c>\n```\n:::\n\n\n### 锚点\n\n默认情况下，正则表达式会匹配字符串的任何部分。如\n果你想在开头或结尾处进行匹配，你需要使用`^`来锚定正则表达式的开始，或者使用`$`来锚定正则表达式的结束：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"^a\")\n#> [1] │ <a>pple\n#> [2] │ <a>pricot\n#> [3] │ <a>vocado\nstr_view(fruit, \"a$\")\n#>  [4] │ banan<a>\n#> [15] │ cherimoy<a>\n#> [30] │ feijo<a>\n#> [36] │ guav<a>\n#> [56] │ papay<a>\n#> [74] │ satsum<a>\n```\n:::\n\n\n可能会让人误以为`$`应该匹配字符串的开始，因为我们常常这样写金额，但这并不是正则表达式所期望的。\n\n要强制正则表达式仅匹配整个字符串，需要用`^`和`$`同时进行锚定：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"apple\")\n#>  [1] │ <apple>\n#> [62] │ pine<apple>\nstr_view(fruit, \"^apple$\")\n#> [1] │ <apple>\n```\n:::\n\n\n你也可以使用`\\b`来匹配单词之间的边界（即单词的开始或结束）。这\n在使用 RStudio 的查找和替换工具时特别有用。例\n如，如果你想查找所有`sum()`的用法，你可以搜索`\\bsum\\b`来避免匹配到`summarize`、`summary`、`rowsum`等单词：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"summary(x)\", \"summarize(df)\", \"rowsum(x)\", \"sum(x)\")\nstr_view(x, \"sum\")\n#> [1] │ <sum>mary(x)\n#> [2] │ <sum>marize(df)\n#> [3] │ row<sum>(x)\n#> [4] │ <sum>(x)\nstr_view(x, \"\\\\bsum\\\\b\")\n#> [4] │ <sum>(x)\n```\n:::\n\n\n当单独使用时，锚点会产生一个零宽度的匹配：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(\"abc\", c(\"$\", \"^\", \"\\\\b\"))\n#> [1] │ abc<>\n#> [2] │ <>abc\n#> [3] │ <>abc<>\n```\n:::\n\n\n这有助于你理解当替换一个单独的锚点时会发生什么：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(\"abc\", c(\"$\", \"^\", \"\\\\b\"), \"--\")\n#> [1] \"abc--\"   \"--abc\"   \"--abc--\"\n```\n:::\n\n\n### 字符类\n\n字符类（或字符集）允许你匹配集合中的任何字符。如\n上所述，你可以使用`[]`来构建自己的集合，其中`[abc]`匹配 \"a\"、\"b\" 或 \"c\"，而`[^abc]`匹配除了 \"a\"、\"b\" 或 \"c\" 之外的任何字符。除\n了`^`之外，`[]`内还有两个字符具有特殊含义：\n\n-   `-` 定义了一个范围，例如，`[a-z]` 匹配任何小写字母，而 `[0-9]` 匹配任何数字。\n-   `\\` 用于转义特殊字符，因此`[\\^\\-\\]]`匹配字符`^`、`-`或`]`。\n\n这里有几个例子\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"abcd ABCD 12345 -!@#%.\"\nstr_view(x, \"[abc]+\")\n#> [1] │ <abc>d ABCD 12345 -!@#%.\nstr_view(x, \"[a-z]+\")\n#> [1] │ <abcd> ABCD 12345 -!@#%.\nstr_view(x, \"[^a-z0-9]+\")\n#> [1] │ abcd< ABCD >12345< -!@#%.>\n\n# You need an escape to match characters that are otherwise\n# special inside of []\nstr_view(\"a-b-c\", \"[a-c]\")\n#> [1] │ <a>-<b>-<c>\nstr_view(\"a-b-c\", \"[a\\\\-c]\")\n#> [1] │ <a><->b<-><c>\n```\n:::\n\n\n一些字符类由于使用得非常频繁，因此它们有自己的快捷方式。你\n已经见过`.`，它匹配除了换行符之外的任何字符。这\n里还有另外三对特别有用的快捷方式[^regexps-7]：\n\n[^regexps-7]: 记住，要创建一个包含`\\d`或`\\s`的正则表达式，你需要对字符串中的`\\`进行转义，所以你需要输入`\\\\d`或`\\\\s`。\n\n-   `\\d` 匹配任何数字；\\\n    `\\D` 匹配任何不是数字的字符；\n-   `\\s` 匹配任何空白字符（如，空格、制表符、换行符）；\\\n    `\\S` 匹配任何不是空白字符的字符；\n-   `\\w` 匹配任何“单词”字符，即字母和数字；\\\n    `\\W` 匹配任何“非单词”字符。\n\n以下代码通过选择字母、数字和标点符号字符来演示这六个快捷方式。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"abcd ABCD 12345 -!@#%.\"\nstr_view(x, \"\\\\d+\")\n#> [1] │ abcd ABCD <12345> -!@#%.\nstr_view(x, \"\\\\D+\")\n#> [1] │ <abcd ABCD >12345< -!@#%.>\nstr_view(x, \"\\\\s+\")\n#> [1] │ abcd< >ABCD< >12345< >-!@#%.\nstr_view(x, \"\\\\S+\")\n#> [1] │ <abcd> <ABCD> <12345> <-!@#%.>\nstr_view(x, \"\\\\w+\")\n#> [1] │ <abcd> <ABCD> <12345> -!@#%.\nstr_view(x, \"\\\\W+\")\n#> [1] │ abcd< >ABCD< >12345< -!@#%.>\n```\n:::\n\n\n### 量词 {#sec-quantifiers}\n\n量词（**Quantifiers**）控制模式匹配的次数。在\n@sec-reg-basics 中学习了 `?`（匹配0次或1次）、`+`（匹配1次或多次）和`*`（匹配0次或多次）。例\n如，`colou?r` 将匹配美式或英式拼写，`\\d+` 将匹配一个或多个数字，而 `\\s?` 将可选地匹配一个空白字符。你\n还可以使用 `{}` 来精确指定匹配次数：\n\n-   `{n}` 恰好匹配 n 次；\n-   `{n,}` 匹配至少 n 次；\n-   `{n,m}` 匹配 n 到 m 次。\n\n### 运算符优先级和括号\n\n`ab+` 匹配什么？是\n匹配“a”后面跟着一个或多个“b”，还是匹配“ab”重复任意次数？`^`\n`a|b$` 匹配什么？是\n匹配完整的字符串“a”或完整的字符串“b”，还是匹配以“a”开头的字符串或以“b”结尾的字符串？\n\n这些问题的答案由运算符优先级确定，类似于你在学校可能学过的 PEMDAS 或 BEDMAS 规则。你\n知道 `a + b * c` 相当于 `a + (b * c)` 而不是 `(a + b) * c`，因为 `*` 的优先级高于 `+`，先计算 `*` 再计算 `+`。\n\n类似地，正则表达式也有自己的优先级规则：量词的优先级高，而替换的优先级低，这意味着 `ab+` 相当于 `a(b+)`，而 `^a|b$`相当于`(^a)|(b$)`。就\n像代数一样，你可以使用括号来覆盖通常的顺序。但\n与代数不同，你不太可能记住正则表达式的优先级规则，所以请随意使用括号。\n\n### 分组和捕获\n\n除了覆盖运算符优先级外，括号还有另一个重要作用：创建捕获组（**capturing groups**），捕获组允许你使用匹配的子组件。\n\n使用捕获组的第一种方法是在匹配内部使用反向引用（**back reference**）引用它：`\\1` 引用第一个括号中的匹配项，`\\2` 引用第二个括号中的匹配项，依此类推。例\n如，以下模式查找具有重复字母对的所有水果：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"(..)\\\\1\")\n#>  [4] │ b<anan>a\n#> [20] │ <coco>nut\n#> [22] │ <cucu>mber\n#> [41] │ <juju>be\n#> [56] │ <papa>ya\n#> [73] │ s<alal> berry\n```\n:::\n\n\n这个正则表达式会找到所有以相同字母对开头和结尾的单词：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(words, \"^(..).*\\\\1$\")\n#> [152] │ <church>\n#> [217] │ <decide>\n#> [617] │ <photograph>\n#> [699] │ <require>\n#> [739] │ <sense>\n```\n:::\n\n\n你也可以在`str_replace()`中使用反向引用。例\n如，以下代码会交换`sentences`中第二个和第三个单词的顺序：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsentences |> \n  str_replace(\"(\\\\w+) (\\\\w+) (\\\\w+)\", \"\\\\1 \\\\3 \\\\2\") |> \n  str_view()\n#> [1] │ The canoe birch slid on the smooth planks.\n#> [2] │ Glue sheet the to the dark blue background.\n#> [3] │ It's to easy tell the depth of a well.\n#> [4] │ These a days chicken leg is a rare dish.\n#> [5] │ Rice often is served in round bowls.\n#> [6] │ The of juice lemons makes fine punch.\n#> ... and 714 more\n```\n:::\n\n\n如果想提取每个组的匹配项，可以使用`str_match()`。但\n`str_match()`返回一个矩阵，因此使用起来不是特别方便[^regexps-8]：\n\n[^regexps-8]: 主要是因为我们在本书中从未讨论过矩阵!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsentences |> \n  str_match(\"the (\\\\w+) (\\\\w+)\") |> \n  head()\n#>      [,1]                [,2]     [,3]    \n#> [1,] \"the smooth planks\" \"smooth\" \"planks\"\n#> [2,] \"the sheet to\"      \"sheet\"  \"to\"    \n#> [3,] \"the depth of\"      \"depth\"  \"of\"    \n#> [4,] NA                  NA       NA      \n#> [5,] NA                  NA       NA      \n#> [6,] NA                  NA       NA\n```\n:::\n\n\n你可以将其转换为 tibble 并给列命名：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsentences |> \n  str_match(\"the (\\\\w+) (\\\\w+)\") |> \n  as_tibble(.name_repair = \"minimal\") |> \n  set_names(\"match\", \"word1\", \"word2\")\n#> # A tibble: 720 × 3\n#>   match             word1  word2 \n#>   <chr>             <chr>  <chr> \n#> 1 the smooth planks smooth planks\n#> 2 the sheet to      sheet  to    \n#> 3 the depth of      depth  of    \n#> 4 <NA>              <NA>   <NA>  \n#> 5 <NA>              <NA>   <NA>  \n#> 6 <NA>              <NA>   <NA>  \n#> # ℹ 714 more rows\n```\n:::\n\n\n但是，你基本上已经重新创建了自己的`separate_wider_regex()`版本。实\n际上，在幕后，`separate_wider_regex()`将你的模式向量转换为一个使用分组来捕获命名组件的单一正则表达式。\n\n偶尔，你会想要使用括号而不创建匹配组。你\n可以使用`(?:)`来创建一个非捕获组。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"a gray cat\", \"a grey dog\")\nstr_match(x, \"gr(e|a)y\")\n#>      [,1]   [,2]\n#> [1,] \"gray\" \"a\" \n#> [2,] \"grey\" \"e\"\nstr_match(x, \"gr(?:e|a)y\")\n#>      [,1]  \n#> [1,] \"gray\"\n#> [2,] \"grey\"\n```\n:::\n\n\n### 练习\n\n1.  如何匹配字面字符串`\"'\\`？那么 `\"$^$\"` 呢？\n\n2.  为什么 `\"\\\"`, `\"\\\\\"`, `\"\\\\\\\"`这些模式都不匹配反斜杠`\\`？\n\n3.  给定`stringr::words`中的常用词汇库，创建正则表达式以查找所有满足以下条件的单词：\n\n    a.  以 \"y\" 开头；\n    b.  不以 \"y\" 开头；\n    c.  以 \"x\" 结尾；\n    d.  恰好三个字母长（不要通过使用`str_length()`来作弊！)\n    e.  有七个或更多字母；\n    f.  包含元音-辅音对；\n    g.  在一行中至少包含两个元音-辅音对；\n    h.  仅由重复的元音-辅音对组成。\n\n4.  创建11个正则表达式，每个表达式都匹配以下单词的英式或美式拼写：airplane/aeroplane, aluminum/aluminium, analog/analogue, ass/arse, center/centre, defense/defence, donut/doughnut, gray/grey, modeling/modelling, skeptic/sceptic, summarize/summarise。尝\n    试编写尽可能短的正则表达式！\n\n5.  交换`words`中的首尾字母，哪些字符串仍然是`words`？\n\n6.  用文字描述这些正则表达式匹配什么内容:（仔细阅读以确定每个条目是正则表达式还是定义正则表达式的字符串）\n\n    a.  `^.*$`\n    b.  `\"\\\\{.+\\\\}\"`\n    c.  `\\d{4}-\\d{2}-\\d{2}`\n    d.  `\"\\\\\\\\{4}\"`\n    e.  `\\..\\..\\..`\n    f.  `(.)\\1\\1`\n    g.  `\"(..)\\\\1\"`\n\n7.  完成位于<https://regexcrossword.com/challenges/beginner>的正则表达式初学者填字游戏。\n\n## 模式控制\n\n通过使用模式对象而不是仅使用字符串，可以对匹配的细节进行额外的控制。这\n允许你控制所谓的正则表达式标志，并匹配各种类型的固定字符串，如下所述。\n\n### Regex 标志 {#sec-flags}\n\n有一些设置可以用来控制正则表达式的细节，这些设置在其他编程语言中通常被称为标志（**flags**）。在\n`stringr` 中，你可以通过将模式封装在函数`regex()`的调用中来使用这些设置。最\n有用的标志可能是 `ignore_case = TRUE`，因为它允许字符与其大写或小写形式匹配：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbananas <- c(\"banana\", \"Banana\", \"BANANA\")\nstr_view(bananas, \"banana\")\n#> [1] │ <banana>\nstr_view(bananas, regex(\"banana\", ignore_case = TRUE))\n#> [1] │ <banana>\n#> [2] │ <Banana>\n#> [3] │ <BANANA>\n```\n:::\n\n\n如果你经常处理多行字符串（即包含`\\n`的字符串），`dotall`和`multiline`也可能是有用的：\n\n-   `dotall = TRUE` 允许`.`匹配包括`\\n`在内的所有字符：\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- \"Line 1\\nLine 2\\nLine 3\"\n    str_view(x, \".Line\")\n    str_view(x, regex(\".Line\", dotall = TRUE))\n    #> [1] │ Line 1<\n    #>     │ Line> 2<\n    #>     │ Line> 3\n    ```\n    :::\n\n\n-   `multiline = TRUE` 使得 `^` 和 `$` 分别匹配每行的开始和结束，而不是整个字符串的开始和结束：\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- \"Line 1\\nLine 2\\nLine 3\"\n    str_view(x, \"^Line\")\n    #> [1] │ <Line> 1\n    #>     │ Line 2\n    #>     │ Line 3\n    str_view(x, regex(\"^Line\", multiline = TRUE))\n    #> [1] │ <Line> 1\n    #>     │ <Line> 2\n    #>     │ <Line> 3\n    ```\n    :::\n\n\n最后，如果你正在编写一个复杂的正则表达式，并担心将来可能不理解它，你可以尝试使用`comments = TRUE`。这\n会修改模式语言以忽略空格和换行符，以及`#`之后的所有内容。这\n允许你使用注释和空格来使复杂的正则表达式更易于理解，如下例所示：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphone <- regex(\n  r\"(\n    \\(?     # optional opening parens\n    (\\d{3}) # area code\n    [)\\-]?  # optional closing parens or dash\n    \\ ?     # optional space\n    (\\d{3}) # another three numbers\n    [\\ -]?  # optional space or dash\n    (\\d{4}) # four more numbers\n  )\", \n  comments = TRUE\n)\n\nstr_extract(c(\"514-791-8141\", \"(123) 456 7890\", \"123456\"), phone)\n#> [1] \"514-791-8141\"   \"(123) 456 7890\" NA\n```\n:::\n\n\n如果你在使用注释并且想要匹配空格、换行符或 `#`，你需要使用`\\`对其进行转义。\n\n### 固定匹配（**Fixed matches**）\n\n你可以通过使用`fixed()`来选择不遵循正则表达式规则：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"\", \"a\", \".\"), fixed(\".\"))\n#> [3] │ <.>\n```\n:::\n\n\n`fixed()` 还允许你忽略大小写：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(\"x X\", \"X\")\n#> [1] │ x <X>\nstr_view(\"x X\", fixed(\"X\", ignore_case = TRUE))\n#> [1] │ <x> <X>\n```\n:::\n\n\n如果你在处理非英文文本，你可能会使用`coll()`而不是`fixed()`，因为`coll()`实现了所指定区域使用的全部大小写规则。关\n于区域的更多细节，请参见 @sec-other-languages 。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(\"i İ ı I\", fixed(\"İ\", ignore_case = TRUE))\n#> [1] │ i <İ> ı I\nstr_view(\"i İ ı I\", coll(\"İ\", ignore_case = TRUE, locale = \"tr\"))\n#> [1] │ <i> <İ> ı I\n```\n:::\n\n\n## 实践\n\n为了将这些想法付诸实践，接下来我们将解决一些半真实的问题。我\n们将讨论三种一般方法：\n\n1.  通过创建简单的正控制和负控制来检查工作\n2.  将正则表达式与布尔代数结合使用\n3.  使用字符串操作创建复杂模式\n\n### 检查你的工作\n\n首先，让我们找出所有以“The”开头的句子。仅\n使用`^`锚点是不够的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(sentences, \"^The\")\n#>  [1] │ <The> birch canoe slid on the smooth planks.\n#>  [4] │ <The>se days a chicken leg is a rare dish.\n#>  [6] │ <The> juice of lemons makes fine punch.\n#>  [7] │ <The> box was thrown beside the parked truck.\n#>  [8] │ <The> hogs were fed chopped corn and garbage.\n#> [11] │ <The> boy was there when the sun rose.\n#> ... and 271 more\n```\n:::\n\n\n因为这个模式也会匹配以 `They` 或 `These` 等单词开头的句子。为\n了需要确保 \"e\" 是单词的最后一个字母，我们可以通过添加一个单词边界来实现这一点：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(sentences, \"^The\\\\b\")\n#>  [1] │ <The> birch canoe slid on the smooth planks.\n#>  [6] │ <The> juice of lemons makes fine punch.\n#>  [7] │ <The> box was thrown beside the parked truck.\n#>  [8] │ <The> hogs were fed chopped corn and garbage.\n#> [11] │ <The> boy was there when the sun rose.\n#> [13] │ <The> source of the huge river is the clear spring.\n#> ... and 250 more\n```\n:::\n\n\n如何查找所有以代词开头的句子呢？\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(sentences, \"^She|He|It|They\\\\b\")\n#>  [3] │ <It>'s easy to tell the depth of a well.\n#> [15] │ <He>lp the woman get back to her feet.\n#> [27] │ <He>r purse was full of useless trash.\n#> [29] │ <It> snowed, rained, and hailed the same morning.\n#> [63] │ <He> ran half way to the hardware store.\n#> [90] │ <He> lay prone and hardly moved a limb.\n#> ... and 57 more\n```\n:::\n\n\n快速检查结果显示我们得到了一些错误的匹配。这\n是因为我们忘记了使用括号：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(sentences, \"^(She|He|It|They)\\\\b\")\n#>   [3] │ <It>'s easy to tell the depth of a well.\n#>  [29] │ <It> snowed, rained, and hailed the same morning.\n#>  [63] │ <He> ran half way to the hardware store.\n#>  [90] │ <He> lay prone and hardly moved a limb.\n#> [116] │ <He> ordered peach pie with ice cream.\n#> [127] │ <It> caught its hind paw in a rusty trap.\n#> ... and 51 more\n```\n:::\n\n\n你可能会想，如果这种错误没有出现在前几个匹配项中，我如何才能发现它。一\n个好的技巧是创建一些正匹配和负匹配项，并用它们来测试你的模式是否按预期工作：\n\n\n::: {.cell}\n\n```{.r .cell-code}\npos <- c(\"He is a boy\", \"She had a good time\")\nneg <- c(\"Shells come from the sea\", \"Hadley said 'It's a great day'\")\n\npattern <- \"^(She|He|It|They)\\\\b\"\nstr_detect(pos, pattern)\n#> [1] TRUE TRUE\nstr_detect(neg, pattern)\n#> [1] FALSE FALSE\n```\n:::\n\n\n通常来说，举出好的正面例子比举出负面例子要容易得多，因为你需要一段时间才能熟练地使用正则表达式来预测你的弱点在哪里。尽\n管如此，它们仍然是有用的:当你处理问题时，你可以慢慢积累错误的集合，确保自己永远不会犯同样的错误两次。\n\n### 布尔运算 {#sec-boolean-operations}\n\n想象一下，如果我们想找到只包含辅音的单词，一种方法是创建一个字符类，包含除了元音（`[^aeiou]`）之外的所有字母，然后允许这个字符类匹配任意数量的字母（`[^aeiou]+`），然后通过将其锚定到字符串的开始和结束来强制它匹配整个字符串（`^[^aeiou]+$`）：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(words, \"^[^aeiou]+$\")\n#> [123] │ <by>\n#> [249] │ <dry>\n#> [328] │ <fly>\n#> [538] │ <mrs>\n#> [895] │ <try>\n#> [952] │ <why>\n```\n:::\n\n\n但你反向思考就会使这个问题变得更简单。我\n们不是寻找只包含辅音的单词，而是寻找不包含任何元音的单词：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(words[!str_detect(words, \"[aeiou]\")])\n#> [1] │ by\n#> [2] │ dry\n#> [3] │ fly\n#> [4] │ mrs\n#> [5] │ try\n#> [6] │ why\n```\n:::\n\n\n当你处理逻辑组合时，特别是涉及“和”或“非”的逻辑组合时，这是一种有用的方法。例\n如，假设你想找到所有包含“a”和“b”的单词。正\n则表达式中没有内置的“和”运算符，所以我们必须通过查找所有包含“a”后跟“b”或“b”后跟“a”的单词来解决这个问题：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(words, \"a.*b|b.*a\")\n#>  [2] │ <ab>le\n#>  [3] │ <ab>out\n#>  [4] │ <ab>solute\n#> [62] │ <availab>le\n#> [66] │ <ba>by\n#> [67] │ <ba>ck\n#> ... and 24 more\n```\n:::\n\n\n结合两次调用`str_detect()`的结果会更简单：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords[str_detect(words, \"a\") & str_detect(words, \"b\")]\n#>  [1] \"able\"      \"about\"     \"absolute\"  \"available\" \"baby\"      \"back\"     \n#>  [7] \"bad\"       \"bag\"       \"balance\"   \"ball\"      \"bank\"      \"bar\"      \n#> [13] \"base\"      \"basis\"     \"bear\"      \"beat\"      \"beauty\"    \"because\"  \n#> [19] \"black\"     \"board\"     \"boat\"      \"break\"     \"brilliant\" \"britain\"  \n#> [25] \"debate\"    \"husband\"   \"labour\"    \"maybe\"     \"probable\"  \"table\"\n```\n:::\n\n\n如果我们想查看是否有单词包含所有元音字母怎么办？如\n果我们使用模式来做，我们需要生成 5!（\n120）种不同的模式：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords[str_detect(words, \"a.*e.*i.*o.*u\")]\n# ...\nwords[str_detect(words, \"u.*o.*i.*e.*a\")]\n```\n:::\n\n\n结合五次对`str_detect()`的调用会简单得多：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords[\n  str_detect(words, \"a\") &\n  str_detect(words, \"e\") &\n  str_detect(words, \"i\") &\n  str_detect(words, \"o\") &\n  str_detect(words, \"u\")\n]\n#> character(0)\n```\n:::\n\n\n一般来说，如果你尝试创建一个单一的正则表达式来解决你的问题却陷入了困境，不妨退一步，想想是否可以将问题分解成更小的部分，逐一解决每个挑战，然后再进行下一个。\n\n### 用代码创建模式\n\n如果我们想找到所有提到颜色的`sentences`怎么办？基\n本思路很简单：我们只需要将分隔符与单词边界结合起来。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(sentences, \"\\\\b(red|green|blue)\\\\b\")\n#>   [2] │ Glue the sheet to the dark <blue> background.\n#>  [26] │ Two <blue> fish swam in the tank.\n#>  [92] │ A wisp of cloud hung in the <blue> air.\n#> [148] │ The spot on the blotter was made by <green> ink.\n#> [160] │ The sofa cushion is <red> and of light weight.\n#> [174] │ The sky that morning was clear and bright <blue>.\n#> ... and 20 more\n```\n:::\n\n\n但是随着颜色的数量增加，手动构建这个模式会变得非常繁琐。如\n果我们能把颜色存储在一个向量里，那不是很好吗？\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrgb <- c(\"red\", \"green\", \"blue\")\n```\n:::\n\n\n我们可以！只\n需要使用`str_c()`和`str_flatten()`从向量中创建模式：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(\"\\\\b(\", str_flatten(rgb, \"|\"), \")\\\\b\")\n#> [1] \"\\\\b(red|green|blue)\\\\b\"\n```\n:::\n\n\n如果我们有一个好的颜色列表，可以使这个模式更加全面。我\n们可以从R用于绘图的内置颜色列表开始:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(colors())\n#> [1] │ white\n#> [2] │ aliceblue\n#> [3] │ antiquewhite\n#> [4] │ antiquewhite1\n#> [5] │ antiquewhite2\n#> [6] │ antiquewhite3\n#> ... and 651 more\n```\n:::\n\n\n但是让我们首先排除编号的颜色变体：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- colors()\ncols <- cols[!str_detect(cols, \"\\\\d\")]\nstr_view(cols)\n#> [1] │ white\n#> [2] │ aliceblue\n#> [3] │ antiquewhite\n#> [4] │ aquamarine\n#> [5] │ azure\n#> [6] │ beige\n#> ... and 137 more\n```\n:::\n\n\n然后我们可以将这个列表转换成一个巨大的模式。我\n们不会在这里显示这个模式，因为它非常庞大，但你可以看到它的工作效果：\n\n\n::: {.cell}\n\n```{.r .cell-code}\npattern <- str_c(\"\\\\b(\", str_flatten(cols, \"|\"), \")\\\\b\")\nstr_view(sentences, pattern)\n#>   [2] │ Glue the sheet to the dark <blue> background.\n#>  [12] │ A rod is used to catch <pink> <salmon>.\n#>  [26] │ Two <blue> fish swam in the tank.\n#>  [66] │ Cars and busses stalled in <snow> drifts.\n#>  [92] │ A wisp of cloud hung in the <blue> air.\n#> [112] │ Leaves turn <brown> and <yellow> in the fall.\n#> ... and 57 more\n```\n:::\n\n\n在这个例子中，`cols`只包含数字和字母，所以你不需要担心元字符。但\n是一般来说，每当你从现有字符串创建模式时，最好通过`str_escape()`对它们进行处理，以确保它们按字面意义进行匹配。\n\n### 练习\n\n1.  对于以下每一个挑战，尝试使用单个正则表达式和多个`str_detect()`调用的组合来解决它。F\n    or each of the following challenges, try solving it by using both a single regular expression, and a combination of multiple `str_detect()` calls.\n\n    a.  找出所有以x开头或以x结尾的`words`；\n    b.  找出所有以元音字母开头并以辅音字母结尾的`words`；\n    c.  是否存在包含至少每一种元音字母的`words` ？\n\n2.  构建模式来找到支持或反对“i在e前面，除非在c后面”这一规则的证据。\n\n3.  `colors()`包含了一些像“lightgray”和“darkblue”这样的修饰符。如\n    何自动识别这些修饰符？（\n    考虑如何检测和移除被修饰的颜色）。\n\n4.  创建一个正则表达式来查找任何基础R数据集。你\n    可以通过`data()`的特殊用法来获取这些数据集的列表：`data(package = \"datasets\")$results[, \"Item\"]`。请\n    注意，一些旧的数据集是单独的向量，这些向量在括号中包含“数据框”的名称，因此你需要去掉这些括号。\n\n## 其他地方的正则表达式\n\n就像在`stringr`和`tidyr`函数中一样，R中还有许多其他地方可以使用正则表达式。下\n面将描述在tidyverse生态系统和基础R中其他一些有用的函数。\n\n### tidyverse\n\n还有三个特别有用的地方可能需要使用正则表达式：\n\n-   `matches(pattern)` 函数会选择所有名称与给定模式匹配的变量。它\n    是一个“tidyselect”函数，你可以在tidyverse生态系统中任何选择变量的函数（例如`select()`,`rename_with()`和`across()`）中使用它。\n\n-   `pivot_longer()'s` 函数的`names_pattern`参数接受一个正则表达式向量，与`separate_wider_regex()`类似，在从具有复杂结构的变量名称中提取数据时非常有用。\n\n-   `separate_longer_delim()`和`separate_wider_delim()`函数中的`delim`参数通常用于匹配一个固定的字符串，但你可以使用`regex()`来使其匹配一个模式。这\n    在你想匹配一个逗号（后面可能跟着一个空格）时非常有用，例如`regex(\", ?\")`。\n\n### 基础R\n\n`apropos(pattern)` 会搜索全局环境中所有与给定模式匹配的对象。如\n果你不太记得某个函数的名称，这是很有用的。\n\n\n::: {.cell}\n\n```{.r .cell-code}\napropos(\"replace\")\n#> [1] \"%+replace%\"       \"replace\"          \"replace_na\"      \n#> [4] \"setReplaceMethod\" \"str_replace\"      \"str_replace_all\" \n#> [7] \"str_replace_na\"   \"theme_replace\"\n```\n:::\n\n\n`list.files(path, pattern)`会列出`path`中所有匹配正则表达式`pattern`的文件。例\n如，你可以用它来查找当前目录下的所有 R Markdown 文件，命令如下：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(list.files(pattern = \"\\\\.Rmd$\"))\n#> character(0)\n```\n:::\n\n\n值得注意的是，基础R使用的模式语言与`stringr`使用的略有不同。这\n是因为`stringr`是建立在[stringi](https://stringi.gagolewski.com)包之上的，而`stringi`包又是建立在[ICU](https://unicode-org.github.io/icu/userguide/strings/regexp.html)引擎之上的，而基础R函数则使用[TRE](https://github.com/laurikari/tre)引擎或[PCRE](https://www.pcre.org)引擎，这取决于你是否设置了`perl = TRUE`。幸\n运的是，正则表达式的基础知识已经非常完善，因此你在使用本书中将要学习的模式时，很少会遇到变化。只\n有当你开始依赖高级特性，如复杂的Unicode字符范围或使用`(?…)`语法的特殊特性时才需要意识到这种差异。\n\n## 小结\n\n由于每个标点符号都可能被赋予多重含义，正则表达式是现存最紧凑的语言之一。它\n们一开始确实会让人感到困惑，但当你训练自己的眼睛去阅读它们，大脑去理解它们时，你就掌握了一项强大的技能，你可以在R和其他许多地方使用这项技能。\n\n在本章中，通过学习最有用的`stringr`函数和正则表达式语言的最重要组件，开始了成为正则表达式大师的旅程。而\n且还有很多资源可以进一步学习。\n\n一个不错的出发点是`vignette(\"regular-expressions\", package = \"stringr\")`，它记录了`stringr`支持的全部语法；另外可以从[https://www.regular-expressions.info/](https://www.regular-expressions.info/%E3%80%82)获取有用的参考信息。这\n个网站不是针对R的，但可以用它来学习正则表达式的最先进特性和工作原理。\n\n另外需要知道的是，`stringr`是由Marek Gagolewski在`stringi`的基础上实现的，如果在`stringr`中找不到你需要的函数，不要担心查阅`stringi`。你\n会发现`stringi`非常容易上手，因为它遵循了`stringr`的许多相同约定。\n\n在下一章中，我们将讨论与字符串密切相关的数据结构：因子（factors）。因\n子用于在R中表示分类数据，即具有固定和已知可能值集的数据，这些可能值由字符串向量标识。\n",
    "supporting": [
      "regexps_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}