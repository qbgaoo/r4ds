{
  "hash": "193e4d96e4023924d3da6c9e9916687d",
  "result": {
    "engine": "knitr",
    "markdown": "# 数据导入 {#sec-data-import}\n\n\n::: {.cell}\n\n:::\n\n\n## 引言\n\n使用R包提供的数据来学习数据科学工具是一个很好的方法，但总有一天你会想将所学应用于自己的数据。在\n本章中，你将学习将数据文件读入R的基础知识。\n\n具体来说，本章将重点关注读取纯文本矩形文件。我\n们将从处理列名、类型和缺失数据的实用建议开始。然\n后，学习如何一次从多个文件中读取数据，以及如何将R中的数据写入文件。最\n后，学习如何在R中手动创建数据框。\n\n### 必要条件\n\n在本章中，你将学习如何使用**readr**包在R中加载平面文件，readr包是核心包tidyverse的一部分。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## 从文件读取数据\n\n首先，我们将关注最常见的矩形数据文件类型：CSV（Comma-Separated Values的缩写）。下\n面是一个简单的CSV文件，第一行通常被称为标题行，给出了列名，接下来的六行提供了数据，列之间由逗号分隔，也称为定界符。\n\n\n::: {.cell}\n\n```\nStudent ID,Full Name,favourite.food,mealPlan,AGE\n1,Sunil Huffmann,Strawberry yoghurt,Lunch only,4\n2,Barclay Lynn,French fries,Lunch only,5\n3,Jayendra Lyne,N/A,Breakfast and lunch,7\n4,Leon Rossini,Anchovies,Lunch only,\n5,Chidiegwu Dunkel,Pizza,Breakfast and lunch,five\n6,Güvenç Attila,Ice cream,Lunch only,6\n```\n:::\n\n\n@tbl-students-table 以表格形式呈现了相同的数据。\n\n\n::: {#tbl-students-table .cell tbl-cap='Data from the students.csv file as a table.'}\n::: {.cell-output-display}\n\n\n| Student ID|Full Name        |favourite.food     |mealPlan            |AGE  |\n|----------:|:----------------|:------------------|:-------------------|:----|\n|          1|Sunil Huffmann   |Strawberry yoghurt |Lunch only          |4    |\n|          2|Barclay Lynn     |French fries       |Lunch only          |5    |\n|          3|Jayendra Lyne    |N/A                |Breakfast and lunch |7    |\n|          4|Leon Rossini     |Anchovies          |Lunch only          |NA   |\n|          5|Chidiegwu Dunkel |Pizza              |Breakfast and lunch |five |\n|          6|Güvenç Attila    |Ice cream          |Lunch only          |6    |\n\n\n:::\n:::\n\n\n我们使用`read_csv()`将这个文件读入R。第\n一个参数是最重要的：文件路径。可\n以将路径视为文件的地址，文件名为`students.csv`，它位于`data`文件夹中。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- read_csv(\"data/students.csv\")\n#> Rows: 6 Columns: 5\n#> ── Column specification ─────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (4): Full Name, favourite.food, mealPlan, AGE\n#> dbl (1): Student ID\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n\n上面的代码在你的项目中存在名为 `data` 的文件夹并且其中包含 `students.csv` 文件时有效。您\n可以从<https://pos.it/r4ds-students-csv>下载 `students.csv` 文件，或者可以直接从该URL读取它，使用如下方式：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- read_csv(\"https://pos.it/r4ds-students-csv\")\n```\n:::\n\n\n当你运行`read_csv()`时，它会输出一条消息，告诉你数据的行数和列数、所使用的分隔符以及列规范（按列中数据类型组织的列名）。它\n还会输出关于如何检索完整列规范和如何静默此消息的一些信息。这\n条消息是`readr`包的一个组成部分，我们将在\\@sec-col-types 中再次讨论它。\n\n### 实用建议\n\n一旦你读取了数据，第一步通常是以某种方式转换它，以使其在剩余的分析中更容易处理。让\n我们带着这个想法再次查看`students`数据。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents\n#> # A tibble: 6 × 5\n#>   `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n#>          <dbl> <chr>            <chr>              <chr>               <chr>\n#> 1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n#> 2            2 Barclay Lynn     French fries       Lunch only          5    \n#> 3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n#> 4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n#> 5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n#> 6            6 Güvenç Attila    Ice cream          Lunch only          6\n```\n:::\n\n\n在`favourite.food`列中有一堆食品项目，然后是字符串`N/A`，它应该是一个 R 会识别为“不可用”的真正的`NA`值。这\n是我们可以通过`na`参数来解决的问题。默\n认情况下，`read_csv()`只将此数据集中的空字符串(`\"\"`) 识别为 `NA`s，我们希望它也能识别字符串`\"N/A\"`。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- read_csv(\"data/students.csv\", na = c(\"N/A\", \"\"))\n\nstudents\n#> # A tibble: 6 × 5\n#>   `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n#>          <dbl> <chr>            <chr>              <chr>               <chr>\n#> 1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n#> 2            2 Barclay Lynn     French fries       Lunch only          5    \n#> 3            3 Jayendra Lyne    <NA>               Breakfast and lunch 7    \n#> 4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n#> 5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n#> 6            6 Güvenç Attila    Ice cream          Lunch only          6\n```\n:::\n\n\n你可能还注意到，`Student ID`和`Full Name`列使用了反引号。这\n是因为它们包含空格，违反了 R 中变量名的常规规则，它们是非语法（**non-syntactic**）名称。要\n引用这些变量，你需要使用反引号`` ` ``将它们括起来。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents |> \n  rename(\n    student_id = `Student ID`,\n    full_name = `Full Name`\n  )\n#> # A tibble: 6 × 5\n#>   student_id full_name        favourite.food     mealPlan            AGE  \n#>        <dbl> <chr>            <chr>              <chr>               <chr>\n#> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n#> 2          2 Barclay Lynn     French fries       Lunch only          5    \n#> 3          3 Jayendra Lyne    <NA>               Breakfast and lunch 7    \n#> 4          4 Leon Rossini     Anchovies          Lunch only          <NA> \n#> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n#> 6          6 Güvenç Attila    Ice cream          Lunch only          6\n```\n:::\n\n\n另一种方法是使用 `janitor::clean_names()` 函数，该函数使用一些启发式方法来一次性将它们全部转换为蛇形命名法（snake case）[^data-import-1]。\n\n[^data-import-1]: [janitor](http://sfirke.github.io/janitor/)包不是tidyverse的一部分，但它提供了方便的数据清理功能，并且在使用`|>`的数据管道中工作得很好。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents |> janitor::clean_names()\n#> # A tibble: 6 × 5\n#>   student_id full_name        favourite_food     meal_plan           age  \n#>        <dbl> <chr>            <chr>              <chr>               <chr>\n#> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n#> 2          2 Barclay Lynn     French fries       Lunch only          5    \n#> 3          3 Jayendra Lyne    <NA>               Breakfast and lunch 7    \n#> 4          4 Leon Rossini     Anchovies          Lunch only          <NA> \n#> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n#> 6          6 Güvenç Attila    Ice cream          Lunch only          6\n```\n:::\n\n\n读取数据后的另一个常见任务是考虑变量类型。例\n如，`meal_plan`是一个分类变量，具有一组已知的可能值，在 R 中应该表示为因子：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents |>\n  janitor::clean_names() |>\n  mutate(meal_plan = factor(meal_plan))\n#> # A tibble: 6 × 5\n#>   student_id full_name        favourite_food     meal_plan           age  \n#>        <dbl> <chr>            <chr>              <fct>               <chr>\n#> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n#> 2          2 Barclay Lynn     French fries       Lunch only          5    \n#> 3          3 Jayendra Lyne    <NA>               Breakfast and lunch 7    \n#> 4          4 Leon Rossini     Anchovies          Lunch only          <NA> \n#> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n#> 6          6 Güvenç Attila    Ice cream          Lunch only          6\n```\n:::\n\n\n请注意，`meal_plan`变量中的值保持不变，但变量名下方表示的变量类型已经从字符型（`<chr`\\>）变为了因子型（\\<`fct`\\>）。你\n将在 @sec-factors 中了解更多关于因子的内容。\n\n在分析这些数据之前，你可能想要修复`age`和`id`列。目\n前，`age`是一个字符型变量，因为其中一个观测值被输入为文本`five`而不是数字`5`。我\n们将在 @sec-import-spreadsheets 详细讨论如何修复这个问题。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- students |>\n  janitor::clean_names() |>\n  mutate(\n    meal_plan = factor(meal_plan),\n    age = parse_number(if_else(age == \"five\", \"5\", age))\n  )\n\nstudents\n#> # A tibble: 6 × 5\n#>   student_id full_name        favourite_food     meal_plan             age\n#>        <dbl> <chr>            <chr>              <fct>               <dbl>\n#> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n#> 2          2 Barclay Lynn     French fries       Lunch only              5\n#> 3          3 Jayendra Lyne    <NA>               Breakfast and lunch     7\n#> 4          4 Leon Rossini     Anchovies          Lunch only             NA\n#> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n#> 6          6 Güvenç Attila    Ice cream          Lunch only              6\n```\n:::\n\n\n这里有一个新的函数`if_else()`，它有三个参数。第\n一个参数`test`应该是一个逻辑向量。当\n`test`为`TRUE`时，结果将包含第二个参数`yes`的值；当它为`FALSE`时，将包含第三个参数`no`的值。在\n这里，我们表示如果`age`是字符串 `\"five\"`，则将其变为 `\"5\"`，如果不是，则保持原样。你\n将在 @sec-logicals 部分了解更多关于`if_else()`和逻辑向量的内容。\n\n### 其他参数\n\n这里还有一些其他重要的参数我们需要提及。如\n果先向你们展示一个有用的技巧，这些参数的演示就会更容易理解：`read_csv()`可以读取你创建并格式化为 CSV 文件格式的文本字符串。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\n  \"a,b,c\n  1,2,3\n  4,5,6\"\n)\n#> # A tibble: 2 × 3\n#>       a     b     c\n#>   <dbl> <dbl> <dbl>\n#> 1     1     2     3\n#> 2     4     5     6\n```\n:::\n\n\n通常，`read_csv()`使用数据的第一行作为列名，这是一个非常常见的约定。但\n是，在文件的顶部包含几行元数据的情况也不少见。你\n可以使用`skip = n`来跳过前 n 行，或者使用`comment = \"#\"`来忽略所有以（例如）# 开头的行：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\n  \"The first line of metadata\n  The second line of metadata\n  x,y,z\n  1,2,3\",\n  skip = 2\n)\n#> # A tibble: 1 × 3\n#>       x     y     z\n#>   <dbl> <dbl> <dbl>\n#> 1     1     2     3\n\nread_csv(\n  \"# A comment I want to skip\n  x,y,z\n  1,2,3\",\n  comment = \"#\"\n)\n#> # A tibble: 1 × 3\n#>       x     y     z\n#>   <dbl> <dbl> <dbl>\n#> 1     1     2     3\n```\n:::\n\n\n在其他情况下，数据可能没有列名。你\n可以使用`col_names = FALSE`来告诉 `read_csv()`不要将第一行作为标题，而是从`X1`到`Xn`顺序地给它们标记列名：\n\nIn other cases, the data might not have column names.\nYou can use `col_names = FALSE` to tell `read_csv()` not to treat the first row as headings and instead label them sequentially from `X1` to `Xn`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\n  \"1,2,3\n  4,5,6\",\n  col_names = FALSE\n)\n#> # A tibble: 2 × 3\n#>      X1    X2    X3\n#>   <dbl> <dbl> <dbl>\n#> 1     1     2     3\n#> 2     4     5     6\n```\n:::\n\n\n另外，你可以向`col_names`传递一个字符向量，这个字符向量将被用作列名：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\n  \"1,2,3\n  4,5,6\",\n  col_names = c(\"x\", \"y\", \"z\")\n)\n#> # A tibble: 2 × 3\n#>       x     y     z\n#>   <dbl> <dbl> <dbl>\n#> 1     1     2     3\n#> 2     4     5     6\n```\n:::\n\n\n这些参数是你需要知道的，以便读取你在实践中遇到的大多数 CSV 文件。（\n对于其他情况，你需要仔细检查你的 `.csv` 文件，并阅读`read_csv()`的许多其他参数的文档。）\n\n### 其他文件类型\n\n一旦你掌握了`read_csv()`，使用`readr`的其他函数就很简单了；你只需要知道应该使用哪个函数：\n\n-   `read_csv2()` 用于读取分号分隔的文件。这\n    些文件使用`;`而不是`,`来分隔字段，这在使用`,`作为小数点标记符的国家中很常见；\n\n-   `read_tsv()` 用于读取制表符分隔（tab-delimited）的文件；\n\n-   `read_delim()` 用于读取具有任何分隔符的文件，如果你没有指定分隔符，它会尝试自动猜测分隔符；\n\n-   `read_fwf()` 用于读取固定宽度的文件。你\n    可以使用`fwf_widths()`通过宽度指定字段，或者使用`fwf_positions()`通过位置指定字段；\n\n-   `read_table()` 用于读取固定宽度文件的常见变体，其中列由空白字符分隔；\n\n-   `read_log()` 用于读取 Apache 风格的日志文件。\n\n### 练习\n\n1.  如果你想要读取一个字段之间使用 \"\\|\" 分隔的文件，你会使用什么函数？\n\n2.  除了`file`、`skip`和`comment`之外，`read_csv()`和`read_tsv()`还有哪些共同的参数？\n\n3.  `read_fwf()`的最重要参数是什么？\n\n4.  有时 CSV 文件中的字符串包含逗号。为\n    了防止它们引起问题，这些字符串需要用引号字符（如 `\"` 或 `'`）括起来。默\n    认情况下，`read_csv()`假设引号字符为 `\"`。为了将以下文本读取到数据框中，你需要为`read_csv()`指定哪个参数？\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    \"x,y\\n1,'a,b'\"\n    ```\n    :::\n\n\n5.  识别以下内联CSV文件中的每个错误是什么。当\n    你运行代码时会发生什么？\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(\"a,b\\n1,2,3\\n4,5,6\")\n    read_csv(\"a,b,c\\n1,2\\n1,2,3,4\")\n    read_csv(\"a,b\\n\\\"1\")\n    read_csv(\"a,b\\n1,2\\na,b\")\n    read_csv(\"a;b\\n1;3\")\n    ```\n    :::\n\n\n6.  通过以下方式练习在数据框中引用非语法名称：\n\n    a.  提取名为`1`的变量；\n    b.  绘制 `1` 与 `2`的散点图；\n    c.  创建一个名为`3`的新列，该列是`2`除以`1`的结果；\n    d.  将列名重命名为 `one`, `two`和 `three`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    annoying <- tibble(\n      `1` = 1:10,\n      `2` = `1` * 2 + rnorm(length(`1`))\n    )\n    ```\n    :::\n\n\n## 控制列类型 {#sec-col-types}\n\nCSV 文件不包含关于每个变量类型（即它是否是逻辑型、数字型、字符串型等）的任何信息，因此readr 会尝试猜测类型。本\n节将描述猜测过程的工作原理，如何解决一些常见的导致猜测失败的问题，以及（如果需要的话）如何自己提供列类型。最\n后，我们将提及一些在readr 遭遇严重失败且你需要更深入地了解文件结构时非常有用的通用策略。\n\n### 猜测类型\n\nreadr 使用一种启发式方法来确定列的类型。对\n于每一列，它会从第一行到最后一行均匀地抽取 1,000[^data-import-2] 行的值，并忽略缺失值。\n然后，它会通过以下问题进行判断：\n\n[^data-import-2]: 你可以使用`guess_max`参数覆盖1000的默认值。\n\n-   它是否只包含 `F`、`T`、`FALSE` 或 `TRUE`（忽略大小写）？如果是，则它是逻辑型；\n-   它是否只包含数字（如`1`、`-4.5`、`5e6`、`Inf`）？如果是，则它是数字型；\n-   它是否符合 ISO8601 标准？如果是，则它是日期或日期-时间型。（我们将在\\@sec-creating-datetimes 更详细地讨论日期-时间型）；\n-   否则，它一定是字符串型。\n\n你可以通过以下简单示例看到这个行为：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"\n  logical,numeric,date,string\n  TRUE,1,2021-01-15,abc\n  false,4.5,2021-02-15,def\n  T,Inf,2021-02-16,ghi\n\")\n#> # A tibble: 3 × 4\n#>   logical numeric date       string\n#>   <lgl>     <dbl> <date>     <chr> \n#> 1 TRUE        1   2021-01-15 abc   \n#> 2 FALSE       4.5 2021-02-15 def   \n#> 3 TRUE      Inf   2021-02-16 ghi\n```\n:::\n\n\n如果你有一个干净的数据集，这种启发式方法很有效，但在现实生活中，你会遇到各种奇怪而美丽的失败。\n\n### 缺失值、列类型和问题\n\n列检测失败最常见的方式是某列包含了意外值，结果你得到了一个字符型列而不是更具体的类型。这\n种情况最常见的原因之一是缺失值，这些缺失值不是使用readr 所期望的`NA`来记录的。\n\n以下面这个简单的只有一列的 CSV 文件为例：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimple_csv <- \"\n  x\n  10\n  .\n  20\n  30\"\n```\n:::\n\n\n如果我们在没有任何附加参数的情况下读取它，`x`将变成一个字符列：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(simple_csv)\n#> # A tibble: 4 × 1\n#>   x    \n#>   <chr>\n#> 1 10   \n#> 2 .    \n#> 3 20   \n#> 4 30\n```\n:::\n\n\n在这个很小的例子中，你可以很容易地看到缺失值`.`。但\n是，如果你的文件中有数千行，并且只有少数几个缺失值，并且这些缺失值分散在文件中，那么会发生什么呢？一\n种方法是告诉readr `x` 是一列数字型数据，然后查看它在哪里失败。你\n可以使用`col_types`参数来实现这一点，该参数接受一个命名列表，其中列表的名称与 CSV 文件中的列名相匹配：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\n  simple_csv, \n  col_types = list(x = col_double())\n)\n#> Warning: One or more parsing issues, call `problems()` on your data frame for\n#> details, e.g.:\n#>   dat <- vroom(...)\n#>   problems(dat)\n```\n:::\n\n\n现在`read_csv()`报告存在问题，并告诉我们可以通过`problems()`找到更多信息:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproblems(df)\n#> # A tibble: 1 × 5\n#>     row   col expected actual file                                           \n#>   <int> <int> <chr>    <chr>  <chr>                                          \n#> 1     3     1 a double .      /private/var/folders/2m/th7w53zx2fx6gl3g1jcj4l…\n```\n:::\n\n\n这告诉我们，在第 3 行、第 1 列出现了问题， readr 期待一个双精度浮点数，但是得到了一个`.`。这\n表明这个数据集使用`.`来表示缺失值。因\n此，我们设置`na = \".\"`，自动猜测成功，得到了我们想要的数字列：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(simple_csv, na = \".\")\n#> # A tibble: 4 × 1\n#>       x\n#>   <dbl>\n#> 1    10\n#> 2    NA\n#> 3    20\n#> 4    30\n```\n:::\n\n\n### 列类型\n\nreadr总共提供了九种列类型供您使用:\n\n-   `col_logical()`和`col_double()`分别用于读取逻辑值和实数。由于readr 通常会自动为你猜测这些类型，因此它们相对不常用（除了上述情况）；\n-   `col_integer()` 用于读取整数。在本书中，我们很少区分整数和双精度浮点数，因为它们在功能上是等价的，但明确读取整数有时是有用的，因为它们占用的内存只有双精度浮点数的一半；\n-   `col_character()` 用于读取字符串。当某列是数字标识符时，明确指定它可以很有用，例如，用于标识对象的长数字序列，但对这些数字应用数学运算没有意义。示例包括电话号码、社会保障号码、信用卡号码等；\n-   `col_factor()`, `col_date()`和`col_datetime()` 分别用于创建因子、日期和日期-时间；当我们在\\@sec-factors 和 @sec-dates-and-times 学习这些数据类型时，你会了解更多相关信息；\n-   `col_number()` 是一个宽容的数字解析器，它将忽略非数字部分，特别适用于货币。在\\@sec-numbers 你将了解更多相关信息；\n-   `col_skip()` 用于跳过某列，使其不包含在结果中；这在处理大型 CSV 文件且只想使用其中的某些列时有用，可以加快数据读取速度。\n\n此外，也可以通过将`list()`切换到`cols()`并指定`.default`来覆盖默认列。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanother_csv <- \"\nx,y,z\n1,2,3\"\n\nread_csv(\n  another_csv, \n  col_types = cols(.default = col_character())\n)\n#> # A tibble: 1 × 3\n#>   x     y     z    \n#>   <chr> <chr> <chr>\n#> 1 1     2     3\n```\n:::\n\n\nAnother useful helper is `cols_only()` which will read in only the columns you specify:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\n  another_csv,\n  col_types = cols_only(x = col_character())\n)\n#> # A tibble: 1 × 1\n#>   x    \n#>   <chr>\n#> 1 1\n```\n:::\n\n\n## 从多个文件读取数据 {#sec-readr-directory}\n\n有时，你的数据分散在多个文件中，而不是只包含在一个文件中。例\n如，你可能有多个月份的销售数据，每个月的数据都保存在一个单独的文件中：1月的销售数据在`01-sales.csv`中，2月的在`02-sales.csv`中，3月的在`03-sales.csv`中。使\n用`read_csv()`函数可以一次性读取这些数据，并将它们堆叠在一个数据框中。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_files <- c(\"data/01-sales.csv\", \"data/02-sales.csv\", \"data/03-sales.csv\")\nread_csv(sales_files, id = \"file\")\n#> # A tibble: 19 × 6\n#>   file              month    year brand  item     n\n#>   <chr>             <chr>   <dbl> <dbl> <dbl> <dbl>\n#> 1 data/01-sales.csv January  2019     1  1234     3\n#> 2 data/01-sales.csv January  2019     1  8721     9\n#> 3 data/01-sales.csv January  2019     1  1822     2\n#> 4 data/01-sales.csv January  2019     2  3333     1\n#> 5 data/01-sales.csv January  2019     2  2156     9\n#> 6 data/01-sales.csv January  2019     2  3987     6\n#> # ℹ 13 more rows\n```\n:::\n\n\n同样，如果在项目的`data`文件夹中有CSV文件，上述代码就可以工作。你\n可以从<https://pos.it/r4ds-01-sales>, <https://pos.it/r4ds-02-sales>和<https://pos.it/r4ds-03-sales>下载这些文件，或者你可以直接读取它们:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_files <- c(\n  \"https://pos.it/r4ds-01-sales\",\n  \"https://pos.it/r4ds-02-sales\",\n  \"https://pos.it/r4ds-03-sales\"\n)\nread_csv(sales_files, id = \"file\")\n```\n:::\n\n\n`id`参数会在结果数据框中添加一个名为`file`的新列，用于标识数据来自哪个文件。这\n在读取的文件没有包含可以帮助你追踪观测回到其原始来源的标识列时特别有用。\n\n如果你有很多文件想要读取，一个个写出它们的名称可能会很麻烦。相\n反，你可以使用基础函数`list.files()`来通过匹配文件名中的模式找到这些文件。你\n将在\\@sec-regular-expressions 部分学习更多关于这些模式的知识。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_files <- list.files(\"data\", pattern = \"sales\\\\.csv$\", full.names = TRUE)\nsales_files\n#> [1] \"data/01-sales.csv\" \"data/02-sales.csv\" \"data/03-sales.csv\"\n```\n:::\n\n\n## 写入文件 {#sec-writing-to-a-file}\n\nreadr 还提供了两个有用的函数，用于将数据写回磁盘：`write_csv()`和`write_tsv()`。这\n些函数最重要的参数是`x`(要保存的数据框)和`file`(要保存的位置)。你\n还可以指定如何使用`na`来写入缺失值以及是否希望将其附加到现有文件中。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(students, \"students.csv\")\n```\n:::\n\n\n现在让我们读入csv文件。请\n注意，当你保存到CSV时，刚刚设置的变量类型信息会丢失，因为你重新开始从纯文本文件读取:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents\n#> # A tibble: 6 × 5\n#>   student_id full_name        favourite_food     meal_plan             age\n#>        <dbl> <chr>            <chr>              <fct>               <dbl>\n#> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n#> 2          2 Barclay Lynn     French fries       Lunch only              5\n#> 3          3 Jayendra Lyne    <NA>               Breakfast and lunch     7\n#> 4          4 Leon Rossini     Anchovies          Lunch only             NA\n#> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n#> 6          6 Güvenç Attila    Ice cream          Lunch only              6\nwrite_csv(students, \"students-2.csv\")\nread_csv(\"students-2.csv\")\n#> # A tibble: 6 × 5\n#>   student_id full_name        favourite_food     meal_plan             age\n#>        <dbl> <chr>            <chr>              <chr>               <dbl>\n#> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n#> 2          2 Barclay Lynn     French fries       Lunch only              5\n#> 3          3 Jayendra Lyne    <NA>               Breakfast and lunch     7\n#> 4          4 Leon Rossini     Anchovies          Lunch only             NA\n#> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n#> 6          6 Güvenç Attila    Ice cream          Lunch only              6\n```\n:::\n\n\n这使得CSV在缓存中间结果时有些不可靠，每次加载时都需要重新创建列规范。主\n要有两种替代方案：\n\n1.  `write_rds()` 和 `read_rds()` 是围绕基础函数`readRDS()`和`saveRDS()`的统一包装器。这\n    些函数将数据存储在R的自定义二进制格式RDS中。这\n    意味着当你重新加载对象时，你加载的是与存储时完全相同的R对象。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    write_rds(students, \"students.rds\")\n    read_rds(\"students.rds\")\n    #> # A tibble: 6 × 5\n    #>   student_id full_name        favourite_food     meal_plan             age\n    #>        <dbl> <chr>            <chr>              <fct>               <dbl>\n    #> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n    #> 2          2 Barclay Lynn     French fries       Lunch only              5\n    #> 3          3 Jayendra Lyne    <NA>               Breakfast and lunch     7\n    #> 4          4 Leon Rossini     Anchovies          Lunch only             NA\n    #> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n    #> 6          6 Güvenç Attila    Ice cream          Lunch only              6\n    ```\n    :::\n\n\n2.  `arrow`包允许你读取和写入 parquet 文件，这是一种可以快速跨编程语言共享的二进制文件格式。我\n    们将在 @sec-arrow 中更深入地探讨`arrow`。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(arrow)\n    write_parquet(students, \"students.parquet\")\n    read_parquet(\"students.parquet\")\n    #> # A tibble: 6 × 5\n    #>   student_id full_name        favourite_food     meal_plan             age\n    #>        <dbl> <chr>            <chr>              <fct>               <dbl>\n    #> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n    #> 2          2 Barclay Lynn     French fries       Lunch only              5\n    #> 3          3 Jayendra Lyne    NA                 Breakfast and lunch     7\n    #> 4          4 Leon Rossini     Anchovies          Lunch only             NA\n    #> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5\n    #> 6          6 Güvenç Attila    Ice cream          Lunch only              6\n    ```\n    :::\n\n\nParquet往往比RDS快得多，并且可以在R之外使用，但确实需要`arrow`包。\n\n\n\n\n\n## 数据录入\n\n有时，你需要在R脚本中手动组装一个tibble（数据框），进行一些数据录入。有\n两个有用的函数可以帮助你完成这项工作，这两个函数的不同之处在于它们是通过列还是通过行来布局tibble的。`t`\n`ibble()`函数是按列工作的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  x = c(1, 2, 5), \n  y = c(\"h\", \"m\", \"g\"),\n  z = c(0.08, 0.83, 0.60)\n)\n#> # A tibble: 3 × 3\n#>       x y         z\n#>   <dbl> <chr> <dbl>\n#> 1     1 h      0.08\n#> 2     2 m      0.83\n#> 3     5 g      0.6\n```\n:::\n\n\n按列布局数据可能会难以看到行之间的关系，因此另一种方法是`tribble()`（**tr**ansposed t**ibble**的缩写），它允许你逐行布局数据。`t`\n`ribble()`是为代码中的数据输入定制的：列标题以`~`开头，条目之间用逗号分隔。这\n使得以易于阅读的形式布局少量数据成为可能：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntribble(\n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n#> # A tibble: 3 × 3\n#>       x y         z\n#>   <dbl> <chr> <dbl>\n#> 1     1 h      0.08\n#> 2     2 m      0.83\n#> 3     5 g      0.6\n```\n:::\n\n\n## 小结\n\n在本章中，你学习了如何使用`read_csv()`加载CSV文件，以及如何使用`tibble()`和`tribble()`进行自己的数据输入。你\n了解了CSV文件的工作原理，可能会遇到的一些问题，以及如何解决这些问题。在\n本书中，我们将多次涉及数据导入：从Excel和Google表格中导入数据的 @sec-import-spreadsheets ，@sec-import-databases 将向你展示如何从数据库中加载数据，@sec-arrow 将介绍如何从Parquet文件中加载数据，@sec-rectangling 将涉及从JSON中导入数据，以及\\@sec-scraping 将介绍如何从网站上抓取数据。\n\n本书的这个部分即将结束，但还有一个重要的主题需要讨论：如何获取帮助。因\n此，在下一章中，你将学习一些寻求帮助的好地方，如何创建一个可重现的示例（reprex）以最大化获得良好帮助的机会，以及一些关于跟上R世界步伐的一般性建议。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}