{
  "hash": "e6a99acaa7aad296111eaa27b71f8388",
  "result": {
    "engine": "knitr",
    "markdown": "# 连接 {#sec-joins}\n\n\n::: {.cell}\n\n:::\n\n\n## 引言\n\n在数据分析中，很少只涉及单个数据框。通\n常你会有多个数据框，并且需要将它们**连接**在一起来回答你感兴趣的问题。本\n章将向你介绍两种重要的连接类型：\n\n-   变异连接（Mutating joins），通过匹配另一个数据框中的观测值向一个数据框添加新变量；\n-   筛选连接（Filtering joins），根据一个数据框中的观测值是否与另一个数据框中的观测值匹配来筛选观测值。\n\n我们将首先讨论键 (keys)，即用于在连接中连接一对数据框的变量。我\n们将通过检查`nycflights13`包中数据集的键来巩固这一理论，然后利用这些知识开始连接数据框。接\n下来我们将讨论连接的工作原理，重点关注它们对行的操作。最\n后，我们将讨论非等值连接（non-equi joins），这是一种比默认的等值关系更灵活的键匹配方式连接家族。\n\n### 必要条件\n\n在本章中，我们将使用来自dplyr的join函数来探索来自`nycflights13`的五个相关数据集。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n## 键（Keys）\n\n要理解连接（join）操作，首先需要理解如何通过每个表中的一对键来连接两个表。在\n本节中，你将学习两种类型的键，并在nycflights13包的数据集中看到这两种键的示例。你\n还将学习如何检查你的键是否有效，以及如果表中缺少键该如何处理。\n\n### 主键和外键\n\n每次连接操作都涉及一对键：主键 (primary key) 和外键 (foreign key) 。**主**\n**键**是一个变量或一组变量，用于唯一标识每个观测。当\n需要多个变量时，这个键被称为复合键。例\n如，在nycflights13包中：\n\n-   `airlines` 记录关于每家航空公司的两项数据：承运人代码和全名。你\n    可以使用其两个字母的承运人代码来识别航空公司，使`carrier` (承运人) 成为主键。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    airlines\n    #> # A tibble: 16 × 2\n    #>   carrier name                    \n    #>   <chr>   <chr>                   \n    #> 1 9E      Endeavor Air Inc.       \n    #> 2 AA      American Airlines Inc.  \n    #> 3 AS      Alaska Airlines Inc.    \n    #> 4 B6      JetBlue Airways         \n    #> 5 DL      Delta Air Lines Inc.    \n    #> 6 EV      ExpressJet Airlines Inc.\n    #> # ℹ 10 more rows\n    ```\n    :::\n\n\n-   `airports` 记录了关于每个机场的数据。你\n    可以通过其三个字母的机场代码来识别每个机场，使`faa`成为主键。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    airports\n    #> # A tibble: 1,458 × 8\n    #>   faa   name                            lat   lon   alt    tz dst  \n    #>   <chr> <chr>                         <dbl> <dbl> <dbl> <dbl> <chr>\n    #> 1 04G   Lansdowne Airport              41.1 -80.6  1044    -5 A    \n    #> 2 06A   Moton Field Municipal Airport  32.5 -85.7   264    -6 A    \n    #> 3 06C   Schaumburg Regional            42.0 -88.1   801    -6 A    \n    #> 4 06N   Randall Airport                41.4 -74.4   523    -5 A    \n    #> 5 09J   Jekyll Island Airport          31.1 -81.4    11    -5 A    \n    #> 6 0A9   Elizabethton Municipal Airpo…  36.4 -82.2  1593    -5 A    \n    #> # ℹ 1,452 more rows\n    #> # ℹ 1 more variable: tzone <chr>\n    ```\n    :::\n\n\n-   `planes` 记录关于每架飞机的数据。你\n    可以通过其尾号来识别一架飞机，使`tailnum`成为主键。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    planes\n    #> # A tibble: 3,322 × 9\n    #>   tailnum  year type              manufacturer    model     engines\n    #>   <chr>   <int> <chr>             <chr>           <chr>       <int>\n    #> 1 N10156   2004 Fixed wing multi… EMBRAER         EMB-145XR       2\n    #> 2 N102UW   1998 Fixed wing multi… AIRBUS INDUSTR… A320-214        2\n    #> 3 N103US   1999 Fixed wing multi… AIRBUS INDUSTR… A320-214        2\n    #> 4 N104UW   1999 Fixed wing multi… AIRBUS INDUSTR… A320-214        2\n    #> 5 N10575   2002 Fixed wing multi… EMBRAER         EMB-145LR       2\n    #> 6 N105UW   1999 Fixed wing multi… AIRBUS INDUSTR… A320-214        2\n    #> # ℹ 3,316 more rows\n    #> # ℹ 3 more variables: seats <int>, speed <int>, engine <chr>\n    ```\n    :::\n\n\n-   `weather` 记录关于出发机场的天气数据。你\n    可以通过位置和时间的组合来识别每个观测，使`origin`和`time_hour`成为复合主键。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    weather\n    #> # A tibble: 26,115 × 15\n    #>   origin  year month   day  hour  temp  dewp humid wind_dir\n    #>   <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>    <dbl>\n    #> 1 EWR     2013     1     1     1  39.0  26.1  59.4      270\n    #> 2 EWR     2013     1     1     2  39.0  27.0  61.6      250\n    #> 3 EWR     2013     1     1     3  39.0  28.0  64.4      240\n    #> 4 EWR     2013     1     1     4  39.9  28.0  62.2      250\n    #> 5 EWR     2013     1     1     5  39.0  28.0  64.4      260\n    #> 6 EWR     2013     1     1     6  37.9  28.0  67.2      240\n    #> # ℹ 26,109 more rows\n    #> # ℹ 6 more variables: wind_speed <dbl>, wind_gust <dbl>, …\n    ```\n    :::\n\n\n外键是一个变量（或变量集），它对应于另一个表中的主键。例\n如：\n\n-   `flights$tailnum` 是一个外键，它对应于主键 `planes$tailnum`.\n-   `flights$carrier` 是一个外键，它对应于主键 `airlines$carrier`.\n-   `flights$origin` 是一个外键，它对应于主键 `airports$faa`.\n-   `flights$dest` 是一个外键，它对应于主键 `airports$faa`.\n-   `flights$origin`-`flights$time_hour` 是一个复合外键，它对应于复合主键 `weather$origin`-`weather$time_hour`.\n\n这些关系在 @fig-flights-relationships 中以图形方式进行了总结。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Connections between all five data frames in the nycflights13 package.\nVariables making up a primary key are colored grey, and are connected\nto their corresponding foreign keys with arrows.\n](diagrams/relational.png){#fig-flights-relationships fig-alt='The relationships between airports, planes, flights, weather, and\nairlines datasets from the nycflights13 package. airports$faa\nconnected to the flights$origin and flights$dest. planes$tailnum\nis connected to the flights$tailnum. weather$time_hour and\nweather$origin are jointly connected to flights$time_hour and\nflights$origin. airlines$carrier is connected to flights$carrier.\nThere are no direct connections between airports, planes, airlines,\nand weather data frames.' width=502}\n:::\n:::\n\n\n你会注意到这些键的设计中的一个很好的特征：主键和外键几乎总是具有相同的名称，正如你很快就会看到的，这将使你的连接操作变得更加容易。同\n样值得注意的是相反的关系：在多个表中使用的几乎每个变量名在每个位置都有相同的含义。只\n有一个例外：在`flights`表中`year`表示出发年份，而在`planes`表中，`year`表示制造年份。当\n我们开始实际将表连接在一起时，这一点将变得很重要。\n\n### 检查主键\n\n既然我们已经确定了每个表的主键，那么验证它们确实能唯一地标识每个观测是明智的做法。一\n种方法是`count()`主键的数量，并查找`n`大于 1 的条目。结\n果表明`planes`和`weather`两个表都没有问题：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplanes |> \n  count(tailnum) |> \n  filter(n > 1)\n#> # A tibble: 0 × 2\n#> # ℹ 2 variables: tailnum <chr>, n <int>\n\nweather |> \n  count(time_hour, origin) |> \n  filter(n > 1)\n#> # A tibble: 0 × 3\n#> # ℹ 3 variables: time_hour <dttm>, origin <chr>, n <int>\n```\n:::\n\n\n你也应该检查主键中是否有缺失值：如果某个值缺失了，那么它就无法标识一个观测！\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplanes |> \n  filter(is.na(tailnum))\n#> # A tibble: 0 × 9\n#> # ℹ 9 variables: tailnum <chr>, year <int>, type <chr>, manufacturer <chr>,\n#> #   model <chr>, engines <int>, seats <int>, speed <int>, engine <chr>\n\nweather |> \n  filter(is.na(time_hour) | is.na(origin))\n#> # A tibble: 0 × 15\n#> # ℹ 15 variables: origin <chr>, year <int>, month <int>, day <int>,\n#> #   hour <int>, temp <dbl>, dewp <dbl>, humid <dbl>, wind_dir <dbl>, …\n```\n:::\n\n\n### 代理键 (Surrogate keys)\n\n到目前为止，我们还没有谈到`flights`的主键。在\n这里它不是特别重要，因为没有数据框使用它作为外键；但考虑它仍然是有用的，因为如果我们有某种方式可以向其他人描述观测，那么处理这些观测会更加容易。\n\n经过一些思考和尝试，我们确定有三个变量一起能够唯一地标识每次航班：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  count(time_hour, carrier, flight) |> \n  filter(n > 1)\n#> # A tibble: 0 × 4\n#> # ℹ 4 variables: time_hour <dttm>, carrier <chr>, flight <int>, n <int>\n```\n:::\n\n\n缺少重复项是否自动使`time_hour`-`carrier`-`flight`成为主键？当\n然这是一个好的开始，但并不能保证成功。例\n如，海拔和纬度是否适合作为`airports`的主键？\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairports |>\n  count(alt, lat) |> \n  filter(n > 1)\n#> # A tibble: 1 × 3\n#>     alt   lat     n\n#>   <dbl> <dbl> <int>\n#> 1    13  40.6     2\n```\n:::\n\n\n仅通过海拔和纬度来识别机场显然是一个糟糕的主意，而且通常仅凭数据本身是无法知道变量组合是否可以成为一个好的主键的。但\n是对于航班来说，`time_hour`、`carrier`和`flight`的组合看起来是合理的，因为如果同时有多个航班在空中使用相同的航班号，对于航空公司和其客户来说会非常混乱的。\n\n不过，我们最好使用行号来引入一个简单的数字代理键：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <- flights |> \n  mutate(id = row_number(), .before = 1)\nflights2\n#> # A tibble: 336,776 × 20\n#>      id  year month   day dep_time sched_dep_time dep_delay arr_time\n#>   <int> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n#> 1     1  2013     1     1      517            515         2      830\n#> 2     2  2013     1     1      533            529         4      850\n#> 3     3  2013     1     1      542            540         2      923\n#> 4     4  2013     1     1      544            545        -1     1004\n#> 5     5  2013     1     1      554            600        -6      812\n#> 6     6  2013     1     1      554            558        -4      740\n#> # ℹ 336,770 more rows\n#> # ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, …\n```\n:::\n\n\n代理键在与他人交流时特别有用：告诉某人查看航班2001比告诉某人查看2013年1月3日上午9点起飞的UA430航班要容易得多。\n\n### 练习\n\n1.  在 @fig-flights-relationships 中，我们忘记了画出`weather` 和`airports`之间的关系。这\n    种关系是什么？它\n    应该如何出现在图中？\n\n2.  `weather` 数据只包含纽约市三个出发机场的信息。如\n    果它包含了美国所有机场的天气记录，那么它会与`flights`产生什么样的额外关联？\n\n3.  `year`, `month`, `day`, `hour`, 和 `origin` 几乎构成了天气的复合键，但是有一个小时有重复的观察记录。你\n    能找出那个小时有什么特别之处吗？\n\n4.  我们知道一年中的某些天是特殊的，通常会比平时少人乘坐飞机（例如，平安夜和圣诞节）。你\n    如何将这些数据表示为数据框？主\n    键会是什么？它\n    将如何与现有的数据框连接？\n\n5.  画一个图，说明Lahman包中`Batting`、`People`和`Salaries`数据框之间的连接关系。再\n    画一个图，显示`People`、`Managers`和`AwardsManagers`之间的关系。你\n    会如何描述`Batting`、`Pitching`和`Fielding`数据框之间的关系？\n\n## 基本连接 {#sec-mutating-joins}\n\n既然你已经理解了如何通过键来连接数据框，现在就可以开始使用连接来更好地理解`flights`数据集了。d\nplyr提供了六种连接函数：`left_join()`、`inner_join()`、`right_join()`、`full_join()`、`semi_join()`和`anti_join()`。这\n些函数都具有相同的接口：它们接受一对数据框（`x`和`y`）并返回一个数据框。输\n出中行和列的顺序主要由`x`决定。\n\n在本节中，你将学习如何使用一个变异连接`left_join()`和两个筛选连接`semi_join()`和`anti_join()`。在\n下一节中，你将详细了解这些函数是如何工作的，包括剩下的`inner_join()`、`right_join()`和`full_join()`。\n\n### 变异连接\n\n**变异连接**允许你将两个数据框中的变量组合起来：它首先通过键来匹配观测值，然后将一个数据框中的变量复制到另一个数据框中。与\n`mutate()`函数类似，连接函数将变量添加到右侧，因此如果你的数据集有很多变量，你可能不会立即看到新添加的变量。为\n了这些示例，我们将通过创建一个仅包含六个变量的较窄数据集来更容易地查看发生了什么[^joins-1]：\n\n[^joins-1]: 记住，在RStudio中，你也可以使用`View()`来避免这个问题。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <- flights |> \n  select(year, time_hour, origin, dest, tailnum, carrier)\nflights2\n#> # A tibble: 336,776 × 6\n#>    year time_hour           origin dest  tailnum carrier\n#>   <int> <dttm>              <chr>  <chr> <chr>   <chr>  \n#> 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA     \n#> 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA     \n#> 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA     \n#> 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6     \n#> 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL     \n#> 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA     \n#> # ℹ 336,770 more rows\n```\n:::\n\n\n变异连接有四种类型，但有一种你几乎总是会用到：`left_join()`。它\n很特别，因为输出总是与`x`（你正在连接的数据框）有相同的行[^joins-2]。\n`left_join()`的主要用途是添加额外的元数据。\n例如，我们可以使用`left_join()`向`flights2`数据中添加完整的航空公司名称：\n\n[^joins-2]: 这并不是百分百正确，但如果不是，你就会得到警告。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  left_join(airlines)\n#> Joining with `by = join_by(carrier)`\n#> # A tibble: 336,776 × 7\n#>    year time_hour           origin dest  tailnum carrier name                \n#>   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr>               \n#> 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines In…\n#> 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines In…\n#> 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines I…\n#> 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways     \n#> 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.\n#> 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines In…\n#> # ℹ 336,770 more rows\n```\n:::\n\n\n或者我们可以查找每架飞机起飞时的温度和风速：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(weather |> select(origin, time_hour, temp, wind_speed))\n#> Joining with `by = join_by(time_hour, origin)`\n#> # A tibble: 336,776 × 8\n#>    year time_hour           origin dest  tailnum carrier  temp wind_speed\n#>   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <dbl>      <dbl>\n#> 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA       39.0       12.7\n#> 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA       39.9       15.0\n#> 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA       39.0       15.0\n#> 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6       39.0       15.0\n#> 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL       39.9       16.1\n#> 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA       39.0       12.7\n#> # ℹ 336,770 more rows\n```\n:::\n\n\n或者查看当时飞行的是哪种大小的飞机：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(planes |> select(tailnum, type, engines, seats))\n#> Joining with `by = join_by(tailnum)`\n#> # A tibble: 336,776 × 9\n#>    year time_hour           origin dest  tailnum carrier type                \n#>   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr>               \n#> 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Fixed wing multi en…\n#> 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      Fixed wing multi en…\n#> 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Fixed wing multi en…\n#> 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      Fixed wing multi en…\n#> 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Fixed wing multi en…\n#> 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Fixed wing multi en…\n#> # ℹ 336,770 more rows\n#> # ℹ 2 more variables: engines <int>, seats <int>\n```\n:::\n\n\n当`left_join()`找不到与`x`中某行相匹配的记录时，它会用缺失值来填充新的变量。例\n如，没有关于尾号为`N3ALAA`的飞机的信息，因此其`type`、`engines`和`seats`将是缺失的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  filter(tailnum == \"N3ALAA\") |> \n  left_join(planes |> select(tailnum, type, engines, seats))\n#> Joining with `by = join_by(tailnum)`\n#> # A tibble: 63 × 9\n#>    year time_hour           origin dest  tailnum carrier type  engines seats\n#>   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr>   <int> <int>\n#> 1  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      <NA>       NA    NA\n#> 2  2013 2013-01-02 18:00:00 LGA    ORD   N3ALAA  AA      <NA>       NA    NA\n#> 3  2013 2013-01-03 06:00:00 LGA    ORD   N3ALAA  AA      <NA>       NA    NA\n#> 4  2013 2013-01-07 19:00:00 LGA    ORD   N3ALAA  AA      <NA>       NA    NA\n#> 5  2013 2013-01-08 17:00:00 JFK    ORD   N3ALAA  AA      <NA>       NA    NA\n#> 6  2013 2013-01-16 06:00:00 LGA    ORD   N3ALAA  AA      <NA>       NA    NA\n#> # ℹ 57 more rows\n```\n:::\n\n\n在本章剩下的部分，我们还会多次回到这个问题。\n\n### 指定连接键\n\n默认情况下，`left_join()`会使用两个数据框中都出现的所有变量作为连接键，这被称为自然连接 (**natural** join)。这\n是一个有用的启发式方法，但并不总是有效。例\n如，如果我们尝试将`flights2`与完整的`planes`数据集连接，会发生什么呢？\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(planes)\n#> Joining with `by = join_by(year, tailnum)`\n#> # A tibble: 336,776 × 13\n#>    year time_hour           origin dest  tailnum carrier type  manufacturer\n#>   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr> <chr>       \n#> 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      <NA>  <NA>        \n#> 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      <NA>  <NA>        \n#> 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      <NA>  <NA>        \n#> 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      <NA>  <NA>        \n#> 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      <NA>  <NA>        \n#> 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      <NA>  <NA>        \n#> # ℹ 336,770 more rows\n#> # ℹ 5 more variables: model <chr>, engines <int>, seats <int>, …\n```\n:::\n\n\n我们得到了很多缺失的匹配项，因为连接试图使用`tailnum`和`year`作为复合键。`f`\n`lights`和`planes`都有一个`year`列，但它们表示的是不同的含义：`flights$year`是航班发生的年份，而`planes$year`是飞机制造的年份。我\n们只想通过`tailnum`进行连接，因此我们需要使用`join_by()`来提供一个明确的规范。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(planes, join_by(tailnum))\n#> # A tibble: 336,776 × 14\n#>   year.x time_hour           origin dest  tailnum carrier year.y\n#>    <int> <dttm>              <chr>  <chr> <chr>   <chr>    <int>\n#> 1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999\n#> 2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998\n#> 3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990\n#> 4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012\n#> 5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991\n#> 6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012\n#> # ℹ 336,770 more rows\n#> # ℹ 7 more variables: type <chr>, manufacturer <chr>, model <chr>, …\n```\n:::\n\n\n请注意，在输出中`year`变量通过后缀（`year.x` 和 `year.y`）来区分，以告诉你该变量来自`x`还是`y`参数。你\n可以使用`suffix`参数来覆盖默认后缀。\n\n`join_by(tailnum)`是`join_by(tailnum == tailnum)`的简写。了\n解这种完整形式很重要，原因有两个：首先，它描述了两个表之间的关系：键必须相等。这\n就是为什么这种连接类型通常被称为等值连接 (**equi join**)。你\n将在\\@sec-non-equi-joins 学习非等值连接。\n\n其次，这是你在每个表中指定不同连接键的方式。例\n如，有两种方式可以将`flight2`和`airports`表连接起来：通过`dest`或`origin`。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(airports, join_by(dest == faa))\n#> # A tibble: 336,776 × 13\n#>    year time_hour           origin dest  tailnum carrier name                \n#>   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr>               \n#> 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      George Bush Interco…\n#> 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      George Bush Interco…\n#> 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Miami Intl          \n#> 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      <NA>                \n#> 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Hartsfield Jackson …\n#> 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Chicago Ohare Intl  \n#> # ℹ 336,770 more rows\n#> # ℹ 6 more variables: lat <dbl>, lon <dbl>, alt <dbl>, tz <dbl>, …\n\nflights2 |> \n  left_join(airports, join_by(origin == faa))\n#> # A tibble: 336,776 × 13\n#>    year time_hour           origin dest  tailnum carrier name               \n#>   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr>              \n#> 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Newark Liberty Intl\n#> 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      La Guardia         \n#> 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      John F Kennedy Intl\n#> 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      John F Kennedy Intl\n#> 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      La Guardia         \n#> 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Newark Liberty Intl\n#> # ℹ 336,770 more rows\n#> # ℹ 6 more variables: lat <dbl>, lon <dbl>, alt <dbl>, tz <dbl>, …\n```\n:::\n\n\n在旧代码中，你可能会看到使用字符向量来指定连接键的不同方式：\n\n-   `by = \"x\"`对应于`join_by(x)`。\n-   `by = c(\"a\" = \"x\")`对应于`join_by(a == x)`。\n\n既然现在有了`join_by()`，我们更倾向于使用它，因为它提供了更清晰且更灵活的规范。\n\n`inner_join()`、`right_join()`、`full_join()`与`left_join()`的接口相同。它\n们之间的区别在于保留哪些行：左连接保留`x`中的所有行，右连接保留`y`中的所有行，全连接保留`x`或`y`中的所有行，而内连接仅保留在`x`和`y`中都出现的行。我\n们将在稍后更详细地讨论这些连接类型。\n\n### 筛选连接\n\n正如你可能猜到的，筛选连接的主要操作是筛选行。有\n两种类型：半连接（semi-join）和反连接（anti-join）。半\n连接保留`x`在`y`中有匹配项的所有行。例\n如，我们可以使用半连接来筛选机场数据集，仅显示始发机场：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairports |> \n  semi_join(flights2, join_by(faa == origin))\n#> # A tibble: 3 × 8\n#>   faa   name                  lat   lon   alt    tz dst   tzone           \n#>   <chr> <chr>               <dbl> <dbl> <dbl> <dbl> <chr> <chr>           \n#> 1 EWR   Newark Liberty Intl  40.7 -74.2    18    -5 A     America/New_York\n#> 2 JFK   John F Kennedy Intl  40.6 -73.8    13    -5 A     America/New_York\n#> 3 LGA   La Guardia           40.8 -73.9    22    -5 A     America/New_York\n```\n:::\n\n\n或者仅仅是目的地:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairports |> \n  semi_join(flights2, join_by(faa == dest))\n#> # A tibble: 101 × 8\n#>   faa   name                     lat    lon   alt    tz dst   tzone          \n#>   <chr> <chr>                  <dbl>  <dbl> <dbl> <dbl> <chr> <chr>          \n#> 1 ABQ   Albuquerque Internati…  35.0 -107.   5355    -7 A     America/Denver \n#> 2 ACK   Nantucket Mem           41.3  -70.1    48    -5 A     America/New_Yo…\n#> 3 ALB   Albany Intl             42.7  -73.8   285    -5 A     America/New_Yo…\n#> 4 ANC   Ted Stevens Anchorage…  61.2 -150.    152    -9 A     America/Anchor…\n#> 5 ATL   Hartsfield Jackson At…  33.6  -84.4  1026    -5 A     America/New_Yo…\n#> 6 AUS   Austin Bergstrom Intl   30.2  -97.7   542    -6 A     America/Chicago\n#> # ℹ 95 more rows\n```\n:::\n\n\n反连接则相反：它们返回x在y中没有匹配项的所有行。它\n们在寻找数据中隐式的缺失值方面很有用，这是 @sec-missing-implicit 的主题。隐\n式的缺失值不会显示为`NA`，而仅表现为缺失。例\n如，我们可以通过查找没有匹配目的地机场的航班来找到`airports`数据集中缺失的行：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  anti_join(airports, join_by(dest == faa)) |> \n  distinct(dest)\n#> # A tibble: 4 × 1\n#>   dest \n#>   <chr>\n#> 1 BQN  \n#> 2 SJU  \n#> 3 STT  \n#> 4 PSE\n```\n:::\n\n\n或者我们可以找出哪些`tailnum`在`planes`数据集中缺失：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  anti_join(planes, join_by(tailnum)) |> \n  distinct(tailnum)\n#> # A tibble: 722 × 1\n#>   tailnum\n#>   <chr>  \n#> 1 N3ALAA \n#> 2 N3DUAA \n#> 3 N542MQ \n#> 4 N730MQ \n#> 5 N9EAMQ \n#> 6 N532UA \n#> # ℹ 716 more rows\n```\n:::\n\n\n### 练习\n\n1.  找出全年中延误最严重的48小时，并与`weather`数据进行交叉比对。你\n    能否看到任何模式？\n\n2.  假设你使用这段代码找到了最受欢迎的10个目的地:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    top_dest <- flights2 |>\n      count(dest, sort = TRUE) |>\n      head(10)\n    ```\n    :::\n\n\n    你怎样才能找到去这些目的地的所有航班呢?\n\n3.  是否每个起飞的航班都有对应的该小时天气数据？\n\n4.  那些在`planes`中没有匹配记录的尾号有什么共同之处？(\n    提示: 一个变量解释了约90%的问题）\n\n5.  给`planes`数据框添加一个列，列出飞过该飞机的所有航空公司。你\n    可能会期望飞机和航空公司之间存在一种隐式关系，因为每架飞机都由单一的航空公司运营。使\n    用你在前几章中学到的工具来证实或反驳这一假设。\n\n6.  将起飞机场和目的地机场的纬度和经度添加到`flights`数据框中。在\n    连接之前还是之后重命名列更容易？\n\n7.  按目的地计算平均延误时间，然后与`airports`数据框进行连接，以便你可以展示延误的空间分布。以\n    下是一个绘制美国地图的简单方法：\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    airports |>\n      semi_join(flights, join_by(faa == dest)) |>\n      ggplot(aes(x = lon, y = lat)) +\n        borders(\"state\") +\n        geom_point() +\n        coord_quickmap()\n    ```\n    :::\n\n\n    你可能想使用点的大小或颜色来显示每个机场的平均延误时间。\n\n8.  2013年6月13日发生了什么？画\n    一张延误地图，然后使用Google与天气进行交叉比对。\n\n\n    \n\n\n## 连接是如何工作的?\n\n既然你已经使用连接操作几次了，现在是时候深入了解它们是如何工作的了，重点关注`x`中的每一行如何与`y`中的行进行匹配。我\n们将从引入连接的视觉表示开始，使用下面定义的简单tibble，并在 @fig-join-setup 中展示。在\n这些例子中，我们将使用名为`key`的单个键和一个值列（`val_x`和val_y），但这些想法都可以推广到多个键和多个值。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tribble(\n  ~key, ~val_x,\n     1, \"x1\",\n     2, \"x2\",\n     3, \"x3\"\n)\ny <- tribble(\n  ~key, ~val_y,\n     1, \"y1\",\n     2, \"y2\",\n     4, \"y3\"\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Graphical representation of two simple tables. The colored `key`\ncolumns map background color to key value. The grey columns represent\nthe \"value\" columns that are carried along for the ride.\n](diagrams/join/setup.png){#fig-join-setup fig-alt='x and y are two data frames with 2 columns and 3 rows, with contents\nas described in the text. The values of the keys are colored:\n1 is green, 2 is purple, 3 is orange, and 4 is yellow.' width=160}\n:::\n:::\n\n\n@fig-join-setup2 为我们的视觉表示法奠定了基础。它\n展示了`x`和`y`之间所有可能的匹配，这些匹配是从`x`的每一行和`y`的每一行绘制出的线条的交点。输\n出结果中的行和列主要由`x`决定，因此`x`表格是水平的，并且与输出结果对齐。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![To understand how joins work, it's useful to think of every possible\nmatch. Here we show that with a grid of connecting lines.\n](diagrams/join/setup2.png){#fig-join-setup2 fig-alt='x and y are placed at right-angles, with horizonal lines extending\nfrom x and vertical lines extending from y. There are 3 rows in x and\n3 rows in y, which leads to nine intersections representing nine\npotential matches.' width=170}\n:::\n:::\n\n\n为了描述一种特定的连接类型，我们用点来表示匹配项，这些匹配项决定了输出的行。输\n出是一个新的数据框，包含键、x值和y值。例\n如，@fig-join-inner 展示了内连接，只有当键相等时，行才会被保留。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![An inner join matches each row in `x` to the row in `y` that has the\nsame value of `key`. Each match becomes a row in the output.\n](diagrams/join/inner.png){#fig-join-inner fig-alt='x and y are placed at right-angles with lines forming a grid of\npotential matches. Keys 1 and 2 appear in both x and y, so we\nget a match, indicated by a dot. Each dot corresponds to a row\nin the output, so the resulting joined data frame has two rows.' width=363}\n:::\n:::\n\n\n我们可以应用同样的原理来解释外连接 (**outer joins**)，外连接会保留至少在一个数据框中出现的观测值。这\n些连接通过在每个数据框中添加一个额外的“虚拟”观测值来实现。这\n个观测值具有一个键，当没有其他键匹配时，它会匹配，并将值填充为`NA`。有\n三种类型的外连接：\n\n-   左连接保留`x`中的所有观测值，如 @fig-join-left 所示。`x`\n    的每一行都保留在输出中，因为它可以退回到与`y`中的`NA`行进行匹配。\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![A visual representation of the left join where every row in `x`\n    appears in the output.\n    ](diagrams/join/left.png){#fig-join-left fig-alt='Compared to the previous diagram showing an inner join, the y table\n    gets a new virtual row containin NA that will match any row in x\n    that didn\\'t otherwise match. This means that the output now has\n    three rows. For key = 3, which matches this virtual row, val_y takes\n    value NA.' width=385}\n    :::\n    :::\n\n\n-   右连接保留`y`中的所有观测值，如图 @fig-join-right 所示。`y`\n    的每一行都保留在输出中，因为它可以退回到与`x`中的`NA`行进行匹配。输\n    出仍然尽可能与`x`进行匹配；`y`中的任何额外行都会添加到末尾。\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![A visual representation of the right join where every row of `y`\n    appears in the output.\n    ](diagrams/join/right.png){#fig-join-right fig-alt='Compared to the previous diagram showing an left join, the x table\n    now gains a virtual row so that every row in y gets a match in x.\n    val_x contains NA for the row in y that didn\\'t match x.' width=380}\n    :::\n    :::\n\n\n-   全连接保留出现在`x`或`y`中的所有观测值，如图 @fig-join-full 所示。`x`\n    和`y`的每一行都包含在输出中，因为`x`和`y`都有一个回退行为`NA`。同\n    样，输出以`x`的所有行开始，然后是剩余的未匹配的`y`行。\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![A visual representation of the full join where every row in `x`\n    and `y` appears in the output.\n    ](diagrams/join/full.png){#fig-join-full fig-alt='Now both x and y have a virtual row that always matches.\n    The result has 4 rows: keys 1, 2, 3, and 4 with all values\n    from val_x and val_y, however key 2, val_y and key 4, val_x are NAs\n    since those keys don\\'t have a match in the other data frames.' width=388}\n    :::\n    :::\n\n\n另一种展示不同类型的外连接差异的方法是使用文氏图 (Venn diagram)，如 @fig-join-venn 所示。然\n而，这并不是一个很好的表示方法，因为它虽然可能会唤起你对哪些行被保留的记忆，但它无法说明列发生了什么。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Venn diagrams showing the difference between inner, left, right, and\nfull joins.\n](diagrams/join/venn.png){#fig-join-venn fig-alt='Venn diagrams for inner, full, left, and right joins. Each join\nrepresented with two intersecting circles representing data frames x\nand y, with x on the right and y on the left. Shading indicates the\nresult of the join.' width=385}\n:::\n:::\n\n\n这里展示的连接被称为等值连接，即当键相等时行会匹配。等\n值连接是最常见的连接类型，因此我们通常会省略equi前缀，只说“内连接”而不是“等值内连接”。我\n们将在\\@sec-non-equi-joins 讨论非等值连接。\n\n### 行匹配\n\n到目前为止，我们已经探讨了`x`中的一行与`y`中的零行或一行匹配时会发生什么。但\n如果它匹配多行时会发生什么呢？为\n了理解这一点，让我们首先关注`inner_join()`函数，然后画一张图，如 @fig-join-match-types 所示。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The three ways a row in `x` can match. `x1` matches\none row in `y`, `x2` matches two rows in `y`, `x3` matches\nzero rows in y. Note that while there are three rows in\n`x` and three rows in the output, there isn't a direct\ncorrespondence between the rows.\n](diagrams/join/match-types.png){#fig-join-match-types fig-alt='A join diagram where x has key values 1, 2, and 3, and y has\nkey values 1, 2, 2. The output has three rows because key 1 matches\none row, key 2 matches two rows, and key 3 matches zero rows.' width=348}\n:::\n:::\n\n\n`x`中的行有三种可能的结果：\n\n-   如果它不匹配任何行，它将被删除；\n-   如果它与`y`中的一行匹配，它将被保留；\n-   如果它与`y`中的多行匹配，它将为每个匹配项复制一次。\n\n原则上，这意味着输出中的行与`x`中的行之间没有保证的对应关系，但在实践中，这种情况很少会引起问题。然\n而，有一种特别危险的情况可能导致行的组合爆炸，想象一下连接以下两个表：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- tibble(key = c(1, 2, 2), val_x = c(\"x1\", \"x2\", \"x3\"))\ndf2 <- tibble(key = c(1, 2, 2), val_y = c(\"y1\", \"y2\", \"y3\"))\n```\n:::\n\n\n虽然`df1`的第一行只与`df2`中的一行匹配，但第二行和第三行都与两行匹配。这\n个有时被称为多对多 (`many-to-many`) 连接，将会导致dplyr发出警告：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 |> \n  inner_join(df2, join_by(key))\n#> Warning in inner_join(df1, df2, join_by(key)): Detected an unexpected many-to-many relationship between `x` and `y`.\n#> ℹ Row 2 of `x` matches multiple rows in `y`.\n#> ℹ Row 2 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set `relationship =\n#>   \"many-to-many\"` to silence this warning.\n#> # A tibble: 5 × 3\n#>     key val_x val_y\n#>   <dbl> <chr> <chr>\n#> 1     1 x1    y1   \n#> 2     2 x2    y2   \n#> 3     2 x2    y3   \n#> 4     2 x3    y2   \n#> 5     2 x3    y3\n```\n:::\n\n\n如果你有意这么做，可以按照警告的提示设置 `relationship = \"many-to-many\"`。\n\n### 筛选连接\n\n匹配的数量也决定了筛选连接的行为。半\n连接保留`x`在`y`中有一个或多个匹配的行，如 @fig-join-semi 所示。反\n连接保留`x`在`y`中零个匹配的行，如 @fig-join-anti 所示。在\n这两种情况下，仅匹配的存在是重要的，匹配的次数并不重要。这\n意味着筛选连接永远不会像变异连接那样重复行。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![In a semi-join it only matters that there is a match; otherwise\nvalues in `y` don't affect the output.\n](diagrams/join/semi.png){#fig-join-semi fig-alt='A join diagram with old friends x and y. In a semi join, only the\npresence of a match matters so the output contains the same columns\nas x.' width=318}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![An anti-join is the inverse of a semi-join, dropping rows from `x`\nthat have a match in `y`.\n](diagrams/join/anti.png){#fig-join-anti fig-alt='An anti-join is the inverse of a semi-join so matches are drawn with\nred lines indicating that they will be dropped from the output.' width=317}\n:::\n:::\n\n\n## 非等值连接 {#sec-non-equi-joins}\n\n到目前为止，你只看到了等连接（equi joins），也就是当`x`的键等于`y`的键时行才会匹配。现\n在我们放宽这个限制，并讨论确定一对行是否匹配的其他方法。\n\n但是，在我们这样做之前，我们需要回顾一下上面所做的简化。在\n等连接中，`x`的键和`y`的键总是相等的，所以我们只需要在输出中显示一个。我\n们可以要求dplyr通过`keep = TRUE`保留两个键，这将导致下面的代码和 @fig-inner-both 中重新绘制的`inner_join()`。\n\nSo far you've only seen equi joins, joins where the rows match if the `x` key equals the `y` key.\nNow we're going to relax that restriction and discuss other ways of determining if a pair of rows match.\n\nBut before we can do that, we need to revisit a simplification we made above.\nIn equi joins the `x` keys and `y` are always equal, so we only need to show one in the output.\nWe can request that dplyr keep both keys with `keep = TRUE`, leading to the code below and the re-drawn `inner_join()` in @fig-inner-both.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx |> inner_join(y, join_by(key == key), keep = TRUE)\n#> # A tibble: 2 × 4\n#>   key.x val_x key.y val_y\n#>   <dbl> <chr> <dbl> <chr>\n#> 1     1 x1        1 y1   \n#> 2     2 x2        2 y2\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![An inner join showing both `x` and `y` keys in the output.\n](diagrams/join/inner-both.png){#fig-inner-both fig-alt='A join diagram showing an inner join betwen x and y. The result\nnow includes four columns: key.x, val_x, key.y, and val_y. The\nvalues of key.x and key.y are identical, which is why we usually\nonly show one.\n' width=415}\n:::\n:::\n\n\n当我们从等值连接转向非等值连接时，我们总是会显示键，因为键值通常会有所不同。例\n如，我们不再仅在`x$key`和`y$key`相等时才进行匹配，而是可以在`x$key`大于或等于`y$key`时进行匹配，如 @fig-join-gte 所示。d\nplyr的连接函数理解等值连接和非等值连接之间的区别，因此当你执行非等值连接时，它总是会显示两个键。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![A non-equi join where the `x` key must be greater than or equal to\nthe `y` key. Many rows generate multiple matches.\n](diagrams/join/gte.png){#fig-join-gte fig-alt='A join diagram illustrating join_by(key >= key). The first row\nof x matches one row of y and the second and thirds rows each match\ntwo rows. This means the output has five rows containing each of the\nfollowing (key.x, key.y) pairs: (1, 1), (2, 1), (2, 2), (3, 1),\n(3, 2).' width=385}\n:::\n:::\n\n\n“非等值连接”这个术语不是特别有用，因为它只告诉你这个连接不是什么，而不是它是什么。d\nplyr通过识别四种特别有用的非等值连接类型来帮助你：\n\n-   **交叉连接 (cross joins)** 匹配每一对行；\n-   **不等式(inequality joins)** 使用 `<`、`<=`、`>` 和 `>=` 而不是 `==`；\n-   **滚动连接 (rolling joins)** 类似于不等式连接，但只找到最接近的匹配项；\n-   **重叠连接 (overlap joins)** 是一种特殊的不等式连接类型，专为处理范围而设计。\n\n这些类型将在以下部分中更详细地描述。\n\n### 交叉连接\n\n交叉连接会匹配所有内容，如 @fig-join-cross 所示，生成行的笛卡尔积。这\n意味着输出将具有`nrow(x) * nrow(y)`行。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![A cross join matches each row in `x` with every row in `y`.\n](diagrams/join/cross.png){#fig-join-cross fig-alt='A join diagram showing a dot for every combination of x and y.' width=155}\n:::\n:::\n\n\n交叉连接在生成排列时很有用。例\n如下面的代码生成了所有可能的名称对。因\n为我们正在将`df`与其自身连接，所以这有时被称为自连接 (**self-join**)。交\n叉连接使用不同的连接函数，因为在匹配每一行时，没有内连接/左连接/右连接/全连接之间的区别。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(name = c(\"John\", \"Simon\", \"Tracy\", \"Max\"))\ndf |> cross_join(df)\n#> # A tibble: 16 × 2\n#>   name.x name.y\n#>   <chr>  <chr> \n#> 1 John   John  \n#> 2 John   Simon \n#> 3 John   Tracy \n#> 4 John   Max   \n#> 5 Simon  John  \n#> 6 Simon  Simon \n#> # ℹ 10 more rows\n```\n:::\n\n\n### 不等式连接\n\n不等连接使用 `<`、`<=`、`>` 或 `>=` 来限制可能匹配的集合，如 @fig-join-gte 和 @fig-join-lt 所示。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![An inequality join where `x` is joined to `y` on rows where the key\nof `x` is less than the key of `y`. This makes a triangular\nshape in the top-left corner.\n](diagrams/join/lt.png){#fig-join-lt fig-alt='A diagram depicting an inequality join where a data frame x is joined by\na data frame y where the key of x is less than the key of y, resulting\nin a triangular shape in the top-left corner.' width=185}\n:::\n:::\n\n\n不等连接非常通用，以至于很难提出有意义的特定用例。一\n个有用的小技巧是使用它们来限制交叉连接，以便我们不是生成所有排列，而是生成所有组合：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(id = 1:4, name = c(\"John\", \"Simon\", \"Tracy\", \"Max\"))\n\ndf |> inner_join(df, join_by(id < id))\n#> # A tibble: 6 × 4\n#>    id.x name.x  id.y name.y\n#>   <int> <chr>  <int> <chr> \n#> 1     1 John       2 Simon \n#> 2     1 John       3 Tracy \n#> 3     1 John       4 Max   \n#> 4     2 Simon      3 Tracy \n#> 5     2 Simon      4 Max   \n#> 6     3 Tracy      4 Max\n```\n:::\n\n\n### 滚动连接\n\n滚动连接是一种特殊的不等式连接，其中不是获取满足不等式的每一行，而是仅获取最接近的行，如 @fig-join-closest 所示。你\n可以通过将`closest()`添加到不等连接中来将其转换为滚动连接。例\n如`join_by(closest(x <= y))`将匹配大于或等于`x`的最小的`y`，而`join_by(closest(x > y))`将匹配小于`x`的最大的`y`。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![A rolling join is similar to a greater-than-or-equal inequality join\nbut only matches the first value.\n](diagrams/join/closest.png){#fig-join-closest fig-alt='A rolling join is a subset of an inequality join so some matches are\ngrayed out indicating that they\\'re not used because they\\'re not the\n\"closest\".' width=262}\n:::\n:::\n\n\n滚动连接在以下场景特别有用：假如你有两个日期表，但日期并不完全对应；你想要在表1中找到与表2中某个日期最接近的日期 (之前或之后)。\n\n例如，假设你负责你们办公室的派对策划委员会。由\n于公司比较节俭，不是举办单独的派对，而是每个季度只举办一次。确\n定派对日期的规则有些复杂：派对总是在星期一举行，而且你跳过了1月的第一周，因为很多人都在休假。此\n外，2022年第三季度的第一个星期一是7月4日，所以派对必须推迟一周。基\n于这些规则，以下是确定的派对日期：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparties <- tibble(\n  q = 1:4,\n  party = ymd(c(\"2022-01-10\", \"2022-04-04\", \"2022-07-11\", \"2022-10-03\"))\n)\n```\n:::\n\n\n现在，假设你有一张员工生日的表格：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nemployees <- tibble(\n  name = sample(babynames::babynames$name, 100),\n  birthday = ymd(\"2022-01-01\") + (sample(365, 100, replace = TRUE) - 1)\n)\nemployees\n#> # A tibble: 100 × 2\n#>   name     birthday  \n#>   <chr>    <date>    \n#> 1 Kemba    2022-01-22\n#> 2 Orean    2022-06-26\n#> 3 Kirstyn  2022-02-11\n#> 4 Amparo   2022-11-11\n#> 5 Belen    2022-03-25\n#> 6 Rayshaun 2022-01-11\n#> # ℹ 94 more rows\n```\n:::\n\n\n对于每个员工，我们都想找到在他们生日之后（或当天）的第一个派对日期。我\n们可以用滚动连接来表示这一点：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemployees |> \n  left_join(parties, join_by(closest(birthday >= party)))\n#> # A tibble: 100 × 4\n#>   name     birthday       q party     \n#>   <chr>    <date>     <int> <date>    \n#> 1 Kemba    2022-01-22     1 2022-01-10\n#> 2 Orean    2022-06-26     2 2022-04-04\n#> 3 Kirstyn  2022-02-11     1 2022-01-10\n#> 4 Amparo   2022-11-11     4 2022-10-03\n#> 5 Belen    2022-03-25     1 2022-01-10\n#> 6 Rayshaun 2022-01-11     1 2022-01-10\n#> # ℹ 94 more rows\n```\n:::\n\n\n然而，这种方法存在一个问题：在1月10日之前过生日的人没有派对：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemployees |> \n  anti_join(parties, join_by(closest(birthday >= party)))\n#> # A tibble: 2 × 2\n#>   name   birthday  \n#>   <chr>  <date>    \n#> 1 Maks   2022-01-07\n#> 2 Nalani 2022-01-04\n```\n:::\n\n\n为了解决这个问题，我们需要以不同的方式处理它，即使用重叠连接。\n\n### 重叠连接\n\n重叠连接提供了三个辅助函数，这些函数使用不等式连接来简化区间操作：\n\n-   `between(x, y_lower, y_upper)` 是 `x >= y_lower, x <= y_upper`的简写；\n-   `within(x_lower, x_upper, y_lower, y_upper)` 是 `x_lower >= y_lower, x_upper <= y_upper`的简写；\n-   `overlaps(x_lower, x_upper, y_lower, y_upper)` 是 `x_lower <= y_upper, x_upper >= y_lower`的简写。\n\n让我们继续生日的例子，看看如何使用这些函数。我\n们之前使用的策略有一个问题：1月1日到9日之间过生日的人没有派对。因\n此，明确每个派对涵盖的日期范围，并为这些早过生日的人设置一个特殊情况可能会更好：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparties <- tibble(\n  q = 1:4,\n  party = ymd(c(\"2022-01-10\", \"2022-04-04\", \"2022-07-11\", \"2022-10-03\")),\n  start = ymd(c(\"2022-01-01\", \"2022-04-04\", \"2022-07-11\", \"2022-10-03\")),\n  end = ymd(c(\"2022-04-03\", \"2022-07-11\", \"2022-10-02\", \"2022-12-31\"))\n)\nparties\n#> # A tibble: 4 × 4\n#>       q party      start      end       \n#>   <int> <date>     <date>     <date>    \n#> 1     1 2022-01-10 2022-01-01 2022-04-03\n#> 2     2 2022-04-04 2022-04-04 2022-07-11\n#> 3     3 2022-07-11 2022-07-11 2022-10-02\n#> 4     4 2022-10-03 2022-10-03 2022-12-31\n```\n:::\n\n\nHadley 在数据录入方面糟糕透顶，因此他还想检查派对时间段是否重叠。一\n种方法是通过自连接来检查是否有任何开始-结束区间与其他区间重叠：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparties |> \n  inner_join(parties, join_by(overlaps(start, end, start, end), q < q)) |> \n  select(start.x, end.x, start.y, end.y)\n#> # A tibble: 1 × 4\n#>   start.x    end.x      start.y    end.y     \n#>   <date>     <date>     <date>     <date>    \n#> 1 2022-04-04 2022-07-11 2022-07-11 2022-10-02\n```\n:::\n\n\n哎呀，有重叠的区间，让我们修复这个问题并继续：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparties <- tibble(\n  q = 1:4,\n  party = ymd(c(\"2022-01-10\", \"2022-04-04\", \"2022-07-11\", \"2022-10-03\")),\n  start = ymd(c(\"2022-01-01\", \"2022-04-04\", \"2022-07-11\", \"2022-10-03\")),\n  end = ymd(c(\"2022-04-03\", \"2022-07-10\", \"2022-10-02\", \"2022-12-31\"))\n)\n```\n:::\n\n\n现在我们可以将每个员工与他们的派对匹配起来。这\n里非常适合使用`unmatched = \"error\"`选项，因为我们想快速找出是否有员工没有被分配到派对。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemployees |> \n  inner_join(parties, join_by(between(birthday, start, end)), unmatched = \"error\")\n#> # A tibble: 100 × 6\n#>   name     birthday       q party      start      end       \n#>   <chr>    <date>     <int> <date>     <date>     <date>    \n#> 1 Kemba    2022-01-22     1 2022-01-10 2022-01-01 2022-04-03\n#> 2 Orean    2022-06-26     2 2022-04-04 2022-04-04 2022-07-10\n#> 3 Kirstyn  2022-02-11     1 2022-01-10 2022-01-01 2022-04-03\n#> 4 Amparo   2022-11-11     4 2022-10-03 2022-10-03 2022-12-31\n#> 5 Belen    2022-03-25     1 2022-01-10 2022-01-01 2022-04-03\n#> 6 Rayshaun 2022-01-11     1 2022-01-10 2022-01-01 2022-04-03\n#> # ℹ 94 more rows\n```\n:::\n\n\n### 练习\n\n1.  你能解释下面等值连接的键是如何工作的吗？它\n    们的结果为什么是不同的？\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x |> full_join(y, join_by(key == key))\n    #> # A tibble: 4 × 3\n    #>     key val_x val_y\n    #>   <dbl> <chr> <chr>\n    #> 1     1 x1    y1   \n    #> 2     2 x2    y2   \n    #> 3     3 x3    <NA> \n    #> 4     4 <NA>  y3\n    \n    x |> full_join(y, join_by(key == key), keep = TRUE)\n    #> # A tibble: 4 × 4\n    #>   key.x val_x key.y val_y\n    #>   <dbl> <chr> <dbl> <chr>\n    #> 1     1 x1        1 y1   \n    #> 2     2 x2        2 y2   \n    #> 3     3 x3       NA <NA> \n    #> 4    NA <NA>      4 y3\n    ```\n    :::\n\n\n2.  在检查任何派对时间段是否与另一个派对时间段重叠时，我们在`join_by()`中使用了`q < q`。为\n    什么？如\n    果去掉这个不等式会发生什么?\n\n## 小结\n\n在本章中，你学习了如何使用变异连接和过滤连接来合并来自两个数据框的数据。在\n此过程中，你学习了如何识别键，以及主键和外键之间的区别。你\n还了解了连接的工作原理，以及如何计算输出将有多少行。最\n后，初步了解了非等值连接的强大功能，并看到了一些有趣的应用案例。\n\n本章结束了本书“转换”部分的内容，该部分重点关注了你可以使用单个列和tibble的工具。你\n学习了dplyr和基础函数来处理逻辑向量、数字和完整表格，学习了stringr函数来处理字符串，lubridate函数来处理日期和时间，以及forcats函数来处理因子。\n\n在本书的下一部分，你将学习更多关于如何将各种类型的数据以整齐的形式导入到R中。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}