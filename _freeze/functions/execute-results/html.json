{
  "hash": "d4d34961dde5e1adeb1b3b34f4d50f33",
  "result": {
    "engine": "knitr",
    "markdown": "# 函数 {#sec-functions}\n\n\n::: {.cell}\n\n:::\n\n\n## 引言\n\n数据科学家提高影响力的一种最佳方式就是编写函数。函\n数允许你以一种更强大和通用的方式自动化常见任务，这比复制粘贴更为高效。与\n复制粘贴相比，编写函数具有四大优势：\n\n1.  可以给函数起一个富有表现力的名字，使你的代码更容易理解。\n2.  随着需求的变化，你只需要在一个地方更新代码，而不是在多个地方。\n3.  消除了在复制粘贴时可能发生的偶然错误 (例如在一个地方更新了变量名，但在另一个地方没有) 。\n4.  使得项目之间的工作重用变得更加容易，随着时间推移提高了生产效率。\n\n一个经验法则是：当你复制粘贴一块代码超过两次时 (即现在有三份相同的代码) 就应该考虑编写一个函数。在\n本章中，你将学习三种有用的函数类型：\n\n-   向量函数 接受一个或多个向量作为输入，并返回一个向量作为输出。\n-   数据框函数 接受一个数据框作为输入，并返回一个数据框作为输出。\n-   绘图函数 接受一个数据框作为输入，并返回一个图形作为输出。\n\n每个部分都包含了许多示例，以帮助你概括你看到的模式。没\n有Twitter上朋友们的帮助，这些例子是不可能实现的，我们鼓励你点击评论中的链接查看原始灵感来源。你\n可能还想阅读关于[general functions](https://twitter.com/hadleywickham/status/1571603361350164486)和[plotting functions](https://twitter.com/hadleywickham/status/1574373127349575680)的原始激励推文，以查看更多的函数示例。\n\n### 必要条件\n\n我们将整理来自tidyverse的各种函数。同\n时，我们还将使用`nycflights13`数据集作为熟悉的数据源来使用我们的函数。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n## 向量函数\n\n我们从向量函数开始:接受一个或多个向量并返回一个向量结果的函数。例\n如，请看下面的代码。它\n是做什么的?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  a = rnorm(5),\n  b = rnorm(5),\n  c = rnorm(5),\n  d = rnorm(5),\n)\n\ndf |> mutate(\n  a = (a - min(a, na.rm = TRUE)) / \n    (max(a, na.rm = TRUE) - min(a, na.rm = TRUE)),\n  b = (b - min(b, na.rm = TRUE)) / \n    (max(b, na.rm = TRUE) - min(b, na.rm = TRUE)),\n  c = (c - min(c, na.rm = TRUE)) / \n    (max(c, na.rm = TRUE) - min(c, na.rm = TRUE)),\n  d = (d - min(d, na.rm = TRUE)) / \n    (max(d, na.rm = TRUE) - min(d, na.rm = TRUE)),\n)\n#> # A tibble: 5 × 4\n#>       a     b     c     d\n#>   <dbl> <dbl> <dbl> <dbl>\n#> 1 0.339 1     0.291 0    \n#> 2 0.880 0     0.611 0.557\n#> 3 0     0.530 1     0.752\n#> 4 0.795 0.531 0     1    \n#> 5 1     0.518 0.580 0.394\n```\n:::\n\n\n你可能能猜出这段代码将每一列重新缩放，使其范围在0到1之间。但\n你有没有发现错误？当\nHadley写这段代码时，他在复制粘贴时犯了一个错误，忘记把字母a改成b。防\n止这种错误是学习如何编写函数的一个非常好的理由。\n\n### 编写函数\n\n要编写一个函数，你首先需要分析你的重复代码，以弄清楚哪些部分是固定的，哪些部分是变化的。如\n果我们把上面的代码从`mutate()`中提取出来，因为每次重复现在都在一行上，所以更容易看出模式：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(a - min(a, na.rm = TRUE)) / (max(a, na.rm = TRUE) - min(a, na.rm = TRUE))\n(b - min(b, na.rm = TRUE)) / (max(b, na.rm = TRUE) - min(b, na.rm = TRUE))\n(c - min(c, na.rm = TRUE)) / (max(c, na.rm = TRUE) - min(c, na.rm = TRUE))\n(d - min(d, na.rm = TRUE)) / (max(d, na.rm = TRUE) - min(d, na.rm = TRUE))  \n```\n:::\n\n\n为了更清楚一点，我们可以用`█`来替换变化的位:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(█ - min(█, na.rm = TRUE)) / (max(█, na.rm = TRUE) - min(█, na.rm = TRUE))\n```\n:::\n\n\n要将其转换为一个函数，你需要三样东西：\n\n1.  一个名称。这里我们将使用`rescale01`，因为这个函数将向量重新缩放到0和1之间。\n2.  参数。参数是在函数调用中变化的东西，上面的分析告诉我们只有一个，将它命名为`x`，因为这是数值向量的常规名称。\n3.  函数体。函数体是在所有调用中重复的代码。\n\n然后，你按照下面的模板来创建一个函数：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- function(arguments) {\n  body\n}\n```\n:::\n\n\n针对这种情况，其结果是：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrescale01 <- function(x) {\n  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n}\n```\n:::\n\n\n此时，你可能会用几个简单的输入进行测试，以确保你已经正确地捕捉到了逻辑：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrescale01(c(-10, 0, 10))\n#> [1] 0.0 0.5 1.0\nrescale01(c(1, 2, 3, NA, 5))\n#> [1] 0.00 0.25 0.50   NA 1.00\n```\n:::\n\n\n然后你可以将`mutate()`的调用重写为:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> mutate(\n  a = rescale01(a),\n  b = rescale01(b),\n  c = rescale01(c),\n  d = rescale01(d),\n)\n#> # A tibble: 5 × 4\n#>       a     b     c     d\n#>   <dbl> <dbl> <dbl> <dbl>\n#> 1 0.339 1     0.291 0    \n#> 2 0.880 0     0.611 0.557\n#> 3 0     0.530 1     0.752\n#> 4 0.795 0.531 0     1    \n#> 5 1     0.518 0.580 0.394\n```\n:::\n\n\n( @sec-iteration, 你将学习如何使用`across()`来进一步减少重复，这样你只需要写`df |> mutate(across(a:d, rescale01))`就可以了).\n\n### 改进函数\n\n你可能注意到`rescale01()`函数做了一些不必要的工作，们不需要计算两次`min()`和一次`max()`，相反，我们可以用`range()`函数在一步中同时计算出最小值和最大值。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrescale01 <- function(x) {\n  rng <- range(x, na.rm = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n}\n```\n:::\n\n\n或者，你可能试图在包含无穷大值的向量上尝试这个函数：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1:10, Inf)\nrescale01(x)\n#>  [1]   0   0   0   0   0   0   0   0   0   0 NaN\n```\n:::\n\n\n这个结果不是特别有用，所以我们可以让`range()`函数忽略无穷大值：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrescale01 <- function(x) {\n  rng <- range(x, na.rm = TRUE, finite = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n}\n\nrescale01(x)\n#>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667\n#>  [8] 0.7777778 0.8888889 1.0000000       Inf\n```\n:::\n\n\n这些改变说明了函数的一个重要好处：因为我们把重复的代码移到了函数中，所以我们只需要在一个地方做出改变。\n\n### **Mutate** 函数\n\n既然你已经掌握了函数的基本概念，让我们来看一系列的例子。我\n们首先从“mutate”函数开始，也就是那些在`mutate()`和`filter()`内部工作得很好的函数，因为它们返回的输出长度与输入相同。\n\n让我们从`rescale01()`函数的一个简单变体开始。也\n许你想计算Z分数，即将一个向量重新缩放到均值为0，标准差为1：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz_score <- function(x) {\n  (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)\n}\n```\n:::\n\n\n或者，你可能想要封装一个简单的`case_when()`，并给它一个有用的名字。例\n如，这个`clamp()`函数确保向量的所有值都位于最小值和最大值之间：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclamp <- function(x, min, max) {\n  case_when(\n    x < min ~ min,\n    x > max ~ max,\n    .default = x\n  )\n}\n\nclamp(1:10, min = 3, max = 7)\n#>  [1] 3 3 3 4 5 6 7 7 7 7\n```\n:::\n\n\n当然，函数不仅仅需要处理数值变量，你可能需要进行一些重复的字符串操作。比\n如，可能需要将字符串的第一个字符转换为大写：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_upper <- function(x) {\n  str_sub(x, 1, 1) <- str_to_upper(str_sub(x, 1, 1))\n  x\n}\n\nfirst_upper(\"hello\")\n#> [1] \"Hello\"\n```\n:::\n\n\n或者，你可能想在将字符串转换为数字之前，去掉其中的百分号、逗号和美元符号：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://twitter.com/NVlabormarket/status/1571939851922198530\nclean_number <- function(x) {\n  is_pct <- str_detect(x, \"%\")\n  num <- x |> \n    str_remove_all(\"%\") |> \n    str_remove_all(\",\") |> \n    str_remove_all(fixed(\"$\")) |> \n    as.numeric()\n  if_else(is_pct, num / 100, num)\n}\n\nclean_number(\"$12,300\")\n#> [1] 12300\nclean_number(\"45%\")\n#> [1] 0.45\n```\n:::\n\n\n有时，你的函数将专门用于某个数据分析步骤。例\n如，如果你有一堆变量，它们将缺失值记录为997、998或999，你可能想编写一个函数来将这些值替换为`NA`：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfix_na <- function(x) {\n  if_else(x %in% c(997, 998, 999), NA, x)\n}\n```\n:::\n\n\n我们主要关注只接受单个向量的例子，因为我们认为它们是最常见的。但\n是，你的函数没有理由不能接受多个向量输入。\n\n### 汇总函数\n\n另一类重要的向量函数是汇总函数 (summary functions)，这些函数返回一个单一的值，用于`summarize()`函数中。有\n时，这仅仅是设置一两个默认参数的问题：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncommas <- function(x) {\n  str_flatten(x, collapse = \", \", last = \" and \")\n}\n\ncommas(c(\"cat\", \"dog\", \"pigeon\"))\n#> [1] \"cat, dog and pigeon\"\n```\n:::\n\n\n或者，你可能想封装一个简单的计算，比如变异系数，它是通过标准差除以均数来计算的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncv <- function(x, na.rm = FALSE) {\n  sd(x, na.rm = na.rm) / mean(x, na.rm = na.rm)\n}\n\ncv(runif(100, min = 0, max = 50))\n#> [1] 0.5196276\ncv(runif(100, min = 0, max = 500))\n#> [1] 0.5652554\n```\n:::\n\n\n或者你可能只是想通过给它一个易于记忆的名字来让常见的模式更容易被记住：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://twitter.com/gbganalyst/status/1571619641390252033\nn_missing <- function(x) {\n  sum(is.na(x))\n} \n```\n:::\n\n\n你还可以编写具有多个向量输入的函数。例\n如，你可能想要计算平均绝对百分比误差来帮助你比较模型预测值与实际值：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://twitter.com/neilgcurrie/status/1571607727255834625\nmape <- function(actual, predicted) {\n  sum(abs((actual - predicted) / actual)) / length(actual)\n}\n```\n:::\n\n\n::: callout-note\n## RStudio\n\n当你开始编写函数时，有两个RStudio的快捷键非常有用：\n\n-   要查找你已编写的函数的定义，请将光标放在函数名上，然后按F2；\n\n-   要快速跳转到某个函数，请按Ctrl + .\n    打开模糊的文件和函数查找器，并输入你的函数名的前几个字母。你\n    还可以导航到文件、Quarto部分等，这使它成为一个非常方便的导航工具。\n:::\n\n### 练习\n\n1.  练习将以下代码片段转换为函数。考\n    虑每个函数的作用。你\n    怎么称呼它？它\n    需要多少个参数?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    mean(is.na(x))\n    mean(is.na(y))\n    mean(is.na(z))\n    \n    x / sum(x, na.rm = TRUE)\n    y / sum(y, na.rm = TRUE)\n    z / sum(z, na.rm = TRUE)\n    \n    round(x / sum(x, na.rm = TRUE) * 100, 1)\n    round(y / sum(y, na.rm = TRUE) * 100, 1)\n    round(z / sum(z, na.rm = TRUE) * 100, 1)\n    ```\n    :::\n\n\n2.  在`rescale01()`函数的第二个版本中，无穷值保持不变。你\n    能重写`rescale01()`函数，使得`-Inf`被映射到0，而`Inf`被映射到1吗？\n\n3.  给定一个出生日期向量，编写一个函数来计算年龄 (以年为单位)。\n\n4.  编写你自己的函数来计算数值向量的方差和偏度。你\n    可以在维基百科或其他地方查找这些定义。\n\n5.  编写`both_na()`函数，这是一个汇总函数，它接收两个相同长度的向量，并返回两个向量中都有`NA`值的位置数量。\n\n6.  阅读文档来了解以下函数的作用。尽\n    管它们很短，为什么仍然很有用？\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    is_directory <- function(x) {\n      file.info(x)$isdir\n    }\n    is_readable <- function(x) {\n      file.access(x, 4) == 0\n    }\n    ```\n    :::\n\n\n## 数据框函数\n\n向量函数对于从dplyr函数中提取重复代码很有用。但\n是，你通常会重复这些函数本身，特别是在大型管道中。当\n你发现自己多次复制和粘贴多个函数时，你可能会考虑编写一个数据框函数。数\n据框函数的工作方式与dplyr函数类似：它们将数据框作为第一个参数，一些额外的参数说明如何处理它，并返回一个数据框或向量。\n\n为了让你编写一个使用dplyr操作函数的函数，我们将首先向你介绍间接引用的问题以及如何通过使用`{{ }}`来克服它。掌\n握了这些理论之后，我们将向你展示一堆示例来说明你可以用它做什么。\n\n### 间接引用和整齐评估\n\n当你开始编写使用dplyr函数的函数时，你会很快遇到间接引用 (indirection) 的问题。让\n我们用一个非常简单的函数`grouped_mean()`来说明这个问题。这\n个函数的目的是计算按`group_var`分组后`mean_var`的均数：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_mean <- function(df, group_var, mean_var) {\n  df |> \n    group_by(group_var) |> \n    summarize(mean(mean_var))\n}\n```\n:::\n\n\n如果我们尝试使用它，就会得到一个错误:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> grouped_mean(cut, carat)\n#> Error in `group_by()`:\n#> ! Must group by variables found in `.data`.\n#> ✖ Column `group_var` is not found.\n```\n:::\n\n\n为了使问题更清楚，我们可以使用一个合成的数据框:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  mean_var = 1,\n  group_var = \"g\",\n  group = 1,\n  x = 10,\n  y = 100\n)\n\ndf |> grouped_mean(group, x)\n#> # A tibble: 1 × 2\n#>   group_var `mean(mean_var)`\n#>   <chr>                <dbl>\n#> 1 g                        1\ndf |> grouped_mean(group, y)\n#> # A tibble: 1 × 2\n#>   group_var `mean(mean_var)`\n#>   <chr>                <dbl>\n#> 1 g                        1\n```\n:::\n\n\n无论我们如何调用`grouped_mean()`函数，它总是执行`df |> group_by(group_var) |> summarize(mean(mean_var))`，而不是`df |> group_by(group) |> summarize(mean(x))`或`df |> group_by(group) |> summarize(mean(y))`。这\n是一个间接性的问题，它产生的原因是`dplyr`使用整齐评估（tidy evaluation）来允许你在不经过任何特殊处理的情况下引用数据框中的变量名。\n\n整齐评估在95%的情况下都很有用，因为它使你的数据分析非常简洁，因为你永远不需要说明变量来自哪个数据框；从上下文中就可以明显看出。然\n而，整齐评估的缺点出现在我们想要将重复的tidyverse代码封装到函数中时。在\n这里，我们需要一种方式来告诉`group_by()`和`summarize()`不要将`group_var`和`mean_var`当作变量的名字，而是查看它们内部我们实际想要使用的变量。\n\n整齐评估包括一个解决这个问题的方案，叫做“拥抱”（embracing）。拥\n抱一个变量意味着用花括号将它包裹起来，例如`var`变成`{{ var }}`。拥\n抱一个变量告诉`dplyr`使用参数内部存储的值，而不是将参数作为字面变量名。一\n种记住这种操作的方法是想象`{{ }}`是向下看一个隧道，`{{ var }}`会使`dplyr`函数查看`var`内部的内容，而不是寻找一个名为`var`的变量。\n\n因此，为了让`grouped_mean()`函数正常工作，我们需要用`{{ }}`将`group_var`和`mean_var`包围起来。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_mean <- function(df, group_var, mean_var) {\n  df |> \n    group_by({{ group_var }}) |> \n    summarize(mean({{ mean_var }}))\n}\n\ndf |> grouped_mean(group, x)\n#> # A tibble: 1 × 2\n#>   group `mean(x)`\n#>   <dbl>     <dbl>\n#> 1     1        10\n```\n:::\n\n\n成功了!\n\n### 什么时候拥抱? {#sec-embracing}\n\n因此，在编写数据框函数时，主要挑战在于确定哪些参数需要被包含。幸\n运的是，这很简单，因为你可以从文档中找到答案😊。在\n文档中，有两个术语与最常见的整齐评估子类型相对应：\n\n-   数据屏蔽（Data-masking）：这用于如`arrange()`、`filter()`和`summarize()`等函数，它们使用变量进行计算。\n-   整齐选择（Tidy-selection）：这用于如`select()`、`relocate()`和`rename()`等函数，它们用于选择变量。\n\n对于哪些参数使用整齐评估，你的直觉应该足以应对许多常见函数——只需考虑你是否可以计算（例如，`x + 1`）或选择（例如，`a:x`）。\n\n在以下部分，我们将探讨一旦你理解了拥抱的概念后，你可能会编写的各种实用函数。\n\n### 常见用例\n\n如果你在进行初步数据探索时经常执行相同的汇总操作，你可能会考虑将它们封装成一个辅助函数：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary6 <- function(data, var) {\n  data |> summarize(\n    min = min({{ var }}, na.rm = TRUE),\n    mean = mean({{ var }}, na.rm = TRUE),\n    median = median({{ var }}, na.rm = TRUE),\n    max = max({{ var }}, na.rm = TRUE),\n    n = n(),\n    n_miss = sum(is.na({{ var }})),\n    .groups = \"drop\"\n  )\n}\n\ndiamonds |> summary6(carat)\n#> # A tibble: 1 × 6\n#>     min  mean median   max     n n_miss\n#>   <dbl> <dbl>  <dbl> <dbl> <int>  <int>\n#> 1   0.2 0.798    0.7  5.01 53940      0\n```\n:::\n\n\n(每当你在辅助函数中封装`summarize()`时，我们认为将`.groups = \"drop\"`设置为避免消息并将数据保持在未分组状态是一个好习惯。)\n\n这个函数的优点在于，因为它封装了`summarize()`，所以你可以对分组数据使用它：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  group_by(cut) |> \n  summary6(carat)\n#> # A tibble: 5 × 7\n#>   cut         min  mean median   max     n n_miss\n#>   <ord>     <dbl> <dbl>  <dbl> <dbl> <int>  <int>\n#> 1 Fair       0.22 1.05    1     5.01  1610      0\n#> 2 Good       0.23 0.849   0.82  3.01  4906      0\n#> 3 Very Good  0.2  0.806   0.71  4    12082      0\n#> 4 Premium    0.2  0.892   0.86  4.01 13791      0\n#> 5 Ideal      0.2  0.703   0.54  3.5  21551      0\n```\n:::\n\n\n此外，由于传递给`summarize`的参数也使用数据屏蔽，这意味着`summary6()`函数中的`var`参数也使用数据屏蔽。这\n意味着你还可以对计算后的变量进行汇总：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  group_by(cut) |> \n  summary6(log10(carat))\n#> # A tibble: 5 × 7\n#>   cut          min    mean  median   max     n n_miss\n#>   <ord>      <dbl>   <dbl>   <dbl> <dbl> <int>  <int>\n#> 1 Fair      -0.658 -0.0273  0      0.700  1610      0\n#> 2 Good      -0.638 -0.133  -0.0862 0.479  4906      0\n#> 3 Very Good -0.699 -0.164  -0.149  0.602 12082      0\n#> 4 Premium   -0.699 -0.125  -0.0655 0.603 13791      0\n#> 5 Ideal     -0.699 -0.225  -0.268  0.544 21551      0\n```\n:::\n\n\n要对多个变量进行汇总，你需要等到 @sec-across ，在那里你将学习如何使用`across()`函数。\n\n另一个流行的`summarize()`辅助函数是`count()`的一个版本，它还会计算比例：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://twitter.com/Diabb6/status/1571635146658402309\ncount_prop <- function(df, var, sort = FALSE) {\n  df |>\n    count({{ var }}, sort = sort) |>\n    mutate(prop = n / sum(n))\n}\n\ndiamonds |> count_prop(clarity)\n#> # A tibble: 8 × 3\n#>   clarity     n   prop\n#>   <ord>   <int>  <dbl>\n#> 1 I1        741 0.0137\n#> 2 SI2      9194 0.170 \n#> 3 SI1     13065 0.242 \n#> 4 VS2     12258 0.227 \n#> 5 VS1      8171 0.151 \n#> 6 VVS2     5066 0.0939\n#> # ℹ 2 more rows\n```\n:::\n\n\n这个函数有三个参数：`df`、`var` 和 `sort`，其中只有 `var` 需要被包含在括号中，因为它被传递给 count() 函数，该函数对所有变量使用数据屏蔽。请\n注意，我们为 `sort` 设置了一个默认值，因此如果用户不提供自己的值，它将默认为 `FALSE`。\n\n或者，你可能想为数据的子集找到一个变量的已排序的唯一值，而不是提供一个变量和一个值来进行筛选，我们将允许用户提供一个条件。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_where <- function(df, condition, var) {\n  df |> \n    filter({{ condition }}) |> \n    distinct({{ var }}) |> \n    arrange({{ var }})\n}\n\n# Find all the destinations in December\nflights |> unique_where(month == 12, dest)\n#> # A tibble: 96 × 1\n#>   dest \n#>   <chr>\n#> 1 ABQ  \n#> 2 ALB  \n#> 3 ATL  \n#> 4 AUS  \n#> 5 AVL  \n#> 6 BDL  \n#> # ℹ 90 more rows\n```\n:::\n\n\n在这里，我们将 `condition` 放在括号中，因为它被传递给 `filter()` 函数；而 `var` 被放在括号中，因为它被传递给 `distinct()` 和 `arrange()` 函数。\n\n我们已经使所有这些示例都将数据框作为第一个参数，但如果你反复使用相同的数据，那么将数据硬编码到函数中可能是有意义的。例\n如，下面的函数总是与 flights 数据集一起工作，并且总是选择 `time_hour`、`carrier` 和 `flight`，因为它们构成了复合主键，使你能够标识一行。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_flights <- function(rows, cols) {\n  flights |> \n    filter({{ rows }}) |> \n    select(time_hour, carrier, flight, {{ cols }})\n}\n```\n:::\n\n\n### 数据屏蔽与整齐选择\n\n有时你想在使用数据屏蔽的函数内部选择变量。例\n如，你想编写一个名为`count_missing()`的函数，用于计算行中缺失观测值的数量。你\n可能会尝试编写如下内容：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_missing <- function(df, group_vars, x_var) {\n  df |> \n    group_by({{ group_vars }}) |> \n    summarize(\n      n_miss = sum(is.na({{ x_var }})),\n      .groups = \"drop\"\n    )\n}\n\nflights |> \n  count_missing(c(year, month, day), dep_time)\n#> Error in `group_by()`:\n#> ℹ In argument: `c(year, month, day)`.\n#> Caused by error:\n#> ! `c(year, month, day)` must be size 336776 or 1, not 1010328.\n```\n:::\n\n\n这不起作用，因为`group_by()`使用的是数据屏蔽，而不是整齐选择。我\n们可以通过使用方便的`pick()`函数来绕过这个问题，该函数允许你在数据屏蔽函数内部使用整齐选择：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_missing <- function(df, group_vars, x_var) {\n  df |> \n    group_by(pick({{ group_vars }})) |> \n    summarize(\n      n_miss = sum(is.na({{ x_var }})),\n      .groups = \"drop\"\n  )\n}\n\nflights |> \n  count_missing(c(year, month, day), dep_time)\n#> # A tibble: 365 × 4\n#>    year month   day n_miss\n#>   <int> <int> <int>  <int>\n#> 1  2013     1     1      4\n#> 2  2013     1     2      8\n#> 3  2013     1     3     10\n#> 4  2013     1     4      6\n#> 5  2013     1     5      3\n#> 6  2013     1     6      1\n#> # ℹ 359 more rows\n```\n:::\n\n\n`pick()`的另一个方便的用途是制作二维计数表。在\n这里，我们使用行和列中的所有变量进行计数，然后使用`pivot_wider()`将计数重新排列成网格形式：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://twitter.com/pollicipes/status/1571606508944719876\ncount_wide <- function(data, rows, cols) {\n  data |> \n    count(pick(c({{ rows }}, {{ cols }}))) |> \n    pivot_wider(\n      names_from = {{ cols }}, \n      values_from = n,\n      names_sort = TRUE,\n      values_fill = 0\n    )\n}\n\ndiamonds |> count_wide(c(clarity, color), cut)\n#> # A tibble: 56 × 7\n#>   clarity color  Fair  Good `Very Good` Premium Ideal\n#>   <ord>   <ord> <int> <int>       <int>   <int> <int>\n#> 1 I1      D         4     8           5      12    13\n#> 2 I1      E         9    23          22      30    18\n#> 3 I1      F        35    19          13      34    42\n#> 4 I1      G        53    19          16      46    16\n#> 5 I1      H        52    14          12      46    38\n#> 6 I1      I        34     9           8      24    17\n#> # ℹ 50 more rows\n```\n:::\n\n\n虽然我们的示例主要关注了 dplyr，但整齐评估也是 tidyr 的基础。如\n果你查看`pivot_wider()`的文档，你会看到`names_from`参数使用了整齐选择。\n\n### 练习\n\n1.  使用来自nycflights13的数据集，编写如下函数:\n\n    1.  找到所有被取消的航班 (即到达时间为空值`is.na(arr_time)`) 或延误超过一个小时的航班。\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        flights |> filter_severe()\n        ```\n        :::\n\n\n    2.  计算被取消的航班数量以及延误超过一个小时的航班数量。\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        flights |> group_by(dest) |> summarize_severe()\n        ```\n        :::\n\n\n    3.  找到所有被取消或延误超过用户指定小时数的航班：\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        flights |> filter_severe(hours = 2)\n        ```\n        :::\n\n\n    4.  根据用户提供的变量，汇总天气数据以计算最小值、平均值和最大值：\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        weather |> summarize_weather(temp)\n        ```\n        :::\n\n\n    5.  将用户提供的使用时钟时间 (例如，出发时间`dep_time`、到达时间`arr_time`等) 的变量转换为十进制时间 (即小时 + (分钟 / 60))。\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        flights |> standardize_time(sched_dep_time)\n        ```\n        :::\n\n\n2.  对于以下每个函数，列出所有使用整齐评估的参数，并描述它们是否使用数据屏蔽或整齐选择: `distinct()`, `count()`, `group_by()`, `rename_with()`, `slice_min()`, `slice_sample()`。\n\n3.  将以下函数泛化，以便你可以提供任意数量的变量进行计数。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    count_prop <- function(df, var, sort = FALSE) {\n      df |>\n        count({{ var }}, sort = sort) |>\n        mutate(prop = n / sum(n))\n    }\n    ```\n    :::\n\n\n## 绘图函数\n\n有时你可能希望返回一个图，而不是返回一个数据框。幸\n运的是，你可以使用ggplot2中的相同技术，因为`aes()`是一个数据屏蔽函数。例\n如，假设你要制作很多直方图：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  ggplot(aes(x = carat)) +\n  geom_histogram(binwidth = 0.1)\n\ndiamonds |> \n  ggplot(aes(x = carat)) +\n  geom_histogram(binwidth = 0.05)\n```\n:::\n\n\n如果你能将这个封装成一个直方图函数，那不是很好吗？一\n旦你知道`aes()`是一个数据屏蔽函数，并且你需要接受这个事实，那么这易如反掌。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhistogram <- function(df, var, binwidth = NULL) {\n  df |> \n    ggplot(aes(x = {{ var }})) + \n    geom_histogram(binwidth = binwidth)\n}\n\ndiamonds |> histogram(carat, 0.1)\n```\n\n::: {.cell-output-display}\n![](functions_files/figure-html/unnamed-chunk-44-1.png){fig-alt='A histogram of carats of diamonds, ranging from 0 to 5, showing a unimodal,\nright-skewed distribution with a peak between 0 to 1 carats.' width=576}\n:::\n:::\n\n\n请注意，`histogram()`返回一个ggplot2图，这意味着如果你想要的话，你仍然可以在上面添加额外的组件。只\n是记得将`|>`切换为`+`：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  histogram(carat, 0.1) +\n  labs(x = \"Size (in carats)\", y = \"Number of diamonds\")\n```\n:::\n\n\n### 更多变量\n\n向组合中添加更多变量非常直接。例\n如，你可能想要通过叠加一条平滑线和一条直线来轻松查看数据集是否为线性：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://twitter.com/tyler_js_smith/status/1574377116988104704\nlinearity_check <- function(df, x, y) {\n  df |>\n    ggplot(aes(x = {{ x }}, y = {{ y }})) +\n    geom_point() +\n    geom_smooth(method = \"loess\", formula = y ~ x, color = \"red\", se = FALSE) +\n    geom_smooth(method = \"lm\", formula = y ~ x, color = \"blue\", se = FALSE) \n}\n\nstarwars |> \n  filter(mass < 1000) |> \n  linearity_check(mass, height)\n```\n\n::: {.cell-output-display}\n![](functions_files/figure-html/unnamed-chunk-46-1.png){fig-alt='Scatterplot of height vs. mass of StarWars characters showing a positive\nrelationship. A smooth curve of the relationship is plotted in red, and\nthe best fit line is ploted in blue.' width=576}\n:::\n:::\n\n\n或者，对于大型数据集的过度绘图，你可能想要使用彩色散点图作为替代方案：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://twitter.com/ppaxisa/status/1574398423175921665\nhex_plot <- function(df, x, y, z, bins = 20, fun = \"mean\") {\n  df |> \n    ggplot(aes(x = {{ x }}, y = {{ y }}, z = {{ z }})) + \n    stat_summary_hex(\n      aes(color = after_scale(fill)), # make border same color as fill\n      bins = bins, \n      fun = fun,\n    )\n}\n\ndiamonds |> hex_plot(carat, price, depth)\n```\n\n::: {.cell-output-display}\n![](functions_files/figure-html/unnamed-chunk-47-1.png){fig-alt='Hex plot of price vs. carat of diamonds showing a positive relationship.\nThere are more diamonds that are less than 2 carats than more than 2 carats.' width=576}\n:::\n:::\n\n\n### 与tidyverse其他组件结合\n\n一些最有用的辅助工具将数据处理与ggplot2结合使用。例\n如，如果你想要制作一个垂直条形图，并使用`fct_infreq()`自动按频数顺序对条形进行排序。由\n于条形图是垂直的，因此我们还需要反转通常的顺序，以便最高的值位于顶部：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsorted_bars <- function(df, var) {\n  df |> \n    mutate({{ var }} := fct_rev(fct_infreq({{ var }})))  |>\n    ggplot(aes(y = {{ var }})) +\n    geom_bar()\n}\n\ndiamonds |> sorted_bars(clarity)\n```\n\n::: {.cell-output-display}\n![](functions_files/figure-html/unnamed-chunk-48-1.png){fig-alt='Bar plot of clarify of diamonds, where clarity is on the y-axis and counts\nare on the x-axis, and the bars are ordered in order of frequency: SI1,\nVS2, SI2, VS1, VVS2, VVS1, IF, I1.' width=576}\n:::\n:::\n\n\n在这里，我们必须使用一个新的操作符 `:=`（通常被称为“海象操作符”），因为我们基于用户提供的数据生成变量名。变\n量名放在 `=` 的左侧，但 R 的语法不允许除了单个字面名称之外的任何东西放在 `=` 的左侧。为\n了解决这个问题，我们使用特殊操作符 `:=`，tidy 评估将其视为与 `=` 完全相同。\n\n或者，你可能想要轻松地只为数据的一个子集绘制条形图：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconditional_bars <- function(df, condition, var) {\n  df |> \n    filter({{ condition }}) |> \n    ggplot(aes(x = {{ var }})) + \n    geom_bar()\n}\n\ndiamonds |> conditional_bars(cut == \"Good\", clarity)\n```\n\n::: {.cell-output-display}\n![](functions_files/figure-html/unnamed-chunk-49-1.png){fig-alt='Bar plot of clarity of diamonds. The most common is SI1, then SI2, then\nVS2, then VS1, then VVS2, then VVS1, then I1, then lastly IF.' width=576}\n:::\n:::\n\n\n你也可以发挥创造力，以其他方式显示数据汇总。你\n可以在<https://gist.github.com/GShotwell/b19ef520b6d56f61a830fabb3454965b>找到一个很酷的应用；它使用坐标轴标签来显示最高值。随\n着你对ggplot2的了解越来越多，你的函数功能将会继续增强。\n\n最后，我们将用一个更复杂的案例来结束：标记你创建的图。\n\n### 标记\n\n还记得我们之前展示的直方图函数吗？\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhistogram <- function(df, var, binwidth = NULL) {\n  df |> \n    ggplot(aes(x = {{ var }})) + \n    geom_histogram(binwidth = binwidth)\n}\n```\n:::\n\n\n如果我们能够用所使用的变量和组距来标记输出，那不是很好吗？要\n做到这一点，我们将不得不深入了解整齐评估，并使用我们尚未提及的rlang包中的一个函数。r\nlang是一个底层包，tidyverse中的几乎每个其他包都使用它，因为它实现了整齐评估 (以及其他许多有用的工具)。\n\n为了解决标记问题，我们可以使用`rlang::englue()`（注意：实际函数名应该是`rlang::glue()`）。它\n的工作原理类似于`str_glue()`，所以任何被大括号`{}`包裹的值都会被插入到字符串中。但\n它也理解`{{}}`，会自动插入适当的变量名：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhistogram <- function(df, var, binwidth) {\n  label <- rlang::englue(\"A histogram of {{var}} with binwidth {binwidth}\")\n  \n  df |> \n    ggplot(aes(x = {{ var }})) + \n    geom_histogram(binwidth = binwidth) + \n    labs(title = label)\n}\n\ndiamonds |> histogram(carat, 0.1)\n```\n\n::: {.cell-output-display}\n![](functions_files/figure-html/unnamed-chunk-51-1.png){fig-alt='Histogram of carats of diamonds, ranging from 0 to 5. The distribution is\nunimodal and right skewed with a peak between 0 to 1 carats.' width=576}\n:::\n:::\n\n\n你可以在ggplot2图的任何需要提供字符串的地方使用相同的方法。\n\n### 练习\n\n通过逐步实施以下每个步骤，构建一个功能丰富的绘图函数：\n\n1.  给定数据集和`x`、`y`变量，绘制散点图。\n2.  添加最佳拟合线（即没有标准误差的线性模型）。\n3.  添加标题。\n\n## 风格\n\nR不关心你的函数或参数叫什么，但这些名称对人们来说非常重要。理\n想情况下，你的函数名应该简短，但又能清楚地表达函数的功能。这\n很难！但\n清晰比简短更重要，因为 RStudio 的自动补全功能使得输入长名称变得相对容易。\n\n一般来说，函数名应该是动词，参数应该是名词。但\n也有一些例外：如果函数计算的是一个非常知名的名词 (比如`mean()`比`compute_mean()`更好)，或者访问对象的某个属性(比如`coef()`比`get_coefficients()`更好)，那么使用名词也是可以的。请\n根据你的最佳判断来命名，如果后来发现更好的名称，不要担心重命名函数。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Too short\nf()\n\n# Not a verb, or descriptive\nmy_awesome_function()\n\n# Long, but clear\nimpute_missing()\ncollapse_years()\n```\n:::\n\n\nR 也不关心你在函数中使用空格的方式，但未来的读者会关心。请\n继续遵循\\@sec-workflow-style 中的规则。此\n外，`function()`后面应该始终跟着花括号（`{}`），并且其内容应该额外缩进两个空格。这\n样，通过浏览左侧边距，可以更容易地看到代码中的层次结构。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Missing extra two spaces\ndensity <- function(color, facets, binwidth = 0.1) {\ndiamonds |> \n  ggplot(aes(x = carat, y = after_stat(density), color = {{ color }})) +\n  geom_freqpoly(binwidth = binwidth) +\n  facet_wrap(vars({{ facets }}))\n}\n\n# Pipe indented incorrectly\ndensity <- function(color, facets, binwidth = 0.1) {\n  diamonds |> \n  ggplot(aes(x = carat, y = after_stat(density), color = {{ color }})) +\n  geom_freqpoly(binwidth = binwidth) +\n  facet_wrap(vars({{ facets }}))\n}\n```\n:::\n\n\n正如你所看到的，我们建议在`{{ }}`内部添加额外的空格。这\n使得很容易看出异常的发生。\n\n### 练习\n\n1.  阅读下面两个函数的源代码，弄清楚它们的作用，然后集思广益想出更好的名字。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    f1 <- function(string, prefix) {\n      str_sub(string, 1, str_length(prefix)) == prefix\n    }\n    \n    f3 <- function(x, y) {\n      rep(y, length.out = length(x))\n    }\n    ```\n    :::\n\n\n2.  拿一个你最近写的函数，花5分钟头脑风暴为它和它的参数取一个更好的名字。\n\n3.  讨论一下为什么`norm_r()`,`norm_d()`等会比`rnorm()`,`dnorm()`更好，并同时讨论相反的观点。然\n    后，我们来看看如何使这些名称更加清晰。\n\n## 小结\n\n在本章中，你学习了如何为三种有用的场景编写函数：创建向量、创建数据框或创建图形。在\n此过程中，你看到了许多示例，希望这些示例能够激发你的创造力，并为你提供一些关于函数如何帮助你分析代码的想法。\n\n我们只向你展示了函数的基础知识，还有很多内容需要学习。以\n下是一些深入学习的地方：\n\n-   要了解更多关于使用整齐评估进行编程的信息，请参阅 [programming with dplyr](https://dplyr.tidyverse.org/articles/programming.html) 和 [programming with tidyr](https://tidyr.tidyverse.org/articles/programming.html) 的有用方法，并在 [What is data-masking and why do I need {{?](https://rlang.r-lib.org/reference/topic-data-mask.html) 中了解更多关于理论的知识。\n-   要了解更多关于减少ggplot2代码中重复性的信息，请阅读ggplot2书籍中的[Programming with ggplot2](https://ggplot2-book.org/programming.html){.uri} 章节。\n-   有关函数风格的更多建议，请参阅 [tidyverse style guide](https://style.tidyverse.org/functions.html){.uri}。\n\n在下一章中，我们将深入探讨迭代，它为你提供了更多减少代码重复性的工具。\n",
    "supporting": [
      "functions_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}