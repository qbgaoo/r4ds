{
  "hash": "ee022711752ed492e4cc3c546a249a58",
  "result": {
    "engine": "knitr",
    "markdown": "# Quarto 格式 {#sec-quarto-formats}\n\n\n::: {.cell}\n\n:::\n\n\n## 引言\n\n到目前为止，你已经看到Quarto用于生成HTML文档。本\n章简要概述了你可以使用Quarto生成其他多种类型的输出。\n\n设置文档的输出有两种方式：\n\n1.  永久地，修改YAML头部信息:\n\n    ``` yaml\n    title: \"Diamond sizes\"\n    format: html\n    ```\n\n2.  暂时地，手动调用 `quarto::quarto_render()`:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    quarto::quarto_render(\"diamond-sizes.qmd\", output_format = \"docx\")\n    ```\n    :::\n\n\n    如果你希望以编程方式生成多种类型的输出，这是很有用的，因为`output_format`参数也可以是一个值的列表。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    quarto::quarto_render(\"diamond-sizes.qmd\", output_format = c(\"docx\", \"pdf\"))\n    ```\n    :::\n\n\n## 输出选项\n\nQuarto 提供了广泛的输出格式选择。您\n可以在<https://quarto.org/docs/output-formats/all-formats.html>找到完整的列表。许\n多格式共享一些输出选项（例如`toc: true` 用于包含目录），但其他选项是特定于某种格式的（例如，`code-fold: true` 将代码块折叠成一个`<details>`标签用于 HTML 输出，以便用户按需显示，这在 PDF 或 Word 文档中不适用）。\n\n要覆盖默认选项，你需要使用扩展的`format`字段。例\n如，如果你想呈现一个带有浮动目录的 `html`，你应该使用：\n\n``` yaml\nformat:\n  html:\n    toc: true\n    toc_float: true\n```\n\n你甚至可以通过提供一个格式列表来呈现多个输出:\n\n``` yaml\nformat:\n  html:\n    toc: true\n    toc_float: true\n  pdf: default\n  docx: default\n```\n\n如果不想覆盖任何默认选项，请注意特殊的语法（`pdf: default`）\n\n要在一个文档的 YAML 中指定的所有格式上进行渲染，您可以使用`output_format = \"all\"`。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\"diamond-sizes.qmd\", output_format = \"all\")\n```\n:::\n\n\n## 文档\n\n前一章主要介绍了默认的 `html` 输出。基\n于这一主题，有几种基本的变体可以生成不同类型的文档。例\n如：\n\nThe previous chapter focused on the default `html` output.\nThere are several basic variations on that theme, generating different types of documents.\nFor example:\n\n-   `pdf` 使用 LaTeX（一个开源的文档排版系统）生成 PDF 文档，你需要先安装它。如果您尚未安装，RStudio 会提示你。\n-   `docx` 用于生成 Microsoft Word (`.docx`) 文档。\n-   `odt` 用于生成 OpenDocument Text (`.odt`) 文档。\n-   `rtf` 用于生成 Rich Text Format (`.rtf`) 文档。\n-   `gfm` 用于生成 GitHub Flavored Markdown (`.md`) 文档。\n-   `ipynb` 用于生成 Jupyter Notebooks (`.ipynb`)。\n\n请记住，当你生成文档以与决策者共享时，您可以通过在文档的 YAML 中设置全局选项来关闭代码的默认显示：\n\n``` yaml\nexecute:\n  echo: false\n```\n\n对于 `html`文档，另一个选项是默认隐藏代码块，但可以通过点击来显示它们：\n\n``` yaml\nformat:\n  html:\n    code: true\n```\n\n## 演示文稿\n\n你还可以使用 Quarto 来制作演示文稿。虽\n然与 Keynote 或 PowerPoint 这样的工具相比，你在视觉控制上会受到一些限制，但自动将 R 代码的结果插入到演示文稿中可以节省大量时间。制\n作演示文稿的方法是将您的内容划分为幻灯片，每个二级（`##`）标题都会开始一个新的幻灯片。此\n外，一级（`#`）标题表示带有标题幻灯片的新部分的开始，该标题幻灯片默认居中显示在屏幕中央。\n\nQuarto支持多种支持多种演示文稿格式，包括:\n\n1.  `revealjs` - 使用revealjs的HTML 演示文稿\n\n2.  `pptx` - PowerPoint演示文稿\n\n3.  `beamer` - 使用 LaTeX Beamer 的 PDF 演示文稿\n\n您可以在[https://quarto.org/docs/presentations](https://quarto.org/docs/presentations/)阅读有关使用Quarto创建演示文稿的更多信息。\n\n## 交互性\n\n与任何 HTML 文档一样，使用 Quarto 创建的 HTML 文档也可以包含交互式组件。在\n这里，我们介绍两种在 Quarto 文档中包含交互性的选项：htmlwidgets 和 Shiny。\n\n### htmlwidgets\n\nHTML 是一种交互式格式，你可以利用 htmlwidgets 的交互性，htmlwidgets 是 R 函数，用于生成交互式的 HTML 可视化。例\n如，请看下面的 leaflet 地图。如\n果在网页上查看此页面，你可以拖动地图、放大缩小等。显\n然，你无法在书中这样做，所以 Quarto 会自动为你插入一个静态的屏幕截图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nleaflet() |>\n  setView(174.764, -36.877, zoom = 16) |> \n  addTiles() |>\n  addMarkers(174.764, -36.877, popup = \"Maungawhau\") \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-ac96cb3ee4656e2e9ec3\" style=\"width:100%;height:433px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ac96cb3ee4656e2e9ec3\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"setView\":[[-36.877,174.764],16,[]],\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[-36.877,174.764,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"Maungawhau\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[-36.877,-36.877],\"lng\":[174.764,174.764]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nhtmlwidgets 的好处是，你不需要了解任何关于 HTML 或 JavaScript 的知识就可以使用它们。所\n有的细节都被封装在包内部，所以你不需要担心。\n\n有很多包都提供了htmlwidgets，包括：\n\n-   [dygraphs](https://rstudio.github.io/dygraphs) 用于交互式时间序列可视化。\n-   [DT](https://rstudio.github.io/DT/) 用于交互式表格。\n-   [threejs](https://bwlewis.github.io/rthreejs) 用于交互式 3D 绘图。\n-   [threejs](https://bwlewis.github.io/rthreejs) 用于图形（如流程图和简单的节点链接图）。\n\n要了解更多关于 htmlwidgets 的信息，并查看提供它们的包的完整列表，请访问[https://www.htmlwidgets.org](https://www.htmlwidgets.org./) 。\n\n### Shiny\n\nhtmlwidgets 提供客户端交互性，所有的交互都发生在浏览器中，与 R 无关。当\n然这很好，因为你可以分发 HTML 文件而无需与 R 建立任何连接。然\n而，这从根本上限制了你可以使用 HTML 和 JavaScript 实现的功能。另\n一种方法是使用 shiny，这是一个允许你使用 R 代码而不是 JavaScript 创建交互性的包。\n\n``` yaml\ntitle: \"Shiny Web App\"\nformat: html\nserver: shiny\n```\n\n然后你可以使用\"input\"函数向文档中添加交互式组件:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\ntextInput(\"name\", \"What is your name?\")\nnumericInput(\"age\", \"How old are you?\", NA, min = 0, max = 150)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](quarto/quarto-shiny.png){fig-alt='Two input boxes on top of each other. Top one says, \"What is your\nname?\", the bottom, \"How old are you?\".' width=650}\n:::\n:::\n\n\n此外，你还需要一个带有 chunk 选项`context: server`的代码块，其中包含需要在 Shiny 服务器上运行的代码。\n\n然后，您可以使用`input$name`和`input$age`来引用这些值，并且当这些值发生变化时，使用它们的代码将自动重新运行。\n\n由于 Shiny 交互是在服务器端发生的，所以我们无法在这里向你展示一个实时的 Shiny 应用。这\n意味着你可以在不了解 JavaScript 的情况下编写交互式应用，但是你需要一个服务器来运行它们。这\n引入了一个逻辑问题：Shiny 应用需要一个 Shiny 服务器才能在线运行。当\n你在自己的计算机上运行 Shiny 应用时，Shiny 会自动为你设置一个 Shiny 服务器，但如果你想在线发布这种交互性，则需要一个面向公众的 Shiny 服务器。这\n是 Shiny 的基本权衡：你可以在 Shiny 文档中执行任何可以在 R 中执行的操作，但它需要有人运行 R。\n\n要深入了解 Shiny，我们建议您阅读 Hadley Wickham 的《精通 Shiny》，网址为：[https://mastering-shiny.org](https://mastering-shiny.org./)。\n\n## 网站和书籍\n\n通过一些额外的基础设施，您可以使用 Quarto 生成完整的网站或书籍：\n\n-   将您的`.qmd`文件放在一个单独的目录中。`i`\n    `ndex.qmd`将成为主页。\n\n-   添加一个名为`_quarto.yml`的 YAML 文件，该文件为网站提供导航。在\n    此文件中，将项目类型设置为 `book`（书籍）或 `website`（网站），例如：\n\n    ``` yaml\n    project:\n      type: book\n    ```\n\n例如，以下`_quarto.yml`文件从三个源文件创建了一个网站：`index.qmd`（主页）、`viridis-colors.qmd`和`terrain-colors.qmd`。\n\n\n::: {.cell}\n\n```\nproject:\n  type: website\n\nwebsite:\n  title: \"A website on color scales\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: viridis-colors.qmd\n        text: Viridis colors\n      - href: terrain-colors.qmd\n        text: Terrain colors\n```\n:::\n\n\n对于书籍，您需要的`_quarto.yml`文件的结构非常相似。以\n下示例展示了如何创建一个包含四个章节的书籍，并将其渲染为三种不同的输出格式（`html`、`pdf` 和 `epub`）。同\n样地，源文件是`.qmd`文件。\n\n\n::: {.cell}\n\n```\nproject:\n  type: book\n\nbook:\n  title: \"A book on color scales\"\n  author: \"Jane Coloriste\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - viridis-colors.qmd\n    - terrain-colors.qmd\n\nformat:\n  html:\n    theme: cosmo\n  pdf: default\n  epub: default\n```\n:::\n\n\n我们建议您为网站和书籍使用 RStudio 项目。基\n于`_quarto.yml`文件，RStudio 将识别您正在处理的项目类型，并在 IDE 中添加一个“Build”选项卡，您可以使用它来渲染和预览您的网站和书籍。同\n时，你也可以使用`quarto::quarto_render()`来渲染网站和书籍。\n\n有关 Quarto 网站的更多信息，请访问<https://quarto.org/docs/websites> ；有关书籍的更多信息，请访问 [https://quarto.org/docs/books](https://quarto.org/docs/books%E3%80%82)。\n\n## 其他格式\n\nQuarto提供了更多的输出格式:\n\n-   你可以使用Quarto 期刊模板撰写期刊文章: <https://quarto.org/docs/journals/templates.html>。\n\n-   你可以将 Quarto 文档输出为 Jupyter 笔记本，选项 `format: ipynb`: <https://quarto.org/docs/reference/formats/ipynb.html>。\n\n在 <https://quarto.org/docs/output-formats/all-formats.html> 上你可以查看更多输出格式的列表。\n\n## 小结\n\n在本章中，我们为你展示了如何使用 Quarto 以各种形式展示你的成果，从静态和交互式文档到演示文稿，再到网站和书籍。\n\n为了更深入地了解如何以这些不同形式有效地交流，我们推荐以下资源：\n\n-   要提高你的演讲技巧，请尝试阅读《[Presentation Patterns](https://presentationpatterns.com/)》一书，作者是 Neal Ford、Matthew McCollough 和 Nathaniel Schutta。该书提供了一系列有效的模式（低水平和高水平），你可以应用这些模式来改进你的演讲。\n-   如果您进行学术演讲，您可能会喜欢 [Leek group guide to giving talks](https://github.com/jtleek/talkguide)。\n-   我们还没有亲自学习过，但我们听说过 Matt McGarrity 的公共演讲在线课程评价很好：[https://www.coursera.org/learn/public-speaking](https://www.coursera.org/learn/public-speaking%E3%80%82)。\n-   如果你正在创建许多仪表板，请务必阅读 Stephen Few 的《[Information Dashboard Design: The Effective Visual Communication of Data](https://www.amazon.com/Information-Dashboard-Design-Effective-Communication/dp/0596100167)》一书。它将帮助你创建真正有用的仪表板，而不仅仅是看起来漂亮。\n-   有效地交流你的想法通常受益于一些图形设计知识。Robin Williams 的《[The Non-Designer's Design Book](https://www.amazon.com/Non-Designers-Design-Book-4th/dp/0133966151)》是一个很好的起点。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}