{
  "hash": "221180958ec8d2a9ac158be69c9772ff",
  "result": {
    "engine": "knitr",
    "markdown": "# 引言 {#sec-intro .unnumbered}\n\n\n::: {.cell}\n\n:::\n\n\n数据科学是一门激动人心的学科，它允许你将原始数据转化为理解、洞察力和知识。《\nR数据科学》的目标是帮助你学习R中最重要的工具，这些工具将使你能够高效且可复现地进行数据科学工作，并在这个过程中享受乐趣😊。读\n完这本书后，你将拥有运用R最佳部分来应对各种数据科学挑战的工具。\n\n## 你将学到什么\n\n数据科学范围广阔，不可能通过读一本书就完全掌握。本\n书的目的旨在为你学习R这个重要工具提供坚实和足够的基础知识，以便在必要时可以找到进一步学习的资源。典\n型的数据科学项目包含的步骤大致如 @fig-ds-diagram 所示。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![在数据科学过程模型中，首先进行数据导入和整理。接下来，通过迭代循环的转换、\n可视化和建模来理解数据。最后，通过与他人交流结果来完成整个过程。\n](diagrams/data-science/base.png){#fig-ds-diagram fig-alt='一个展示数据科学周期的图形：导入 -> 整齐 -> 理解（包括转换 -> 可视化 ->\n建模的循环）-> 交流。交流贯穿于各个过程。\n' width=535}\n:::\n:::\n\n\n首先，必须将数据导入 (**import** ) R中。\n这通常意味着你需要从文件、数据库或Web应用程序接口 (API) 中获取数据，并将其加载到R的一个数据框中。如\n果无法将数据导入R，就无法在其上开展数据科学工作！\n\n一旦导入了数据，还需对其进行整齐 (**tidy**)。整\n齐数据意味着以统一的形式存储数据，使数据集的语义与其存储方式相匹配。简\n而言之，当数据整齐时，每一列都是一个变量，每一行都是一个观测值。整\n齐的数据很重要，因为结构一致使你可以将精力集中在回答有关数据的问题上，而不是努力将数据转换成适合不同功能的正确形式。\n\n当数据整齐完成后，通常下一步是数据转换 (**transform**)。转\n换包括缩小感兴趣的观察值的范围(如一个城市的所有人或去年的所有数据)、根据现有变量创建新变量(如根据距离和时间计算速度)，以及计算一组数据的统计量(如计数或平均值)。整\n齐和转换统称为数据清洗 (wrangling) 因为将数据以自然的形式处理通常感觉像是一场战斗!\n\n当有了由所需变量组成的整齐数据后，就可利用两个主要的知识生成引擎:可视化和建模。它\n们的优缺点互补，因此任何数据分析都可反复利用它们。\n\n可视化 (**Visualization**) 是一项基本的人类活动。一\n个好的可视化会显示你没有预料到的东西，或者提出关于数据的新问题。一\n个好的可视化还可能暗示你问错了问题，或者你需要收集不同的数据。可\n视化可能会让你感到惊讶，但它们的扩展性并不强，因为它们需要人来解释。\n\n建模 (**Models**) 是对可视化的补充。一\n旦你的问题足够精准，你就可以用一个模型来回答。模\n型基本上是数学或计算工具，因此它们通常具有良好的可扩展性。即\n使模型扩展性不佳，买更多的电脑通常比买更多的大脑要便宜！但\n每个模型都需要做假设，而且就其本质而言，模型不能质疑自己的假设。这\n意味着一个模型不能从根本上给你带来惊喜。\n\n数据科学的最后一步是交流 (**communication**)，这是每个数据分析项目中绝对重要的步骤。除\n非你能够与他人交流你的结果，否则无论模型和可视化如何帮助你很好地理解数据都无足轻重。\n\n围绕所有这些工具的是编程 (**programming**)。编\n程是一种综合工具，在数据科学项目的几乎每个部分都要用到。要\n成为一名成功的数据科学家，你不需要成为一名专业的程序员，但是学习更多的编程知识是值得的，因为成为一名好的程序员可以让你解决常规问题自动化，并使解决新问题变得更轻松。\n\n你将在每个数据科学项目中用到这些工具，但对大多数项目来说这些工具还不够。这\n里有一个大致的80/20规则：你可以使用你在本书中学到的工具来解决项目中大约80%的问题，但剩下的20%需要其他工具来处理。在\n本书中我们将为你提供了解更多信息的资源。\n\n## 本书的组织结构\n\n前面关于数据科学工具的描述大致上是按照数据分析中使用的顺序组织的 (当然，你会多次重复这个过程)。然\n而，根据我们的经验，首先学习数据导入和整理是次优的，因为80%的时间是常规的且无聊的，而另外20%的时间是不寻常且令人沮丧的。这\n不是学习新学科的好起点！相\n反，我们将从已经导入和整理的数据的可视化和转换开始。这\n样，当你处理和整理自己的数据时，你的动力就会保持高涨，因为你知道痛苦是值得的。\n\n在每一章中，我们尽量遵循一个一致的模式：从一些鼓舞人心的例子开始，让你可以看到更大的图景，然后再深入到细节中。书\n中的每一部分都配有练习来帮助你练习所学的知识。虽\n然跳过练习很有诱惑力，但没有比在实际问题上练习更好的学习方法了。\n\n## 学不到的内容\n\n有几个重要的主题这本书没有涉及。我\n们认为坚持不懈地专注于最基本的东西是很重要的，这样你就能尽快开始行动。这\n也表明这本书不可能涵盖每一个重要主题。\n\n### 建模\n\n对于数据科学来说建模是非常重要的，但这是一个很大的主题。而\n不幸的是，我们没有足够的空间在这里给予它应有的篇幅。要\n了解更多关于建模的知识，我们强烈推荐由我们的同事Max Kuhn和Julia Silge的编写的[Tidy Modeling with R](https://www.tmwr.org) 。本\n书将向你介绍tidymodels包家族，正如你从名称中猜到的那样，它与我们在本书中使用的tidyverse包共享许多约定。\n\n### 大数据\n\n本书主要关注小型内存数据集。这\n是一个正确的起点，因为只有在你具备处理小数据的经验后，才能处理大数据。本\n书大部分内容所提供的工具都可以用来轻松处理数百兆字节的数据，稍加注意它们甚至可以处理几GB的数据。我\n们还将向你展示如何从数据库和*Parquet*文件中获取数据，这两种文件通常用于存储大数据。你\n不一定能够处理整个数据集，但这不是问题，因为你只需要一个子集或者子样本来回答你感兴趣的问题。\n\n如果你经常需要处理更大的数据 (比如说10-100GB)，我们建议你进一步了解 [data.table](https://github.com/Rdatatable/data.table)。我\n们在这里不做讲解，因为它使用的接口与tidyverse不同，需要学习一些不同的约定。然\n而它的速度非常快，如果你正在处理大数据，那么它的优异性能表现值得你投入一些时间来学习它。\n\n### Python、Julia和其他编程语言\n\n在这本书中，你不会学到任何关于Python、Julia或其他对数据科学有用的编程语言的知识。这\n并不是因为我们认为这些工具不好，它们很优秀！在\n实践中，大多数数据科学团队使用混合语言，通常至少是R和Python。但\n我们坚信，最好一次只掌握一种工具，R就是一个很好的起点。\n\n## 预备知识\n\n为了让你从这本书中获得最大的收益，我们对你已经知道的内容做了一些假设。你\n应该对数字有一定的了解，如果你已经有一些基本的编程经验，那将会很有帮助。如\n果你以前从未编过程，你会发现Garrett编写的[Hands on Programming with R](https://rstudio-education.github.io/hopr/) 是这本书的一个有益补充。\n\n运行这本书中的代码，你需要四样东西：R、RStudio，一个名为tidyverse的R包集合以及其他几个包。包\n是可重现R代码的基本单元。它\n们包括可重用的函数、描述如何使用它们的文档以及样本数据。\n\n### R\n\n要下载R，请访问CRAN (the **c**omprehensive **R** **a**rchive **n**etwork) <https://cloud.r-project.org>。R\n新的主要版本每年发布一次，也会发布2-3个次要版本，建议定期更新。升\n级可能会有点麻烦，特别是主要版本，需要你重新安装所有的包，但是拖延只会让情况变得更糟。我\n们建议本书使用R4.2.0或更高版本。\n\n### RStudio\n\nRStudio 是一个用于编程的集成开发环境，你可以从 <https://posit.co/download/rstudio-desktop/>下载。\\\nRStudio每年更新几次，当新版本发布时，它会自动通知你，所以不需要定期查看，但最好定期升级，以利用最新和最强大的功能。对\n于这本书，请确保你至少有RStudio 2022.02.0版本。\n\n当你启动RStudio后，如 @fig-rstudio-console ，在界面中你会看到两个关键区域：控制台面板和输出面板。现\n在你需要知道的是，你在控制台面板中输入R代码，然后按回车键来运行它。随\n着我们的逐步深入，你会学到更多[^intro-1]。\n\n[^intro-1]: If you'd like a comprehensive overview of all of RStudio's features, see the RStudio User Guide at <https://docs.posit.co/ide/user>.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![RStudio IDE 有两个关键区域：在左侧的控制台面板中输入R代码，\n在右侧的输出面板中查看图形。\n](diagrams/rstudio/console.png){#fig-rstudio-console fig-alt='突出显示控制台和输出窗格的RStudio IDE。' width=520}\n:::\n:::\n\n\n### Tidyverse\n\n你还需要安装一些R包。R\n包是函数、数据和文档的集合，它扩展了基础R的功能。使\n用包是成功使用R的关键。你\n在本书中学习的大多数包都是所谓tidyverse的一部分。t\nidyverse中的所有包都共享数据和R编程的共同理念，并被精心安排在一起协同工作。\n\n你可以使用一行代码安装完整的tidyverse包：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n在你的计算机上，在控制台中键入这行代码，然后按enter键运行它，R将从CRAN下载软件包并安装到你的计算机上。\n\n在使用`library()`加载包之前，你无法使用包中的函数、对象或帮助文件。一\n旦安装了一个包，你可以使用`library()` 来加载它：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n#> ── Attaching core tidyverse packages ───────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#> ✔ purrr     1.0.2     \n#> ── Conflicts ─────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n\n这告诉你，tidyverse加载了9个包: dplyr、forcats、ggplot2、lubrid、purrr、reader、stringr、tibble和tidyr。它\n们被认为是tidyverse的核心，因为几乎在所有数据分析中都会用到它们。\n\ntidyverse中的包变化相当频繁。可\n以通过运行`tidyverse_update()`查看是否有可用的更新。\n\n### 其他包\n\n还有许多其他优秀的软件包，它们不是tidyverse的一部分，因为它们解决了不同领域的问题，或者是用不同的基本原则设计的。这\n不会让它们变得更好或更糟，这只会让它们与众不同。换\n句话说，对 tidyverse的补充不是messyverse，而是由相互关联的包组成的许多其他universes。随\n着你使用R处理更多的数据科学项目，你将学习新的包和新的数据思考方式。\n\n在本书中，我们将使用许多来自tidyverse之外的包。例\n如以下的包为我们在学习R的过程中提供了有趣的数据集：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\n  c(\"arrow\", \"babynames\", \"curl\", \"duckdb\", \"gapminder\", \n    \"ggrepel\", \"ggridges\", \"ggthemes\", \"hexbin\", \"janitor\", \"Lahman\", \n    \"leaflet\", \"maps\", \"nycflights13\", \"openxlsx\", \"palmerpenguins\", \n    \"repurrrsive\", \"tidymodels\", \"writexl\")\n  )\n```\n:::\n\n\n我们还将使用一些其他包作为单独的示例。你\n现在不需要安装它们，只要记住每当你看到这样的错误时：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n#> Error in library(ggrepel) : there is no package called ‘ggrepel’\n```\n:::\n\n\n你需要运行 `install.packages(\"ggrepel\")` 来安装这个包。\n\n## 运行R代码\n\n前一节向你展示了几个运行R代码的示例，书中的代码看起来是这样的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 2\n#> [1] 3\n```\n:::\n\n\n如果你在本地控制台中运行相同的代码，它看起来像这样:\n\n```         \n> 1 + 2\n[1] 3\n```\n\n有两个主要区别：在控制台中，你在`>`之后键入，`>`称为提示符。我\n们在书中没有显示提示符。在\n本书中，输出用`#>`注释掉。在\n控制台中，它直接出现在代码之后。这\n两个区别意味着，如果你使用的是电子书，你可以轻松地从书中复制代码并将其粘贴到控制台。\n\n在本书中，我们使用一致的约定来引用代码：\n\n-   函数用代码字体显示，后面跟着圆括号，如 `sum()` 或 `mean()`；\n\n-   其他R对象 (例如数据或函数参数) 用代码字体，没有圆括号, 如 `flights` 或 `x`.\n\n-   有时，为了明确对象来自哪个包，to make it clear which package an object comes from, 我们使用包名后面加两个冒号，如 `dplyr::mutate()` 或 `nycflights13::flights`。这\n    也是有效的R代码。\n\n## 致谢\n\n这本书不仅仅是Hadley、我和Garrett的作品，也是我们与R社区许多人(面对面和在线)多次交谈的结果。非\n常感谢与你们所有人的交流，非常感谢!\n\n\n::: {.cell}\n\n:::\n\n这本书是公开编写的，许多人通过拉取请求（pull requests）做出了贡献。特别感谢通过GitHub拉取请求的259 位贡献者 (按用户名字母顺序): \\@a-rosenberg, Tim Becker (\\@a2800276), Abinash Satapathy (\\@Abinashbunty), Adam Gruer (\\@adam-gruer), adi pradhan (\\@adidoit), A. s. (\\@Adrianzo), Aep Hidyatuloh (\\@aephidayatuloh), Andrea Gilardi (\\@agila5), Ajay Deonarine (\\@ajay-d), \\@AlanFeder, Daihe Sui (\\@alansuidaihe), \\@alberto-agudo, \\@AlbertRapp, \\@aleloi, pete (\\@alonzi), Alex (\\@ALShum), Andrew M. (\\@amacfarland), Andrew Landgraf (\\@andland), \\@andyhuynh92, Angela Li (\\@angela-li), Antti Rask (\\@AnttiRask), LOU Xun (\\@aquarhead), \\@ariespirgel, \\@august-18, Michael Henry (\\@aviast), Azza Ahmed (\\@azzaea), Steven Moran (\\@bambooforest), Brian G. Barkley (\\@BarkleyBG), Mara Averick (\\@batpigandme), Oluwafemi OYEDELE (\\@BB1464), Brent Brewington (\\@bbrewington), Bill Behrman (\\@behrman), Ben Herbertson (\\@benherbertson), Ben Marwick (\\@benmarwick), Ben Steinberg (\\@bensteinberg), Benjamin Yeh (\\@bentyeh), Betul Turkoglu (\\@betulturkoglu), Brandon Greenwell (\\@bgreenwell), Bianca Peterson (\\@BinxiePeterson), Birger Niklas (\\@BirgerNi), Brett Klamer (\\@bklamer), \\@boardtc, Christian (\\@c-hoh), Caddy (\\@caddycarine), Camille V Leonard (\\@camillevleonard), \\@canovasjm, Cedric Batailler (\\@cedricbatailler), Christina Wei (\\@christina-wei), Christian Mongeau (\\@chrMongeau), Cooper Morris (\\@coopermor), Colin Gillespie (\\@csgillespie), Rademeyer Vermaak (\\@csrvermaak), Chloe Thierstein (\\@cthierst), Chris Saunders (\\@ctsa), Abhinav Singh (\\@curious-abhinav), Curtis Alexander (\\@curtisalexander), Christian G. Warden (\\@cwarden), Charlotte Wickham (\\@cwickham), Kenny Darrell (\\@darrkj), David Kane (\\@davidkane9), David (\\@davidrsch), David Rubinger (\\@davidrubinger), David Clark (\\@DDClark), Derwin McGeary (\\@derwinmcgeary), Daniel Gromer (\\@dgromer), \\@Divider85, \\@djbirke, Danielle Navarro (\\@djnavarro), Russell Shean (\\@DOH-RPS1303), Zhuoer Dong (\\@dongzhuoer), Devin Pastoor (\\@dpastoor), \\@DSGeoff, Devarshi Thakkar (\\@dthakkar09), Julian During (\\@duju211), Dylan Cashman (\\@dylancashman), Dirk Eddelbuettel (\\@eddelbuettel), Edwin Thoen (\\@EdwinTh), Ahmed El-Gabbas (\\@elgabbas), Henry Webel (\\@enryH), Ercan Karadas (\\@ercan7), Eric Kitaif (\\@EricKit), Eric Watt (\\@ericwatt), Erik Erhardt (\\@erikerhardt), Etienne B. Racine (\\@etiennebr), Everett Robinson (\\@evjrob), \\@fellennert, Flemming Miguel (\\@flemmingmiguel), Floris Vanderhaeghe (\\@florisvdh), \\@funkybluehen, \\@gabrivera, Garrick Aden-Buie (\\@gadenbuie), Peter Ganong (\\@ganong123), Gerome Meyer (\\@GeroVanMi), Gleb Ebert (\\@gl-eb), Josh Goldberg (\\@GoldbergData), bahadir cankardes (\\@gridgrad), Gustav W Delius (\\@gustavdelius), Hao Chen (\\@hao-trivago), Harris McGehee (\\@harrismcgehee), \\@hendrikweisser, Hengni Cai (\\@hengnicai), Iain (\\@Iain-S), Ian Sealy (\\@iansealy), Ian Lyttle (\\@ijlyttle), Ivan Krukov (\\@ivan-krukov), Jacob Kaplan (\\@jacobkap), Jazz Weisman (\\@jazzlw), John Blischak (\\@jdblischak), John D. Storey (\\@jdstorey), Gregory Jefferis (\\@jefferis), Jeffrey Stevens (\\@JeffreyRStevens), 蒋雨蒙 (\\@JeldorPKU), Jennifer (Jenny) Bryan (\\@jennybc), Jen Ren (\\@jenren), Jeroen Janssens (\\@jeroenjanssens), \\@jeromecholewa, Janet Wesner (\\@jilmun), Jim Hester (\\@jimhester), JJ Chen (\\@jjchern), Jacek Kolacz (\\@jkolacz), Joanne Jang (\\@joannejang), \\@johannes4998, John Sears (\\@johnsears), \\@jonathanflint, Jon Calder (\\@jonmcalder), Jonathan Page (\\@jonpage), Jon Harmon (\\@jonthegeek), JooYoung Seo (\\@jooyoungseo), Justinas Petuchovas (\\@jpetuchovas), Jordan (\\@jrdnbradford), Jeffrey Arnold (\\@jrnold), Jose Roberto Ayala Solares (\\@jroberayalas), Joyce Robbins (\\@jtr13), \\@juandering, Julia Stewart Lowndes (\\@jules32), Sonja (\\@kaetschap), Kara Woo (\\@karawoo), Katrin Leinweber (\\@katrinleinweber), Karandeep Singh (\\@kdpsingh), Kevin Perese (\\@kevinxperese), Kevin Ferris (\\@kferris10), Kirill Sevastyanenko (\\@kirillseva), Jonathan Kitt (\\@KittJonathan), \\@koalabearski, Kirill Müller (\\@krlmlr), Rafał Kucharski (\\@kucharsky), Kevin Wright (\\@kwstat), Noah Landesberg (\\@landesbergn), Lawrence Wu (\\@lawwu), \\@lindbrook, Luke W Johnston (\\@lwjohnst86), Kara de la Marck (\\@MarckK), Kunal Marwaha (\\@marwahaha), Matan Hakim (\\@matanhakim), Matthias Liew (\\@MatthiasLiew), Matt Wittbrodt (\\@MattWittbrodt), Mauro Lepore (\\@maurolepore), Mark Beveridge (\\@mbeveridge), \\@mcewenkhundi, mcsnowface, PhD (\\@mcsnowface), Matt Herman (\\@mfherman), Michael Boerman (\\@michaelboerman), Mitsuo Shiota (\\@mitsuoxv), Matthew Hendrickson (\\@mjhendrickson), \\@MJMarshall, Misty Knight-Finley (\\@mkfin7), Mohammed Hamdy (\\@mmhamdy), Maxim Nazarov (\\@mnazarov), Maria Paula Caldas (\\@mpaulacaldas), Mustafa Ascha (\\@mustafaascha), Nelson Areal (\\@nareal), Nate Olson (\\@nate-d-olson), Nathanael (\\@nateaff), \\@nattalides, Ned Western (\\@NedJWestern), Nick Clark (\\@nickclark1000), \\@nickelas, Nirmal Patel (\\@nirmalpatel), Nischal Shrestha (\\@nischalshrestha), Nicholas Tierney (\\@njtierney), Jakub Nowosad (\\@Nowosad), Nick Pullen (\\@nstjhp), \\@olivier6088, Olivier Cailloux (\\@oliviercailloux), Robin Penfold (\\@p0bs), Pablo E. Garcia (\\@pabloedug), Paul Adamson (\\@padamson), Penelope Y (\\@penelopeysm), Peter Hurford (\\@peterhurford), Peter Baumgartner (\\@petzi53), Patrick Kennedy (\\@pkq), Pooya Taherkhani (\\@pooyataher), Y. Yu (\\@PursuitOfDataScience), Radu Grosu (\\@radugrosu), Ranae Dietzel (\\@Ranae), Ralph Straumann (\\@rastrau), Rayna M Harris (\\@raynamharris), \\@ReeceGoding, Robin Gertenbach (\\@rgertenbach), Jajo (\\@RIngyao), Riva Quiroga (\\@rivaquiroga), Richard Knight (\\@RJHKnight), Richard Zijdeman (\\@rlzijdeman), \\@robertchu03, Robin Kohrs (\\@RobinKohrs), Robin (\\@Robinlovelace), Emily Robinson (\\@robinsones), Rob Tenorio (\\@robtenorio), Rod Mazloomi (\\@RodAli), Rohan Alexander (\\@RohanAlexander), Romero Morais (\\@RomeroBarata), Albert Y. Kim (\\@rudeboybert), Saghir (\\@saghirb), Hojjat Salmasian (\\@salmasian), Jonas (\\@sauercrowd), Vebash Naidoo (\\@sciencificity), Seamus McKinsey (\\@seamus-mckinsey), \\@seanpwilliams, Luke Smith (\\@seasmith), Matthew Sedaghatfar (\\@sedaghatfar), Sebastian Kraus (\\@sekR4), Sam Firke (\\@sfirke), Shannon Ellis (\\@ShanEllis), \\@shoili, Christian Heinrich (\\@Shurakai), S'busiso Mkhondwane (\\@sibusiso16), SM Raiyyan (\\@sm-raiyyan), Jakob Krigovsky (\\@sonicdoe), Stephan Koenig (\\@stephan-koenig), Stephen Balogun (\\@stephenbalogun), Steven M. Mortimer (\\@StevenMMortimer), Stéphane Guillou (\\@stragu), Sulgi Kim (\\@sulgik), Sergiusz Bleja (\\@svenski), Tal Galili (\\@talgalili), Alec Fisher (\\@Taurenamo), Todd Gerarden (\\@tgerarden), Tom Godfrey (\\@thomasggodfrey), Tim Broderick (\\@timbroderick), Tim Waterhouse (\\@timwaterhouse), TJ Mahr (\\@tjmahr), Thomas Klebel (\\@tklebel), Tom Prior (\\@tomjamesprior), Terence Teo (\\@tteo), \\@twgardner2, Ulrik Lyngs (\\@ulyngs), Shinya Uryu (\\@uribo), Martin Van der Linden (\\@vanderlindenma), Walter Somerville (\\@waltersom), \\@werkstattcodes, Will Beasley (\\@wibeasley), Yihui Xie (\\@yihui), Yiming (Paul) Li (\\@yimingli), \\@yingxingwu, Hiroaki Yutani (\\@yutannihilation), Yu Yu Aung (\\@yuyu-aung), Zach Bogart (\\@zachbogart), \\@zeal626, Zeki Akyol (\\@zekiakyol).\n\n\n## 版权\n\n本书的在线版本访问 <https://r4ds.hadley.nz>，在纸质书印刷期间本书将继续发展。本\n书的源代码可在 <https://github.com/hadley/r4ds>获取。\n本书由 [Quarto](https://quarto.org)提供支持，这使得编写结合了文本和可执行代码的书变得很容易。\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}