# 图层 {#sec-layers}

```{r}
#| echo: false

source("_common.R")
```

## 引言

在 @sec-data-visualization 中, 你学到的远不止如何制作散点图、条形图和箱线图。你
学习了利用`ggplot2`可以制作任何类型图形的基础知识。

在本章中你将在这个基础上进行扩展，学习图形的分层语法。首
先，我们将更深入地探讨美学映射、几何对象和切面。然
后，你将了解`ggplot2`在创建图形时背后进行的统计转换。这
些转换用于计算新的绘图值，例如条形图中的条形高度或箱线图的中位数。你
还将学习位置调整，这会修改几何对象在图表中的显示方式。最
后，我们将简要介绍坐标系。

我们不会涵盖这些图层中的每一个函数和选项，但我们将引导你了解`ggplot2`提供的最重要和最常用的功能，并向你介绍扩展`ggplot2`的包。

### 必要条件

本章重点介绍ggplot2。要
访问本章中使用的数据集、帮助页面和函数，请运行以下代码加载tidyverse:

```{r}
#| label: setup
#| message: false

library(tidyverse)
```

## 美学映射

> "图片的最大价值在于它能够迫使我们注意到我们从未预期到的内容。"
>
> --- John Tukey

请记住，ggplot2 包附带的 `mpg` 数据框包含了关于`r mpg |> distinct(model) |> nrow()`种不同汽车型号的`r nrow(mpg)`条观测数据。

```{r}
mpg
```

`mpg` 中的变量包括:

1.  `displ`: 汽车发动机的排量，单位为升。这
    是一个数值型变量。

2.  `hwy`: 高速公路上汽车的燃油效率，以每加仑行驶的英里数（mpg）为单位。当
    两辆汽车行驶相同的距离时，燃油效率低的汽车比燃油效率高的汽车消耗更多的燃油。这
    是一个数值型变量。

3.  `class`: 汽车的型号。这
    是一个分类变量。

让我们首先通过可视化不同车型类别（`class`）的排量（`displ`）和高速公路燃油效率（`hwy`）之间的关系来开始。我
们可以使用散点图来实现这一点，其中数值变量映射到 `x` 和 `y` 美学上，而分类变量则映射到`color`或`shape`等美学上。

```{r}
#| layout-ncol: 2
#| fig-width: 4
#| fig-alt: |
#|   Two scatterplots next to each other, both visualizing highway fuel 
#|   efficiency versus engine size of cars and showing a negative 
#|   association. In the plot on the left class is mapped to the color 
#|   aesthetic, resulting in different colors for each class. 
#|   In the plot on the right class is mapped the shape aesthetic, 
#|   resulting in different plotting character shapes for each class,
#|   except for suv. Each plot comes with a legend that shows the 
#|   mapping between color or shape and levels of the class variable.

# Left
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point()

# Right
ggplot(mpg, aes(x = displ, y = hwy, shape = class)) +
  geom_point()
```

当类别（`class`）映射到形状（`shape`）时，我们得到了两个警告：

> 1: 形状调色板最多只能处理 6 个离散值，因为超过 6 个值后就很难区分；但你有 7 个。如
> 果你必须使用它们，请考虑手动指定形状。
>
> 2: 删除了包含缺失值的 62 行（`geom_point()`）。

由于 ggplot2 默认一次只会使用六个形状，因此当使用形状美学时，额外的组将不会被绘制。第
二个警告与此相关——数据集中有 62 辆 SUV，它们没有被绘制出来。

类似地，我们也可以将类别（`class`）映射到大小（`size`）或透明度（`alpha`）美学上，它们分别控制点的大小和透明度。

```{r}
#| layout-ncol: 2
#| fig-width: 4
#| fig-alt: |
#|   Two scatterplots next to each other, both visualizing highway fuel 
#|   efficiency versus engine size of cars and showing a negative 
#|   association. In the plot on the left class is mapped to the size 
#|   aesthetic, resulting in different sizes for each class. 
#|   In the plot on the right class is mapped the alpha aesthetic, 
#|   resulting in different alpha (transparency) levels for each class. 
#|   Each plot comes with a legend that shows the mapping between size 
#|   or alpha level and levels of the class variable.

# Left
ggplot(mpg, aes(x = displ, y = hwy, size = class)) +
  geom_point()

# Right
ggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +
  geom_point()
```

这两种方法都会产生警告:

> 不建议将alpha用作离散变量。

将一个无序的离散（分类）变量（如车型`class`）映射到一个有序的美学属性（如大小`size`或透明度`alpha`）通常不是明智之举，因为它暗含了一个实际上并不存在的排名。

一旦你映射了一个美学属性，ggplot2 就会处理其余部分。它
会选择一个合理的刻度来与这个美学属性一起使用，并构造一个图例来解释水平和值之间的映射关系。对
于 x 和 y 美学属性，ggplot2 不会创建图例，但会创建一个带有刻度线和标签的坐标轴线。坐
标轴线提供了与图例相同的信息；它解释了位置和值之间的映射关系。

你也可以通过几何对象函数的参数（在 `aes()` 之外）来手动设置你的几何对象的视觉属性，而不是依赖变量映射来确定外观。例
如，我们可以让我们的图形中的所有点都呈现蓝色：

```{r}
#| fig-alt: |
#|   Scatterplot of highway fuel efficiency versus engine size of cars 
#|   that shows a negative association. All points are blue.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(color = "blue")
```

在这里颜色并不传达关于变量的信息，而只是改变图的外观。你
需要选择一个对该美学属性有意义的值：

-   颜色的名称作为字符串, 例如 `color = "blue"`
-   点的大小以毫米为单位，例如 `size = 1`
-   点的形状作为一个数字，例如 `shape = 1`, 如图 @fig-shapes 所示。

```{r}
#| label: fig-shapes
#| echo: false
#| warning: false
#| fig.asp: 0.364
#| fig-align: "center"
#| fig-cap: |
#|   R has 25 built-in shapes that are identified by numbers. There are some 
#|   seeming duplicates: for example, 0, 15, and 22 are all squares. The 
#|   difference comes from the interaction of the `color` and `fill` 
#|   aesthetics. The hollow shapes (0--14) have a border determined by `color`; 
#|   the solid shapes (15--20) are filled with `color`; the filled shapes 
#|   (21--24) have a border of `color` and are filled with `fill`. Shapes are 
#|   arranged to keep similar shapes next to each other.  
#| fig-alt: |
#|   Mapping between shapes and the numbers that represent them: 0 - square, 
#|   1 - circle, 2 - triangle point up, 3 - plus, 4 - cross, 5 - diamond, 
#|   6 - triangle point down, 7 - square cross, 8 - star, 9 - diamond plus, 
#|   10 - circle plus, 11 - triangles up and down, 12 - square plus, 
#|   13 - circle cross, 14 - square and triangle down, 15 - filled square, 
#|   16 - filled circle, 17 - filled triangle point-up, 18 - filled diamond, 
#|   19 - solid circle, 20 - bullet (smaller circle), 21 - filled circle blue, 
#|   22 - filled square blue, 23 - filled diamond blue, 24 - filled triangle 
#|   point-up blue, 25 - filled triangle point down blue.

shapes <- tibble(
  shape = c(0, 1, 2, 5, 3, 4, 6:19, 22, 21, 24, 23, 20),
  x = (0:24 %/% 5) / 2,
  y = (-(0:24 %% 5)) / 4
)
ggplot(shapes, aes(x, y)) + 
  geom_point(aes(shape = shape), size = 5, fill = "red") +
  geom_text(aes(label = shape), hjust = 0, nudge_x = 0.15) +
  scale_shape_identity() +
  expand_limits(x = 4.1) +
  scale_x_continuous(NULL, breaks = NULL) + 
  scale_y_continuous(NULL, breaks = NULL, limits = c(-1.2, 0.2)) + 
  theme_minimal() +
  theme(aspect.ratio = 1/2.75)
```

到目前为止，我们讨论了在使用点几何对象（point geom）创建散点图时可以映射或设置的美学属性。你
可以在<https://ggplot2.tidyverse.org/articles/ggplot2-specs.html> 的美学规范文档中了解更多关于所有可能的美学映射的信息。

你可以在一个图中使用的具体美学属性取决于你用来表示数据的几何对象（geom）。在
下一节中，我们将更深入地探讨几何对象。

### 练习

1.  创建一个`hwy`和`displ`的散点图，其中的点是粉红色填充的三角形。

2.  以下代码为什么没有生成带有蓝色点的图：

    ```{r}
    #| fig-show: hide
    #| fig-alt: |
    #|   Scatterplot of highway fuel efficiency versus engine size of cars  
    #|   that shows a negative association. All points are red and 
    #|   the legend shows a red point that is mapped to the word blue.

    ggplot(mpg) + 
      geom_point(aes(x = displ, y = hwy, color = "blue"))
    ```

3.  描边美学（stroke aesthetic）是做什么用的？它
    与哪些形状一起工作？（
    提示：使用 `?geom_point`）

4.  如果你将美学映射到变量名之外的其他东西，比如 `aes(color = displ < 5)`，会发生什么？注
    意，你还需要指定 x 和 y。

## 几何对象 {#sec-geometric-objects}

下面两张图有什么相似之处？

```{r}
#| echo: false
#| message: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   There are two plots. The plot on the left is a scatterplot of highway 
#|   fuel efficiency versus engine size of cars and the plot on the right 
#|   shows a smooth curve that follows the trajectory of the relationship 
#|   between these variables. A confidence interval around the smooth 
#|   curve is also displayed.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

两张图包含相同的x变量和y变量，并且都描述了相同的数据。但
是，这两张图并不完全相同。每
张图都使用不同的几何对象（geom）来表示数据。左
侧的图使用了点几何对象（point geom），而右侧的图表使用了平滑几何对象（smooth geom），即用平滑线拟合到数据上。

要在你的图中更改几何对象（geom），请更改你添加到`ggplot()`函数中的几何对象函数。例
如，要绘制上述图可以使用以下代码：

```{r}
#| fig-show: hide

# Left
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()

# Right
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

在ggplot2中，每个geom函数都接受一个映射参数，这个参数可以在geom图层中本地定义，也可以在`ggplot()`图层中全局定义。然
而，并不是每个美学属性（aesthetic）都适用于每个geom。你
可以设置点的形状，但你不能设置线的“形状”。如
果你尝试这样做，ggplot2会静默地忽略该美学映射。另
一方面，你可以设置线的线型。`g`
`eom_smooth()`会根据你映射到线型变量的不同值，绘制具有不同线型的平滑线。

```{r}
#| message: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   Two plots of highway fuel efficiency versus engine size of cars.
#|   The data are represented with smooth curves. On the left, three 
#|   smooth curves, all with the same linetype. On the right, three 
#|   smooth curves with different line types (solid, dashed, or long 
#|   dashed) for each type of drive train. In both plots, confidence 
#|   intervals around the smooth curves are also displayed.

# Left
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + 
  geom_smooth()

# Right
ggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) + 
  geom_smooth()
```

在这里，`geom_smooth()`根据汽车的`drv`值（描述了汽车的驱动方式）将汽车数据分成三条线。一
条线描述了所有值为4的点，一条线描述了所有值为`f`的点，还有一条线描述了所有值为`r`的点。在
这里，4代表四轮驱动，`f`代表前轮驱动，`r`代表后轮驱动。

如果这听起来有些奇怪，我们可以通过将这三条线叠加在原始数据上，并根据`drv`的值给所有内容上色，来使其更加清晰。

```{r}
#| message: false
#| fig-alt: |
#|   A plot of highway fuel efficiency versus engine size of cars. The data 
#|   are represented with points (colored by drive train) as well as smooth 
#|   curves (where line type is determined based on drive train as well). 
#|   Confidence intervals around the smooth curves are also displayed.

ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + 
  geom_point() +
  geom_smooth(aes(linetype = drv))
```

请注意，这个图在同一个图形中包含了两个几何对象（geoms）。

许多几何对象（如`geom_smooth()`）使用单个几何对象来显示多行数据。对
于这些几何对象，你可以将组（`group`）美学属性设置为分类变量来绘制多个对象。g
gplot2会为分组变量的每个值绘制一个独立的对象。在
实践中，当你将美学属性映射到离散变量时（如线型示例），ggplot2会自动为这些几何对象分组数据。依
赖这个特性是很方便的，因为组（`group`）美学属性本身不会给几何对象添加图例或区分特征。

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-asp: 1
#| message: false
#| fig-alt: |
#|   Three plots, each with highway fuel efficiency on the y-axis and engine 
#|   size of cars, where data are represented by a smooth curve. The first plot 
#|   only has these two variables, the center plot has three separate smooth 
#|   curves for each level of drive train, and the right plot not only has the 
#|   same three separate smooth curves for each level of drive train but these 
#|   curves are plotted in different colors, with a legend explaining which 
#|   color maps to which level. Confidence intervals around the smooth curves 
#|   are also displayed.

# Left
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth()

# Middle
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(group = drv))

# Right
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(color = drv), show.legend = FALSE)
```

如果你在geom函数中放置映射，ggplot2会将这些映射视为该图层的本地映射。它
将使用这些映射来扩展或覆盖该图层的全局映射。这
使得在不同的图层中显示不同的美学属性成为可能。

```{r}
#| message: false
#| fig-alt: |
#|   Scatterplot of highway fuel efficiency versus engine size of cars, where 
#|   points are colored according to the car class. A smooth curve following 
#|   the trajectory of the relationship between highway fuel efficiency versus 
#|   engine size of cars is overlaid along with a confidence interval around it.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(aes(color = class)) + 
  geom_smooth()
```

你可以使用相同的思路来为每一层指定不同的数据。在
这里，我们使用红色的点和空心的圆圈来突出显示两座车。`g`
`eom_point()`中的局部数据参数（local data argument）仅针对那一层覆盖了`ggplot()`中的全局数据参数（global data argument）。

```{r}
#| message: false
#| fig-alt: |
#|   Scatterplot of highway fuel efficiency versus engine size of cars, where 
#|   points are colored according to the car class. A smooth curve following 
#|   the trajectory of the relationship between highway fuel efficiency versus 
#|   engine size of subcompact cars is overlaid along with a confidence interval 
#|   around it.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_point(
    data = mpg |> filter(class == "2seater"), 
    color = "red"
  ) +
  geom_point(
    data = mpg |> filter(class == "2seater"), 
    shape = "circle open", size = 3, color = "red"
  )
```

几何对象（`geoms`）是`ggplot2`的基本构建模块。你
可以通过改变图形的`geom`来完全改变其外观，而不同的`geoms`可以揭示数据的不同特征。例
如下面的直方图和密度图揭示了高速公路里程的分布是双峰的且向右偏斜，而箱线图则揭示了两个潜在的异常值。

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-alt: |
#|   Three plots: histogram, density plot, and box plot of highway
#|   mileage.
 
# Left
ggplot(mpg, aes(x = hwy)) +
  geom_histogram(binwidth = 2)

# Middle
ggplot(mpg, aes(x = hwy)) +
  geom_density()

# Right
ggplot(mpg, aes(x = hwy)) +
  geom_boxplot()
```

ggplot2提供了超过 40 个`geoms`，但这并不覆盖所有可能创建的图形。如
果你需要一个不同的`geom`，我们建议先查看扩展包，看看是否有人已经实现了它（可以在<https://exts.ggplot2.tidyverse.org/gallery/>找到一个示例）。例
如，`ggridges`包（[https://wilkelab.org/ggridges](https://wilkelab.org/ggridges/){.uri}）对于制作山脊线图（ridgeline plots）很有用，这种图可以用于可视化数值变量在不同类别变量水平下的密度。在
下面的图形中，我们不仅使用了一个新的`geom`（`geom_density_ridges()`），而且我们还将相同的变量映射到多个美学属性（`drv`到`y`、`fill`和`color`），并设置了一个美学属性（`alpha = 0.5`）以使密度曲线透明。

```{r}
#| fig-asp: 0.33
#| fig-alt: 
#|   Density curves for highway mileage for cars with rear wheel, 
#|   front wheel, and 4-wheel drives plotted separately. The 
#|   distribution is bimodal and roughly symmetric for real and 
#|   4 wheel drive cars and unimodal and right skewed for front 
#|   wheel drive cars.

library(ggridges)

ggplot(mpg, aes(x = hwy, y = drv, fill = drv, color = drv)) +
  geom_density_ridges(alpha = 0.5, show.legend = FALSE)
```

要了解`ggplot2`提供的所有`geoms`的全面概述以及包中的所有函数，最好的地方是参考<https://ggplot2.tidyverse.org/reference>。要
深入了解任何单一的`geom`，请使用帮助函数（例如 `?geom_smooth`）。

### 练习

1.  你会使用哪种`geom`来绘制折线图？箱
    线图？直
    方图？面
    积图？

2.  在本章的前面部分，我们使用了`show.legend`而没有解释它：

    ```{r}
    #| fig-show: hide
    #| message: false

    ggplot(mpg, aes(x = displ, y = hwy)) +
      geom_smooth(aes(color = drv), show.legend = FALSE)
    ```

    `show.legend = FALSE`在这里的作用是什么?如
    果你把它去掉会怎么样?你
    觉得我们之前为什么用它?

3.  `geom_smooth()` 的参数`se`起什么作用?

4.  重新创建生成以下图形所需的R代码。
    请注意，图中用到的分类变量的都是`drv`。

    ```{r}
    #| echo: false
    #| message: false
    #| layout-ncol: 2
    #| fig-width: 3
    #| fig-alt: |
    #|   There are six scatterplots in this figure, arranged in a 3x2 grid. 
    #|   In all plots highway fuel efficiency of cars are on the y-axis and 
    #|   engine size is on the x-axis. The first plot shows all points in black 
    #|   with a smooth curve overlaid on them. In the second plot points are 
    #|   also all black, with separate smooth curves overlaid for each level of 
    #|   drive train. On the third plot, points and the smooth curves are 
    #|   represented in different colors for each level of drive train. In the 
    #|   fourth plot the points are represented in different colors for each 
    #|   level of drive train but there is only a single smooth line fitted to 
    #|   the whole data. In the fifth plot, points are represented in different 
    #|   colors for each level of drive train, and a separate smooth curve with 
    #|   different line types are fitted to each level of drive train. And 
    #|   finally in the sixth plot points are represented in different colors 
    #|   for each level of drive train and they have a thick white border.

    ggplot(mpg, aes(x = displ, y = hwy)) + 
      geom_point() + 
      geom_smooth(se = FALSE)
    ggplot(mpg, aes(x = displ, y = hwy)) + 
      geom_smooth(aes(group = drv), se = FALSE) +
      geom_point()
    ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + 
      geom_point() + 
      geom_smooth(se = FALSE)
    ggplot(mpg, aes(x = displ, y = hwy)) + 
      geom_point(aes(color = drv)) + 
      geom_smooth(se = FALSE)
    ggplot(mpg, aes(x = displ, y = hwy)) + 
      geom_point(aes(color = drv)) +
      geom_smooth(aes(linetype = drv), se = FALSE)
    ggplot(mpg, aes(x = displ, y = hwy)) + 
      geom_point(size = 4, color = "white") + 
      geom_point(aes(color = drv))
    ```

## 分面

在 @sec-data-visualization ，你学习了使用`facet_wrap()`进行分面，该方法可以将一个图形分割成子图，每个子图都基于一个分类变量显示数据的一个子集。

```{r}
#| fig-alt: |
#|   Scatterplot of highway fuel efficiency versus engine size of cars, 
#|   faceted by class, with facets spanning two rows.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  facet_wrap(~cyl)
```

要使用两个变量的组合来对你的图形进行分面，你需要从`facet_wrap()`切换到`facet_grid()`。`f`
`acet_grid()`的第一个参数也是一个公式，但现在它是一个双面公式：`rows ~ cols`。

```{r}
#| fig-alt: |
#|   Scatterplot of highway fuel efficiency versus engine size of cars, faceted 
#|   by number of cylinders across rows and by type of drive train across 
#|   columns. This results in a 4x3 grid of 12 facets. Some of these facets have 
#|   no observations: 5 cylinders and 4 wheel drive, 4 or 5 cylinders and front 
#|   wheel drive.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  facet_grid(drv ~ cyl)
```

默认情况下，每个分面共享相同的x轴和y轴的刻度和范围。当
你想跨分面比较数据时，这很有用，但当你希望更好地可视化每个分面内的关系时，这可能会有所限制。将
分面函数中的`scales`参数设置为`"free"`将允许行和列之间使用不同的轴刻度，"`free_x`"将允许行之间使用不同的刻度，"`free_y`"将允许列之间使用不同的刻度。

```{r}
#| fig-alt: |
#|   Scatterplot of highway fuel efficiency versus engine size of cars, 
#|   faceted by number of cylinders across rows and by type of drive train 
#|   across columns. This results in a 4x3 grid of 12 facets. Some of these 
#|   facets have no observations: 5 cylinders and 4 wheel drive, 4 or 5 
#|   cylinders and front wheel drive. Facets within a row share the same 
#|   y-scale and facets within a column share the same x-scale.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  facet_grid(drv ~ cyl, scales = "free_y")
```

### 练习

1.  如果你对一个连续变量进行分面会发生什么？

2.  上面的图中使用`facet_grid(drv ~ cyl)`生成的空单元格是什么意思？运
    行以下代码，它们与生成的图有什么关系？

    ```{r}
    #| fig-show: hide

    ggplot(mpg) + 
      geom_point(aes(x = drv, y = cyl))
    ```

3.  以下代码生成了什么样的图形？`.` 在这里代表什么？

    ```{r}
    #| fig-show: hide

    ggplot(mpg) + 
      geom_point(aes(x = displ, y = hwy)) +
      facet_grid(drv ~ .)

    ggplot(mpg) + 
      geom_point(aes(x = displ, y = hwy)) +
      facet_grid(. ~ cyl)
    ```

4.  查看本节中的第一个分面图：

    ```{r}
    #| fig-show: hide

    ggplot(mpg) + 
      geom_point(aes(x = displ, y = hwy)) + 
      facet_wrap(~ class, nrow = 2)
    ```

    使用分面（faceting）而不是颜色美学（color aesthetic）的优势是什么？劣
    势是什么？如
    果你有一个更大的数据集，这种平衡可能会如何改变？

5.  阅读`?facet_wrap`的帮助文档，`nrow`是做什么的？`n`
    `col`呢？还
    有哪些选项控制单个面板的布局？为
    什么`facet_grid()`没有`nrow`和`ncol`参数？

6.  下面的哪个图使得比较不同驱动方式的汽车的发动机排量（`displ`）更容易？

    ```{r}
    #| fig-show: hide
    #| message: false

    ggplot(mpg, aes(x = displ)) + 
      geom_histogram() + 
      facet_grid(drv ~ .)

    ggplot(mpg, aes(x = displ)) + 
      geom_histogram() +
      facet_grid(. ~ drv)
    ```

7.  使用`facet_wrap()`重新创建以下图形。这
    时分面标签的位置如何变化？

    ```{r}
    #| fig-show: hide

    ggplot(mpg) + 
      geom_point(aes(x = displ, y = hwy)) +
      facet_grid(drv ~ .)
    ```

## 统计变换

下面是一个用`geom_bar()`或`geom_col()`绘制的基本条形图，图形显示了`diamonds`数据集中按`cut`分组的钻石总数。`d`
`iamonds`数据集位于`ggplot2`包中，包含约 54,000 颗钻石的信息，包括每颗钻石的价格（`price`）、重量（`carat`）、颜色（`color`）、净度（`clarity`）和切割方式（`cut` ）。图
形显示，高质量切割的钻石比低质量切割的钻石更多。

```{r}
#| fig-alt: |
#|   Bar chart of number of each cut of diamond. There are roughly 1500 
#|   Fair, 5000 Good, 12000 Very Good, 14000 Premium, and 22000 Ideal cut 
#|   diamonds.

ggplot(diamonds, aes(x = cut)) + 
  geom_bar()
```

在 x 轴上图形显示了来自 `diamonds` 数据集的变量 `cut`。在
y 轴上显示了 count，但 count 并不是 `diamonds` 数据集中的变量！c
ount 是从哪里来的？许
多图形，如散点图会绘制数据集的原始值。而
其他图形，如条形图则会计算新的值来绘制：

-   条形图、直方图和频数多边形会将数据进行分箱，然后绘制每个分箱中的点数（即分箱计数）。
-   平滑器（smoothers）会对您的数据拟合一个模型，然后绘制该模型的预测值。
-   箱线图会计算分布的五数汇总（five-number summary），然后以特殊格式的箱子显示该汇总。

用于计算图形新值的算法被称为 **stat**，是 statistical transformation（统计变换）的缩写。\@
fig-vis-stat-bar 展示了 `geom_bar()` 是如何工作的。

```{r}
#| label: fig-vis-stat-bar
#| echo: false
#| out-width: "100%"
#| fig-cap: |
#|   When creating a bar chart we first start with the raw data, then
#|   aggregate it to count the number of observations in each bar,
#|   and finally map those computed variables to plot aesthetics.
#| fig-alt: |
#|   A figure demonstrating three steps of creating a bar chart. 
#|   Step 1. geom_bar() begins with the diamonds data set. Step 2. geom_bar() 
#|   transforms the data with the count stat, which returns a data set of 
#|   cut values and counts. Step 3. geom_bar() uses the transformed data to 
#|   build the plot. cut is mapped to the x-axis, count is mapped to the y-axis.

knitr::include_graphics("images/visualization-stat-bar.png")
```

你可以通过检查`stat`参数的默认值来了解一个`geom`使用的是哪种统计变换。例
如`?geom_bar`显示`stat`的默认值是"count"，这意味着`geom_bar()`使用的是`stat_count()`。`s`
`tat_count()`的文档与`geom_bar()`在同一页面。如
果你向下滚动，名为“Computed variables”的部分说明它计算了两个新变量：`count`和`prop`。

每个`geom`都有一个默认的统计变换；每个统计变换也有一个默认的`geom`。这
意味着你通常可以使用`geoms`而不用担心底层的统计变换。然
而，在三种情况下你可能需要指明使用何种统计变换：

1.  你可能想要覆盖默认的统计变换。在
    下面的代码中，我们将`geom_bar()`的统计变换从默认的count更改为identity。这
    样我们就可以将条形的高度映射到 y 变量的原始值。

    ```{r}
    #| warning: false
    #| fig-alt: |
    #|   Bar chart of number of each cut of diamond. There are roughly 1500 
    #|   Fair, 5000 Good, 12000 Very Good, 14000 Premium, and 22000 Ideal cut 
    #|   diamonds.

    diamonds |>
      count(cut) |>
      ggplot(aes(x = cut, y = n)) +
      geom_bar(stat = "identity")
    ```

2.  你可能想要覆盖从变换后的变量到视觉属性的默认映射。例
    如，你可能想要显示一个比例条形图，而不是计数条形图：

    ```{r}
    #| fig-alt: |
    #|   Bar chart of proportion of each cut of diamond. Roughly, Fair 
    #|   diamonds make up 0.03, Good 0.09, Very Good 0.22, Premium 0.26, and 
    #|   Ideal 0.40.

    ggplot(diamonds, aes(x = cut, y = after_stat(prop), group = 1)) + 
      geom_bar()
    ```

    要找到可以由统计变换计算的可能的变量，请在`geom_bar()`的帮助文档中寻找标题为“computed variables”的部分。

3.  你可能希望在你的代码中更加关注统计变换。例
    如你可能使用`stat_summary()`，它对每个唯一的 x 值汇总 y 值，以此来强调你正在计算的汇总统计量：

    ```{r}
    #| fig-alt: |
    #|   A plot with depth on the y-axis and cut on the x-axis (with levels 
    #|   fair, good, very good, premium, and ideal) of diamonds. For each level 
    #|   of cut, vertical lines extend from minimum to maximum depth for diamonds 
    #|   in that cut category, and the median depth is indicated on the line 
    #|   with a point.

    ggplot(diamonds) + 
      stat_summary(
        aes(x = cut, y = depth),
        fun.min = min,
        fun.max = max,
        fun = median
      )
    ```

ggplot2 提供了超过 20 种统计变换。每
个统计变换都是一个函数，所以你可以通过常规方式获取帮助，例如使用`?stat_bin`。

### 练习

1.  `stat_summary()`的默认`geom`是什么？如
    何使用这个`geom`函数而不是`stat`函数来重写前面的图形？

2.  `geom_col()`是做什么的？它
    与`geom_bar()`有什么不同？

3.  大多数geoms和stats都是成对出现的，它们几乎总是协同工作。请
    列出所有这些对子。它
    们有什么共同点？（
    提示：阅读文档。）

4.  `stat_smooth()`函数计算哪些变量？哪
    些参数控制其行为？

5.  在我们的比例条形图中，我们需要设置`group = 1`。为
    什么呢？换
    句话说，这两个图有什么问题？

    ```{r}
    #| fig-show: hide

    ggplot(diamonds, aes(x = cut, y = after_stat(prop))) + 
      geom_bar()
    ggplot(diamonds, aes(x = cut, fill = color, y = after_stat(prop))) + 
      geom_bar()
    ```

## 位置调整

与条形图相关的还有一个神奇的特性。你
可以使用颜色美学（color aesthetic）来为条形图上色，但更有用的是，你还可以使用填充美学（fill aesthetic）来为条形图上色：

```{r}
#| layout-ncol: 2
#| fig-width: 4
#| fig-alt: |
#|   Two bar charts of drive types of cars. In the first plot, the bars have 
#|   colored borders. In the second plot, they're filled with colors. Heights 
#|   of the bars correspond to the number of cars in each cut category.

# Left
ggplot(mpg, aes(x = drv, color = drv)) + 
  geom_bar()

# Right
ggplot(mpg, aes(x = drv, fill = drv)) + 
  geom_bar()
```

请注意，如果你将填充美学映射到另一个变量，比如`class`，条形图会自动堆叠。每
个彩色矩形代表`drv`和`class`的一个组合。

```{r}
#| fig-alt: |
#|   Segmented bar chart of drive types of cars, where each bar is filled with 
#|   colors for the classes of cars. Heights of the bars correspond to the 
#|   number of cars in each drive category, and heights of the colored 
#|   segments are proportional to the number of cars with a given class 
#|   level within a given drive type level.

ggplot(mpg, aes(x = drv, fill = class)) + 
  geom_bar()
```

堆叠是通过由`position`参数指定的位置调整（position adjustment）自动执行的。如
果你不想创建堆叠条形图，你可以使用以下三种选项之一：`"identity"`、`"dodge"` 或 `"fill"`。

-   `position = "identity"`会将每个对象精确地放置在其在图中的位置。这
    对于条形图来说不是很有用，因为它会使它们重叠。为
    了看到这种重叠，我们需要将条形设置为稍微透明，通过将`alpha`设置为一个小值，或者通过设置`fill = NA`使其完全透明。

    ```{r}
    #| layout-ncol: 2
    #| fig-width: 4
    #| fig-alt: |
    #|   Segmented bar chart of drive types of cars, where each bar is filled with 
    #|   colors for the classes of cars. Heights of the bars correspond to the 
    #|   number of cars in each drive category, and heights of the colored 
    #|   segments are proportional to the number of cars with a given class 
    #|   level within a given drive type level. However the segments overlap. In 
    #|   the first plot the bars are filled with transparent colors
    #|   and in the second plot they are only outlined with color.

    # Left
    ggplot(mpg, aes(x = drv, fill = class)) + 
      geom_bar(alpha = 1/5, position = "identity")

    # Right
    ggplot(mpg, aes(x = drv, color = class)) + 
      geom_bar(fill = NA, position = "identity")
    ```

    `“identity”`位置调整对于二维几何对象（如点）更为有用，它是这些对象的默认设置。

-   `position = "fill"` 的作用类似于堆叠，但会使每组堆叠的条形具有相同的高度。这
    使得比较各组之间的比例更容易。

-   `position = "dodge"` 将重叠的对象直接并排放置，这使得比较各个值更容易。

    ```{r}
    #| layout-ncol: 2
    #| fig-width: 4
    #| fig-alt: |
    #|   On the left, segmented bar chart of drive types of cars, where each bar is 
    #|   filled with colors for the levels of class. Height of each bar is 1 and 
    #|   heights of the colored segments represent the proportions of cars 
    #|   with a given class level within a given drive type.
    #|   On the right, dodged bar chart of drive types of cars. Dodged bars are 
    #|   grouped by levels of drive type. Within each group bars represent each 
    #|   level of class. Some classes are represented within some drive types and 
    #|   not represented in others, resulting in unequal number of bars within each 
    #|   group. Heights of these bars represent the number of cars with a given 
    #|   level of drive type and class.

    # Left
    ggplot(mpg, aes(x = drv, fill = class)) + 
      geom_bar(position = "fill")

    # Right
    ggplot(mpg, aes(x = drv, fill = class)) + 
      geom_bar(position = "dodge")
    ```

还有一种调整不适用于条形图，但对散点图非常有用。回
想我们的第一个散点图。你
有没有注意到，尽管数据集中有234个观测值，但图中只显示了126个点？

```{r}
#| echo: false
#| fig-alt: |
#|   Scatterplot of highway fuel efficiency versus engine size of cars that 
#|   shows a negative association.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()
```

`hwy`和`displ`的基础值被四舍五入，因此点显示在一个网格上，许多点互相重叠。这
个问题被称为过度绘制（overplotting）。这
种布局使得很难看到数据的分布。数
据点在整个图中是均匀分布的吗，还是`hwy`和`displ`的某个特殊组合包含了109个值？

你可以通过设置位置调整为 "jitter" 来避免这种网格化。`p`
`osition = "jitter"`会给每个点添加一小部分随机噪声。这
会将点分散开来，因为两个点不太可能获得相同数量的随机噪声。

```{r}
#| fig-alt: |
#|   Jittered scatterplot of highway fuel efficiency versus engine size of cars. 
#|   The plot shows a negative association.

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(position = "jitter")
```

添加随机性似乎是一种奇怪的改进图表的方式，但尽管它在小范围内降低了图形的准确性，但在大范围内却使图形更清晰。由
于这是一种非常有用的操作，ggplot2 为`geom_point(position = "jitter")`提供了一个简写形式：`geom_jitter()`。

要了解更多关于位置调整的信息，请查阅与每个调整相关的帮助页面：`?position_dodge`、`?position_fill`、`?position_identity`、`?position_jitter` 和 `?position_stack`。

### 练习

1.  下面的图有什么问题？如
    何改进它？

    ```{r}
    #| fig-show: hide

    ggplot(mpg, aes(x = cty, y = hwy)) + 
      geom_point()
    ```

2.  这两个图之间有什么区别（如果有的话）？为
    什么？

    ```{r}
    #| fig-show: hide

    ggplot(mpg, aes(x = displ, y = hwy)) +
      geom_point()
    ggplot(mpg, aes(x = displ, y = hwy)) +
      geom_point(position = "identity")
    ```

3.  `geom_jitter()`中的哪些参数控制抖动量（amount of jittering）？

4.  将`geom_jitter()`与`geom_count()`进行比较和对比。

5.  `geom_boxplot()`的默认位置调整是什么？使
    用 `mpg` 数据集创建一个可视化来展示它。

## 坐标系

坐标系可能是 ggplot2 中最复杂的部分。默
认的坐标系是笛卡尔坐标系，其中 x 和 y 位置独立地确定每个点的位置。还
有另外两种坐标系在某些情况下也很有用。

-   `coord_quickmap()`为地理地图设置了正确的纵横比。如
    果你使用 ggplot2 绘制空间数据，这一点非常重要。本
    书中没有空间讨论地图，但你可以在《*ggplot2: Elegant graphics for data analysis*》一书的[Maps chapter](https://ggplot2-book.org/maps.html) 中了解更多信息。

    ```{r}
    #| layout-ncol: 2
    #| fig-width: 3
    #| message: false
    #| fig-alt: |
    #|   Two maps of the boundaries of New Zealand. In the first plot the aspect 
    #|   ratio is incorrect, in the second plot it is correct.

    nz <- map_data("nz")

    ggplot(nz, aes(x = long, y = lat, group = group)) +
      geom_polygon(fill = "white", color = "black")

    ggplot(nz, aes(x = long, y = lat, group = group)) +
      geom_polygon(fill = "white", color = "black") +
      coord_quickmap()
    ```

-   `coord_polar()` 使用极坐标系。极
    坐标系揭示了条形图和扇形图（Coxcomb chart）之间一个有趣的联系。

    ```{r}
    #| layout-ncol: 2
    #| fig-width: 3
    #| fig-asp: 1
    #| fig-alt: |
    #|   There are two plots. On the left is a bar chart of clarity of diamonds, 
    #|   on the right is a Coxcomb chart of the same data.

    bar <- ggplot(data = diamonds) + 
      geom_bar(
        mapping = aes(x = clarity, fill = clarity), 
        show.legend = FALSE,
        width = 1
      ) + 
      theme(aspect.ratio = 1)

    bar + coord_flip()
    bar + coord_polar()
    ```

### 练习

1.  使用`coord_polar()`将堆叠的条形图转换为饼状图。

2.  `coord_quickmap()` 和 `coord_map()` 之间的区别是什么？

3.  下图告诉你city和高速公路mpg之间的关系是什么？为
    什么`coord_fixed()`很重要？`g`
    `eom_abline()`的作用什么？

    ```{r}
    #| fig-show: hide

    ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
      geom_point() + 
      geom_abline() +
      coord_fixed()
    ```

## 图形的分层语法

我们可以通过添加位置调整、统计量、坐标系和分面来扩展你在\@sec-ggplot2-calls 学到的绘图模板：

```         
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(
     mapping = aes(<MAPPINGS>),
     stat = <STAT>, 
     position = <POSITION>
  ) +
  <COORDINATE_FUNCTION> +
  <FACET_FUNCTION>
```

我们的新模板需要七个参数，即模板中出现的括号中的词。在
实践中，你很少需要为制作图形提供所有七个参数，因为 ggplot2 会为除了数据、映射和 geom 函数之外的所有内容提供有用的默认值。

模板中的七个参数构成了图形的语法（grammar of graphics），这是一个用于构建图形的正式系统。图
形的语法基于这样一个见解：你可以将任何图形唯一地描述为数据集、geom、一组映射、统计量、位置调整、坐标系、分面方案和主题的组合。

为了了解这是如何工作的，请考虑如何从零开始构建一个基本的图形：你可以从一个数据集开始，然后将其转换为你想要显示的信息（使用统计量）。接
下来，你可以选择一个几何对象来表示转换后数据中的每个观测值。然
后，你可以使用 geom 的美学属性来表示数据中的变量。你
可以将每个变量的值映射到美学的水平。这
些步骤在 @fig-visualization-grammar 中进行了说明。然
后，你会选择一个坐标系来放置 geom，使用对象的位置（它本身也是一个美学属性）来显示 x 和 y 变量的值。

```{r}
#| label: fig-visualization-grammar
#| echo: false
#| fig-alt: |
#|   A figure demonstrating the steps for going from raw data to table of 
#|   frequencies where each row represents one level of cut and a count column 
#|   shows how many diamonds are in that cut level. Then, these values are 
#|   mapped to heights of bars.
#| fig-cap: |
#|   Steps for going from raw data to a table of frequencies to a bar plot where 
#|   the heights of the bar represent the frequencies.

knitr::include_graphics("images/visualization-grammar.png")
```

在这一点上，你将拥有一个完整的图形，但你可以进一步调整 geom 在坐标系内的位置（位置调整）或将图形拆分为子图（分面）。你
还可以通过添加一个或多个附加层来扩展图形，其中每个附加层都使用数据集、geom、一组映射、统计量和位置调整。

你可以使用这种方法来构建你想象中的任何图形。换
句话说，你可以使用本章中学习的代码模板来构建数十万个独特的图形。

如果你想了解更多关于 ggplot2 的理论基础，你可能会喜欢阅读《[The Layered Grammar of Graphics](https://vita.had.co.nz/papers/layered-grammar.pdf)》这篇科学论文，它详细描述了 ggplot2 的理论。

## 小结

在本章中，你从美学和几何图形开始学习了图形的分层语法，以构建简单的图形、通过分面将图形拆分为子集、通过统计量了解 geom 是如何计算的、通过位置调整控制 geom 可能重叠时的位置细节，以及通过坐标系统从根本上改变 x 和 y 的含义。我
们尚未涉及的一个层次是主题（theme），我们将在 @sec-themes 中介绍。

两个非常有用的资源可以帮助你全面了解 ggplot2 的完整功能，分别是 ggplot2 速查表（你可以在<https://posit.co/resources/cheatsheets>找到）和 ggplot2 包网站（<https://ggplot2.tidyverse.org>./)）。

你应该从本章中学到的一个重要教训是，当你觉得需要 ggplot2 没有提供的 geom 时，最好先查看是否有人已经通过创建提供该 geom 的 ggplot2 扩展包来解决了你的问题。
