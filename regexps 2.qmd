# 正则表达式 {#sec-regular-expressions}

```{r}
#| echo: false

source("_common.R")
```

## 引言

在 @sec-strings 部分，你学习了一系列用于处理字符串的有用函数。本
章将重点介绍使用正则表达式的函数，正则表达式（regular expression）是一种简洁而强大的语言，用于描述字符串中的模式。术
语“正则表达式”有点长，所以大多数人将其缩写为“regex”[^regexps-1]或“regexp”。

[^regexps-1]: 你可以用硬音 g（reg-x）或软音 g（rej-x）来发音。

本章首先介绍正则表达式的基础知识以及数据分析中最有用的`stringr`函数。然
后，我们将扩展你对模式的了解，并介绍七个重要的新主题（转义、锚定、字符类、简写类、量词、优先级和分组）。接
下来，我们将讨论`stringr`函数可以处理的其他类型的模式，以及允许你调整正则表达式操作的各种“标志”。最
后，我们将概述tidyverse和base R中可能会使用正则表达式的其他地方。

### 必要条件

在本章中，我们将使用tidyverse的核心成员stringr和tidyr中的正则表达式函数，以及`babynames`包中的数据。

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(babynames)
```

在本章中，我们将使用非常简单的内联示例的混合方式，以便你能够理解基本概念，还会使用babynames数据集中的数据，以及来自stringr的三个字符向量：

-   `fruit` 包含了80种水果的名称。
-   `words` 包含了980个常见的英语单词。
-   `sentences` 包含了720个短句。

## 模式的基础 {#sec-reg-basics}

我们将使用`str_view()`来学习正则表达式模式是如何工作的。在
上一章中，我们使用`str_view()`来更好地理解字符串与其输出表示之间的区别，现在我们将使用它的第二个参数，即正则表达式。当
提供这个参数时，`str_view()`将仅显示字符串向量中匹配的部分，将每个匹配项用`< >`括起来，并在可能的情况下将匹配项以蓝色高亮显示。

最简单的模式由字母和数字组成，它们会精确匹配这些字符：

```{r}
str_view(fruit, "berry")
```

字母和数字进行精确匹配，被称为字面字符（literal characters）。大
多数标点符号字符，如`.`、`+`、`*`、`[`、`]`和`?` 具有特殊含义[^regexps-2]，被称为元字符（metacharacters）。
例如，`.`将匹配任何字符[^regexps-3]，所以 `"a."` 将匹配任何包含 "a" 后面跟着另一个字符的字符串
：

[^regexps-2]: 你将在 @sec-regexp-escaping 中学习如何转义这些特殊含义。

[^regexps-3]: 除了`\n`以外的任何字符。

```{r}
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
```

或者，我们可以找到所有包含“a”，后跟三个字母，再后跟“e”的水果：

```{r}
str_view(fruit, "a...e")
```

**量词（Quantifiers）** 控制模式可以匹配的次数：

-   `?` 使得一个模式变为可选的（即它匹配0次或1次）
-   `+` 允许一个模式重复（即它至少匹配一次）
-   `*` 允许一个模式变为可选的或重复（即它匹配任意次数，包括0次）

```{r}
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")

# ab+ matches an "a", followed by at least one "b".
str_view(c("a", "ab", "abb"), "ab+")

# ab* matches an "a", followed by any number of "b"s.
str_view(c("a", "ab", "abb"), "ab*")
```

**字符类（Character classes）**由`[]`定义，允许你匹配一组字符，例如，`[abcd]`匹配“a”、“b”、“c”或“d”。你
也可以通过在开头使用`^`来反转匹配：`[^abcd]`匹配除“a”、“b”、“c”或“d”之外的任何字符。我
们可以利用这个思路来查找被元音字母包围的“x”，或者被辅音字母包围的“y”。

```{r}
str_view(words, "[aeiou]x[aeiou]")
str_view(words, "[^aeiou]y[^aeiou]")
```

你可以使用**分隔符（alternation）**`|` 在一个或多个备选模式中进行选择。例
如，下面的模式会查找包含“apple”、“melon”或“nut”，或者一个重复元音字母的水果。

```{r}
str_view(fruit, "apple|melon|nut")
str_view(fruit, "aa|ee|ii|oo|uu")
```

正则表达式非常紧凑，使用了大量标点符号字符，所以一开始可能会显得让人难以理解和难以阅读。不
过不用担心，随着不断实践，你会越来越熟练，简单的模式很快就会变得驾轻就熟。让
我们通过练习一些有用的`stringr`函数来开始这个过程吧。

## 关键函数 {#sec-stringr-regex-funs}

既然你已经掌握了正则表达式的基础知识，接下来就让我们使用`stringr`和`tidyr`函数来应用它们吧。在
以下部分，你将学习如何检测匹配项是否存在，如何计算匹配项的数量，如何用固定文本替换匹配项，以及如何使用模式来提取文本。

### 检测匹配项

`str_detect()` 函数返回一个逻辑向量，如果模式与字符向量中的某个元素匹配，则返回`TRUE`，否则返回`FALSE`：

```{r}
str_detect(c("a", "b", "c"), "[aeiou]")
```

由于`str_detect()`返回一个与初始向量长度相同的逻辑向量，因此能与`filter()`搭配很好。例
如，这段代码用于查找所有包含小写字母"x"的最受欢迎的名字：

```{r}
babynames |> 
  filter(str_detect(name, "x")) |> 
  count(name, wt = n, sort = TRUE)
```

还可以通过将`str_detect()`与`summarize()`结合，并搭配`sum()`或`mean()`来使用。`s`
`um(str_detect(x, pattern))`告诉你匹配的观测的数量，而`mean(str_detect(x, pattern))`告诉你匹配的比例。例
如，以下代码段计算和可视化了按年份划分的婴儿名字[^regexps-4] 包含"x"的比例。
看来最近它们的受欢迎程度大幅增加了！

[^regexps-4]: 这给出了包含"x"的名字的比例；如果你想要知道名字中包含"x"的婴儿的比例，你需要计算一个加权平均值。

```{r}
#| fig-alt: |
#|   A time series showing the proportion of baby names that contain the letter x. 
#|   The proportion declines gradually from 8 per 1000 in 1880 to 4 per 1000 in 
#|   1980, then increases rapidly to 16 per 1000 in 2019.

babynames |> 
  group_by(year) |> 
  summarize(prop_x = mean(str_detect(name, "x"))) |> 
  ggplot(aes(x = year, y = prop_x)) + 
  geom_line()
```

与`str_detect()`密切相关的两个函数是`str_subset()`和`str_which()`。`s`
`tr_subset()`返回一个只包含匹配字符串的字符向量；`str_which()`返回一个给出匹配字符串位置的整数向量。

### 匹配次数

从复杂度来看，比`str_detect()`更进一步的是`str_count()`：它不仅仅告诉你匹配与否，还会告诉你每个字符串中有多少匹配项。

```{r}
x <- c("apple", "banana", "pear")
str_count(x, "p")
```

请注意，每个匹配都从上一个匹配的末尾开始，即正则表达式匹配永远不会重叠。例
如，在`"abababa"`中，`"aba"`模式将匹配多少次？正
则表达式说是两次，而不是三次：

```{r}
str_count("abababa", "aba")
str_view("abababa", "aba")
```

`str_count()`与`mutate()`结合使用是很自然的。下
面的示例使用`str_count()`与字符类来计算每个名字中的元音和辅音字母的数量。

```{r}
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

如果仔细观察，你会注意到我们的计算有些问题："Aaban" 包含三个 "a"，但我们的汇总报告只显示了两个元音字母。这
是因为正则表达式是区分大小写的。有
三种方法可以修复这个问题：

-   将大写元音字母添加到字符类中：

    `str_count(name, "[aeiouAEIOU]")`。

-   告诉正则表达式忽略大小写：

    `str_count(name, regex("[aeiou]", ignore_case = TRUE))`。

    我们将在 @sec-flags 讨论更多内容。

-   使用`str_to_lower()`将名字转换为小写：

    `str_count(str_to_lower(name), "[aeiou]")`。

在处理字符串时，这种多样化的方法是非常典型的——通常有多种方式可以达到你的目标，要么是通过使你的模式更复杂，要么是对你的字符串进行一些预处理。如
果你在使用一种方法时遇到困难，从另一个角度解决问题往往是有用的。

在这种情况下，由于我们对名字应用了两个函数，我认为先转换它更容易：

```{r}
babynames |> 
  count(name) |> 
  mutate(
    name = str_to_lower(name),
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

### 替换值

除了检测和计算匹配项之外，我们还可以使用`str_replace()`和`str_replace_all()`来修改它们。`s`
`tr_replace()`替换第一个匹配项，如其名所示；`str_replace_all()`则会替换所有匹配项。

```{r}
x <- c("apple", "pear", "banana")
str_replace_all(x, "[aeiou]", "-")
```

`str_remove()` and `str_remove_all()` are handy shortcuts for `str_replace(x, pattern, "")`:

```{r}
x <- c("apple", "pear", "banana")
str_remove_all(x, "[aeiou]")
```

在进行数据清洗时，这些函数通常会与`mutate()`一起使用，并且你会经常反复应用它们来消除不一致格式的多层结构。

### 提取变量 {#sec-extract-variables}

我们要讨论的最后一个函数`separate_wider_regex()`使用正则表达式将数据从一个列提取到一个或多个新列中。它
与你在 @sec-string-columns 中了解的`separate_wider_position()`和`separate_wider_delim()`是同类函数。这
些函数存在于`tidyr`中，因为它们操作的是数据框（的列），而不是单独的向量。

让我们创建一个简单的数据集来展示它的工作原理。这
里我们有一些从`babynames`派生的数据，其中包含了一些人的名字、性别和年龄，但这些数据的格式相当奇怪的[^regexps-5]：

[^regexps-5]: 我们希望能向你保证，在现实生活中你永远不会看到这种奇怪的数据格式；但不幸的是，在你的职业生涯中，你可能会看到比这更奇怪的数据格式！

```{r}
df <- tribble(
  ~str,
  "<Sheryl>-F_34",
  "<Kisha>-F_45", 
  "<Brandon>-N_33",
  "<Sharon>-F_38", 
  "<Penny>-F_58",
  "<Justin>-M_41", 
  "<Patricia>-F_84", 
)
```

要使用`separate_wider_regex()`提取这些数据，我们只需要构建一系列与每个部分匹配的正则表达式。如
果希望该部分内容出现在输出中，给它指定一个名称：

```{r}
df |> 
  separate_wider_regex(
    str,
    patterns = c(
      "<", 
      name = "[A-Za-z]+", 
      ">-", 
      gender = ".",
      "_",
      age = "[0-9]+"
    )
  )
```

如果匹配失败，你可以使用`too_few = "debug"`来找出问题所在，就像`separate_wider_delim()`和`separate_wider_position()`一样。

### 练习

1.  哪个婴儿名字中含有的元音字母最多？哪
    个名字的元音字母比例最高？（
    提示：分母是什么？）

2.  将 `"a/b/c/d/e"` 中的所有正斜杠（/）替换为反斜杠（\\）。如
    果 试图通过将所有反斜杠替换为正斜杠来撤销这个转换会发生什么？（
    我们很快就会讨论这个问题。）

3.  使用`str_replace_all()`实现一个简单的`str_to_lower()`版本。

4.  创建一个正则表达式，用来匹配你所在国家常见的电话号码书写方式。

## 模式的细节

现在你已经了解了模式语言的基础知识，以及如何将其与一些`stringr`和`tidyr`函数一起使用，现在是时候深入了解更多细节了。首
先，我们将从转义（**escaping**）开始，它允许你匹配通常会被特殊处理的元字符。接
下来，你将学习锚点（**anchors**），它允许你匹配字符串的开始或结束。然
后，你将更深入地了解字符类（**character classes**）和它们的快捷方式，它们允许你匹配集合中的任何字符。接
着，你将学习量词（**quantifiers**）的最后一些细节，它们控制模式可以匹配多少次。之
后，我们必须覆盖重要（但复杂）的主题，即运算符优先级（**operator precedence**）和括号。最
后，我们将以模式分组（**grouping**）组件的一些细节结束。

我们在这里使用的术语是每个组件的技术名称。它
们并不总是最能体现其目的，但如果你以后想在网上搜索更多细节，知道正确的术语会很有帮助。

### 转义 {#sec-regexp-escaping}

为了匹配字面上的`.`，你需要一个转义符，它告诉正则表达式要从字面上匹配元字符[^regexps-6]。
和字符串一样，正则表达式使用反斜杠进行转义。
因此，要匹配`.`，正则表达式为`\.`。不幸的是这会造成一个问题。
我们使用字符串来表示正则表达式，而`\`也在字符串中用作转义符。
因此，要创建正则表达式`\.`，我们需要字符串`"\\."`，如下例所示。

[^regexps-6]: 元字符的完备集为 `.^$\|*+?{}[]()`

```{r}
# To create the regular expression \., we need to use \\.
dot <- "\\."

# But the expression itself only contains one \
str_view(dot)

# And this tells R to look for an explicit .
str_view(c("abc", "a.c", "bef"), "a\\.c")
```

在这本书中，我们通常会在没有引号的情况下编写正则表达式，比如`\.`。如
果我们需要强调实际输入的内容，我们会用引号将其括起来并添加额外的转义字符，比如`"\\."`。

如果`\`在正则表达式中被用作转义字符，那么如何匹配一个实际的`\`呢？你
需要对它进行转义，创建正则表达式`\\`。为
了创建这个正则表达式，你需要使用字符串，而字符串本身也需要对`\`进行转义。这
意味着要匹配一个实际的`\`，你需要写`"\\\\"`——你需要四个反斜杠来匹配一个！

```{r}
x <- "a\\b"
str_view(x)
str_view(x, "\\\\")
```

或者，你可能发现使用 @sec-raw-strings 中学到的原始字符串会更加简单。这
样可以让你避免一层的转义：

```{r}
str_view(x, r"{\\}")
```

如果你试图匹配一个字面上的`.`、`$`、`|`、`*`、`+`、`?`、`{`、`}`、`(`或`)`，除了使用反斜杠转义之外还有一个替代方案：你可以使用字符类：`.`、`$`、`|`、...
都匹配其字面值。

```{r}
str_view(c("abc", "a.c", "a*c", "a c"), "a[.]c")
str_view(c("abc", "a.c", "a*c", "a c"), ".[*]c")
```

### 锚点

默认情况下，正则表达式会匹配字符串的任何部分。如
果你想在开头或结尾处进行匹配，你需要使用`^`来锚定正则表达式的开始，或者使用`$`来锚定正则表达式的结束：

```{r}
str_view(fruit, "^a")
str_view(fruit, "a$")
```

可能会让人误以为`$`应该匹配字符串的开始，因为我们常常这样写金额，但这并不是正则表达式所期望的。

要强制正则表达式仅匹配整个字符串，需要用`^`和`$`同时进行锚定：

```{r}
str_view(fruit, "apple")
str_view(fruit, "^apple$")
```

你也可以使用`\b`来匹配单词之间的边界（即单词的开始或结束）。这
在使用 RStudio 的查找和替换工具时特别有用。例
如，如果你想查找所有`sum()`的用法，你可以搜索`\bsum\b`来避免匹配到`summarize`、`summary`、`rowsum`等单词：

```{r}
x <- c("summary(x)", "summarize(df)", "rowsum(x)", "sum(x)")
str_view(x, "sum")
str_view(x, "\\bsum\\b")
```

当单独使用时，锚点会产生一个零宽度的匹配：

```{r}
str_view("abc", c("$", "^", "\\b"))
```

这有助于你理解当替换一个单独的锚点时会发生什么：

```{r}
str_replace_all("abc", c("$", "^", "\\b"), "--")
```

### 字符类

字符类（或字符集）允许你匹配集合中的任何字符。如
上所述，你可以使用`[]`来构建自己的集合，其中`[abc]`匹配 "a"、"b" 或 "c"，而`[^abc]`匹配除了 "a"、"b" 或 "c" 之外的任何字符。除
了`^`之外，`[]`内还有两个字符具有特殊含义：

-   `-` 定义了一个范围，例如，`[a-z]` 匹配任何小写字母，而 `[0-9]` 匹配任何数字。
-   `\` 用于转义特殊字符，因此`[\^\-\]]`匹配字符`^`、`-`或`]`。

这里有几个例子

```{r}
x <- "abcd ABCD 12345 -!@#%."
str_view(x, "[abc]+")
str_view(x, "[a-z]+")
str_view(x, "[^a-z0-9]+")

# You need an escape to match characters that are otherwise
# special inside of []
str_view("a-b-c", "[a-c]")
str_view("a-b-c", "[a\\-c]")
```

一些字符类由于使用得非常频繁，因此它们有自己的快捷方式。你
已经见过`.`，它匹配除了换行符之外的任何字符。这
里还有另外三对特别有用的快捷方式[^regexps-7]：

[^regexps-7]: 记住，要创建一个包含`\d`或`\s`的正则表达式，你需要对字符串中的`\`进行转义，所以你需要输入`\\d`或`\\s`。

-   `\d` 匹配任何数字；\
    `\D` 匹配任何不是数字的字符；
-   `\s` 匹配任何空白字符（如，空格、制表符、换行符）；\
    `\S` 匹配任何不是空白字符的字符；
-   `\w` 匹配任何“单词”字符，即字母和数字；\
    `\W` 匹配任何“非单词”字符。

以下代码通过选择字母、数字和标点符号字符来演示这六个快捷方式。

```{r}
x <- "abcd ABCD 12345 -!@#%."
str_view(x, "\\d+")
str_view(x, "\\D+")
str_view(x, "\\s+")
str_view(x, "\\S+")
str_view(x, "\\w+")
str_view(x, "\\W+")
```

### 量词 {#sec-quantifiers}

量词（**Quantifiers**）控制模式匹配的次数。在
@sec-reg-basics 中学习了 `?`（匹配0次或1次）、`+`（匹配1次或多次）和`*`（匹配0次或多次）。例
如，`colou?r` 将匹配美式或英式拼写，`\d+` 将匹配一个或多个数字，而 `\s?` 将可选地匹配一个空白字符。你
还可以使用 `{}` 来精确指定匹配次数：

-   `{n}` 恰好匹配 n 次；
-   `{n,}` 匹配至少 n 次；
-   `{n,m}` 匹配 n 到 m 次。

### 运算符优先级和括号

`ab+` 匹配什么？是
匹配“a”后面跟着一个或多个“b”，还是匹配“ab”重复任意次数？`^`
`a|b$` 匹配什么？是
匹配完整的字符串“a”或完整的字符串“b”，还是匹配以“a”开头的字符串或以“b”结尾的字符串？

这些问题的答案由运算符优先级确定，类似于你在学校可能学过的 PEMDAS 或 BEDMAS 规则。你
知道 `a + b * c` 相当于 `a + (b * c)` 而不是 `(a + b) * c`，因为 `*` 的优先级高于 `+`，先计算 `*` 再计算 `+`。

类似地，正则表达式也有自己的优先级规则：量词的优先级高，而替换的优先级低，这意味着 `ab+` 相当于 `a(b+)`，而 `^a|b$`相当于`(^a)|(b$)`。就
像代数一样，你可以使用括号来覆盖通常的顺序。但
与代数不同，你不太可能记住正则表达式的优先级规则，所以请随意使用括号。

### 分组和捕获

除了覆盖运算符优先级外，括号还有另一个重要作用：创建捕获组（**capturing groups**），捕获组允许你使用匹配的子组件。

使用捕获组的第一种方法是在匹配内部使用反向引用（**back reference**）引用它：`\1` 引用第一个括号中的匹配项，`\2` 引用第二个括号中的匹配项，依此类推。例
如，以下模式查找具有重复字母对的所有水果：

```{r}
str_view(fruit, "(..)\\1")
```

这个正则表达式会找到所有以相同字母对开头和结尾的单词：

```{r}
str_view(words, "^(..).*\\1$")
```

你也可以在`str_replace()`中使用反向引用。例
如，以下代码会交换`sentences`中第二个和第三个单词的顺序：

```{r}
sentences |> 
  str_replace("(\\w+) (\\w+) (\\w+)", "\\1 \\3 \\2") |> 
  str_view()
```

如果想提取每个组的匹配项，可以使用`str_match()`。但
`str_match()`返回一个矩阵，因此使用起来不是特别方便[^regexps-8]：

[^regexps-8]: 主要是因为我们在本书中从未讨论过矩阵!

```{r}
sentences |> 
  str_match("the (\\w+) (\\w+)") |> 
  head()
```

你可以将其转换为 tibble 并给列命名：

```{r}
sentences |> 
  str_match("the (\\w+) (\\w+)") |> 
  as_tibble(.name_repair = "minimal") |> 
  set_names("match", "word1", "word2")
```

但是，你基本上已经重新创建了自己的`separate_wider_regex()`版本。实
际上，在幕后，`separate_wider_regex()`将你的模式向量转换为一个使用分组来捕获命名组件的单一正则表达式。

偶尔，你会想要使用括号而不创建匹配组。你
可以使用`(?:)`来创建一个非捕获组。

```{r}
x <- c("a gray cat", "a grey dog")
str_match(x, "gr(e|a)y")
str_match(x, "gr(?:e|a)y")
```

### 练习

1.  如何匹配字面字符串`"'\`？那么 `"$^$"` 呢？

2.  为什么 `"\"`, `"\\"`, `"\\\"`这些模式都不匹配反斜杠`\`？

3.  给定`stringr::words`中的常用词汇库，创建正则表达式以查找所有满足以下条件的单词：

    a.  以 "y" 开头；
    b.  不以 "y" 开头；
    c.  以 "x" 结尾；
    d.  恰好三个字母长（不要通过使用`str_length()`来作弊！)
    e.  有七个或更多字母；
    f.  包含元音-辅音对；
    g.  在一行中至少包含两个元音-辅音对；
    h.  仅由重复的元音-辅音对组成。

4.  创建11个正则表达式，每个表达式都匹配以下单词的英式或美式拼写：airplane/aeroplane, aluminum/aluminium, analog/analogue, ass/arse, center/centre, defense/defence, donut/doughnut, gray/grey, modeling/modelling, skeptic/sceptic, summarize/summarise。尝
    试编写尽可能短的正则表达式！

5.  交换`words`中的首尾字母，哪些字符串仍然是`words`？

6.  用文字描述这些正则表达式匹配什么内容:（仔细阅读以确定每个条目是正则表达式还是定义正则表达式的字符串）

    a.  `^.*$`
    b.  `"\\{.+\\}"`
    c.  `\d{4}-\d{2}-\d{2}`
    d.  `"\\\\{4}"`
    e.  `\..\..\..`
    f.  `(.)\1\1`
    g.  `"(..)\\1"`

7.  完成位于<https://regexcrossword.com/challenges/beginner>的正则表达式初学者填字游戏。

## 模式控制

通过使用模式对象而不是仅使用字符串，可以对匹配的细节进行额外的控制。这
允许你控制所谓的正则表达式标志，并匹配各种类型的固定字符串，如下所述。

### Regex 标志 {#sec-flags}

有一些设置可以用来控制正则表达式的细节，这些设置在其他编程语言中通常被称为标志（**flags**）。在
`stringr` 中，你可以通过将模式封装在函数`regex()`的调用中来使用这些设置。最
有用的标志可能是 `ignore_case = TRUE`，因为它允许字符与其大写或小写形式匹配：

```{r}
bananas <- c("banana", "Banana", "BANANA")
str_view(bananas, "banana")
str_view(bananas, regex("banana", ignore_case = TRUE))
```

如果你经常处理多行字符串（即包含`\n`的字符串），`dotall`和`multiline`也可能是有用的：

-   `dotall = TRUE` 允许`.`匹配包括`\n`在内的所有字符：

    ```{r}
    x <- "Line 1\nLine 2\nLine 3"
    str_view(x, ".Line")
    str_view(x, regex(".Line", dotall = TRUE))
    ```

-   `multiline = TRUE` 使得 `^` 和 `$` 分别匹配每行的开始和结束，而不是整个字符串的开始和结束：

    ```{r}
    x <- "Line 1\nLine 2\nLine 3"
    str_view(x, "^Line")
    str_view(x, regex("^Line", multiline = TRUE))
    ```

最后，如果你正在编写一个复杂的正则表达式，并担心将来可能不理解它，你可以尝试使用`comments = TRUE`。这
会修改模式语言以忽略空格和换行符，以及`#`之后的所有内容。这
允许你使用注释和空格来使复杂的正则表达式更易于理解，如下例所示：

```{r}
phone <- regex(
  r"(
    \(?     # optional opening parens
    (\d{3}) # area code
    [)\-]?  # optional closing parens or dash
    \ ?     # optional space
    (\d{3}) # another three numbers
    [\ -]?  # optional space or dash
    (\d{4}) # four more numbers
  )", 
  comments = TRUE
)

str_extract(c("514-791-8141", "(123) 456 7890", "123456"), phone)
```

如果你在使用注释并且想要匹配空格、换行符或 `#`，你需要使用`\`对其进行转义。

### 固定匹配（**Fixed matches**）

你可以通过使用`fixed()`来选择不遵循正则表达式规则：

```{r}
str_view(c("", "a", "."), fixed("."))
```

`fixed()` 还允许你忽略大小写：

```{r}
str_view("x X", "X")
str_view("x X", fixed("X", ignore_case = TRUE))
```

如果你在处理非英文文本，你可能会使用`coll()`而不是`fixed()`，因为`coll()`实现了所指定区域使用的全部大小写规则。关
于区域的更多细节，请参见 @sec-other-languages 。

```{r}
str_view("i İ ı I", fixed("İ", ignore_case = TRUE))
str_view("i İ ı I", coll("İ", ignore_case = TRUE, locale = "tr"))
```

## 实践

为了将这些想法付诸实践，接下来我们将解决一些半真实的问题。我
们将讨论三种一般方法：

1.  通过创建简单的正控制和负控制来检查工作
2.  将正则表达式与布尔代数结合使用
3.  使用字符串操作创建复杂模式

### 检查你的工作

首先，让我们找出所有以“The”开头的句子。仅
使用`^`锚点是不够的：

```{r}
str_view(sentences, "^The")
```

因为这个模式也会匹配以 `They` 或 `These` 等单词开头的句子。为
了需要确保 "e" 是单词的最后一个字母，我们可以通过添加一个单词边界来实现这一点：

```{r}
str_view(sentences, "^The\\b")
```

如何查找所有以代词开头的句子呢？

```{r}
str_view(sentences, "^She|He|It|They\\b")
```

快速检查结果显示我们得到了一些错误的匹配。这
是因为我们忘记了使用括号：

```{r}
str_view(sentences, "^(She|He|It|They)\\b")
```

你可能会想，如果这种错误没有出现在前几个匹配项中，我如何才能发现它。一
个好的技巧是创建一些正匹配和负匹配项，并用它们来测试你的模式是否按预期工作：

```{r}
pos <- c("He is a boy", "She had a good time")
neg <- c("Shells come from the sea", "Hadley said 'It's a great day'")

pattern <- "^(She|He|It|They)\\b"
str_detect(pos, pattern)
str_detect(neg, pattern)
```

通常来说，举出好的正面例子比举出负面例子要容易得多，因为你需要一段时间才能熟练地使用正则表达式来预测你的弱点在哪里。尽
管如此，它们仍然是有用的:当你处理问题时，你可以慢慢积累错误的集合，确保自己永远不会犯同样的错误两次。

### 布尔运算 {#sec-boolean-operations}

想象一下，如果我们想找到只包含辅音的单词，一种方法是创建一个字符类，包含除了元音（`[^aeiou]`）之外的所有字母，然后允许这个字符类匹配任意数量的字母（`[^aeiou]+`），然后通过将其锚定到字符串的开始和结束来强制它匹配整个字符串（`^[^aeiou]+$`）：

```{r}
str_view(words, "^[^aeiou]+$")
```

但你反向思考就会使这个问题变得更简单。我
们不是寻找只包含辅音的单词，而是寻找不包含任何元音的单词：

```{r}
str_view(words[!str_detect(words, "[aeiou]")])
```

当你处理逻辑组合时，特别是涉及“和”或“非”的逻辑组合时，这是一种有用的方法。例
如，假设你想找到所有包含“a”和“b”的单词。正
则表达式中没有内置的“和”运算符，所以我们必须通过查找所有包含“a”后跟“b”或“b”后跟“a”的单词来解决这个问题：

```{r}
str_view(words, "a.*b|b.*a")
```

结合两次调用`str_detect()`的结果会更简单：

```{r}
words[str_detect(words, "a") & str_detect(words, "b")]
```

如果我们想查看是否有单词包含所有元音字母怎么办？如
果我们使用模式来做，我们需要生成 5!（
120）种不同的模式：

```{r}
#| results: false
words[str_detect(words, "a.*e.*i.*o.*u")]
# ...
words[str_detect(words, "u.*o.*i.*e.*a")]
```

结合五次对`str_detect()`的调用会简单得多：

```{r}
words[
  str_detect(words, "a") &
  str_detect(words, "e") &
  str_detect(words, "i") &
  str_detect(words, "o") &
  str_detect(words, "u")
]
```

一般来说，如果你尝试创建一个单一的正则表达式来解决你的问题却陷入了困境，不妨退一步，想想是否可以将问题分解成更小的部分，逐一解决每个挑战，然后再进行下一个。

### 用代码创建模式

如果我们想找到所有提到颜色的`sentences`怎么办？基
本思路很简单：我们只需要将分隔符与单词边界结合起来。

```{r}
str_view(sentences, "\\b(red|green|blue)\\b")
```

但是随着颜色的数量增加，手动构建这个模式会变得非常繁琐。如
果我们能把颜色存储在一个向量里，那不是很好吗？

```{r}
rgb <- c("red", "green", "blue")
```

我们可以！只
需要使用`str_c()`和`str_flatten()`从向量中创建模式：

```{r}
str_c("\\b(", str_flatten(rgb, "|"), ")\\b")
```

如果我们有一个好的颜色列表，可以使这个模式更加全面。我
们可以从R用于绘图的内置颜色列表开始:

```{r}
str_view(colors())
```

但是让我们首先排除编号的颜色变体：

```{r}
cols <- colors()
cols <- cols[!str_detect(cols, "\\d")]
str_view(cols)
```

然后我们可以将这个列表转换成一个巨大的模式。我
们不会在这里显示这个模式，因为它非常庞大，但你可以看到它的工作效果：

```{r}
pattern <- str_c("\\b(", str_flatten(cols, "|"), ")\\b")
str_view(sentences, pattern)
```

在这个例子中，`cols`只包含数字和字母，所以你不需要担心元字符。但
是一般来说，每当你从现有字符串创建模式时，最好通过`str_escape()`对它们进行处理，以确保它们按字面意义进行匹配。

### 练习

1.  对于以下每一个挑战，尝试使用单个正则表达式和多个`str_detect()`调用的组合来解决它。F
    or each of the following challenges, try solving it by using both a single regular expression, and a combination of multiple `str_detect()` calls.

    a.  找出所有以x开头或以x结尾的`words`；
    b.  找出所有以元音字母开头并以辅音字母结尾的`words`；
    c.  是否存在包含至少每一种元音字母的`words` ？

2.  构建模式来找到支持或反对“i在e前面，除非在c后面”这一规则的证据。

3.  `colors()`包含了一些像“lightgray”和“darkblue”这样的修饰符。如
    何自动识别这些修饰符？（
    考虑如何检测和移除被修饰的颜色）。

4.  创建一个正则表达式来查找任何基础R数据集。你
    可以通过`data()`的特殊用法来获取这些数据集的列表：`data(package = "datasets")$results[, "Item"]`。请
    注意，一些旧的数据集是单独的向量，这些向量在括号中包含“数据框”的名称，因此你需要去掉这些括号。

## 其他地方的正则表达式

就像在`stringr`和`tidyr`函数中一样，R中还有许多其他地方可以使用正则表达式。下
面将描述在tidyverse生态系统和基础R中其他一些有用的函数。

### tidyverse

还有三个特别有用的地方可能需要使用正则表达式：

-   `matches(pattern)` 函数会选择所有名称与给定模式匹配的变量。它
    是一个“tidyselect”函数，你可以在tidyverse生态系统中任何选择变量的函数（例如`select()`,`rename_with()`和`across()`）中使用它。

-   `pivot_longer()'s` 函数的`names_pattern`参数接受一个正则表达式向量，与`separate_wider_regex()`类似，在从具有复杂结构的变量名称中提取数据时非常有用。

-   `separate_longer_delim()`和`separate_wider_delim()`函数中的`delim`参数通常用于匹配一个固定的字符串，但你可以使用`regex()`来使其匹配一个模式。这
    在你想匹配一个逗号（后面可能跟着一个空格）时非常有用，例如`regex(", ?")`。

### 基础R

`apropos(pattern)` 会搜索全局环境中所有与给定模式匹配的对象。如
果你不太记得某个函数的名称，这是很有用的。

```{r}
apropos("replace")
```

`list.files(path, pattern)`会列出`path`中所有匹配正则表达式`pattern`的文件。例
如，你可以用它来查找当前目录下的所有 R Markdown 文件，命令如下：

```{r}
head(list.files(pattern = "\\.Rmd$"))
```

值得注意的是，基础R使用的模式语言与`stringr`使用的略有不同。这
是因为`stringr`是建立在[stringi](https://stringi.gagolewski.com)包之上的，而`stringi`包又是建立在[ICU](https://unicode-org.github.io/icu/userguide/strings/regexp.html)引擎之上的，而基础R函数则使用[TRE](https://github.com/laurikari/tre)引擎或[PCRE](https://www.pcre.org)引擎，这取决于你是否设置了`perl = TRUE`。幸
运的是，正则表达式的基础知识已经非常完善，因此你在使用本书中将要学习的模式时，很少会遇到变化。只
有当你开始依赖高级特性，如复杂的Unicode字符范围或使用`(?…)`语法的特殊特性时才需要意识到这种差异。

## 小结

由于每个标点符号都可能被赋予多重含义，正则表达式是现存最紧凑的语言之一。它
们一开始确实会让人感到困惑，但当你训练自己的眼睛去阅读它们，大脑去理解它们时，你就掌握了一项强大的技能，你可以在R和其他许多地方使用这项技能。

在本章中，通过学习最有用的`stringr`函数和正则表达式语言的最重要组件，开始了成为正则表达式大师的旅程。而
且还有很多资源可以进一步学习。

一个不错的出发点是`vignette("regular-expressions", package = "stringr")`，它记录了`stringr`支持的全部语法；另外可以从[https://www.regular-expressions.info/](https://www.regular-expressions.info/%E3%80%82)获取有用的参考信息。这
个网站不是针对R的，但可以用它来学习正则表达式的最先进特性和工作原理。

另外需要知道的是，`stringr`是由Marek Gagolewski在`stringi`的基础上实现的，如果在`stringr`中找不到你需要的函数，不要担心查阅`stringi`。你
会发现`stringi`非常容易上手，因为它遵循了`stringr`的许多相同约定。

在下一章中，我们将讨论与字符串密切相关的数据结构：因子（factors）。因
子用于在R中表示分类数据，即具有固定和已知可能值集的数据，这些可能值由字符串向量标识。
