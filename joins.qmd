# 连接 {#sec-joins}

```{r}
#| echo: false

source("_common.R")
```

## 引言

在数据分析中，很少只涉及单个数据框。通
常你会有多个数据框，并且需要将它们**连接**在一起来回答你感兴趣的问题。本
章将向你介绍两种重要的连接类型：

-   变异连接（Mutating joins），通过匹配另一个数据框中的观测值向一个数据框添加新变量；
-   筛选连接（Filtering joins），根据一个数据框中的观测值是否与另一个数据框中的观测值匹配来筛选观测值。

我们将首先讨论键 (keys)，即用于在连接中连接一对数据框的变量。我
们将通过检查`nycflights13`包中数据集的键来巩固这一理论，然后利用这些知识开始连接数据框。接
下来我们将讨论连接的工作原理，重点关注它们对行的操作。最
后，我们将讨论非等值连接（non-equi joins），这是一种比默认的等值关系更灵活的键匹配方式连接家族。

### 必要条件

在本章中，我们将使用来自dplyr的join函数来探索来自`nycflights13`的五个相关数据集。

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(nycflights13)
```

## 键（Keys）

要理解连接（join）操作，首先需要理解如何通过每个表中的一对键来连接两个表。在
本节中，你将学习两种类型的键，并在nycflights13包的数据集中看到这两种键的示例。你
还将学习如何检查你的键是否有效，以及如果表中缺少键该如何处理。

### 主键和外键

每次连接操作都涉及一对键：主键 (primary key) 和外键 (foreign key) 。**主**
**键**是一个变量或一组变量，用于唯一标识每个观测。当
需要多个变量时，这个键被称为复合键。例
如，在nycflights13包中：

-   `airlines` 记录关于每家航空公司的两项数据：承运人代码和全名。你
    可以使用其两个字母的承运人代码来识别航空公司，使`carrier` (承运人) 成为主键。

    ```{r}
    airlines
    ```

-   `airports` 记录了关于每个机场的数据。你
    可以通过其三个字母的机场代码来识别每个机场，使`faa`成为主键。

    ```{r}
    #| R.options:
    #|   width: 67
    airports
    ```

-   `planes` 记录关于每架飞机的数据。你
    可以通过其尾号来识别一架飞机，使`tailnum`成为主键。

    ```{r}
    #| R.options:
    #|   width: 67
    planes
    ```

-   `weather` 记录关于出发机场的天气数据。你
    可以通过位置和时间的组合来识别每个观测，使`origin`和`time_hour`成为复合主键。

    ```{r}
    #| R.options:
    #|   width: 67
    weather
    ```

外键是一个变量（或变量集），它对应于另一个表中的主键。例
如：

-   `flights$tailnum` 是一个外键，它对应于主键 `planes$tailnum`.
-   `flights$carrier` 是一个外键，它对应于主键 `airlines$carrier`.
-   `flights$origin` 是一个外键，它对应于主键 `airports$faa`.
-   `flights$dest` 是一个外键，它对应于主键 `airports$faa`.
-   `flights$origin`-`flights$time_hour` 是一个复合外键，它对应于复合主键 `weather$origin`-`weather$time_hour`.

这些关系在 @fig-flights-relationships 中以图形方式进行了总结。

```{r}
#| label: fig-flights-relationships
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Connections between all five data frames in the nycflights13 package.
#|   Variables making up a primary key are colored grey, and are connected
#|   to their corresponding foreign keys with arrows.
#| fig-alt: |
#|   The relationships between airports, planes, flights, weather, and
#|   airlines datasets from the nycflights13 package. airports$faa
#|   connected to the flights$origin and flights$dest. planes$tailnum
#|   is connected to the flights$tailnum. weather$time_hour and
#|   weather$origin are jointly connected to flights$time_hour and 
#|   flights$origin. airlines$carrier is connected to flights$carrier.
#|   There are no direct connections between airports, planes, airlines, 
#|   and weather data frames.
knitr::include_graphics("diagrams/relational.png", dpi = 270)
```

你会注意到这些键的设计中的一个很好的特征：主键和外键几乎总是具有相同的名称，正如你很快就会看到的，这将使你的连接操作变得更加容易。同
样值得注意的是相反的关系：在多个表中使用的几乎每个变量名在每个位置都有相同的含义。只
有一个例外：在`flights`表中`year`表示出发年份，而在`planes`表中，`year`表示制造年份。当
我们开始实际将表连接在一起时，这一点将变得很重要。

### 检查主键

既然我们已经确定了每个表的主键，那么验证它们确实能唯一地标识每个观测是明智的做法。一
种方法是`count()`主键的数量，并查找`n`大于 1 的条目。结
果表明`planes`和`weather`两个表都没有问题：

```{r}
planes |> 
  count(tailnum) |> 
  filter(n > 1)

weather |> 
  count(time_hour, origin) |> 
  filter(n > 1)
```

你也应该检查主键中是否有缺失值：如果某个值缺失了，那么它就无法标识一个观测！

```{r}
planes |> 
  filter(is.na(tailnum))

weather |> 
  filter(is.na(time_hour) | is.na(origin))
```

### 代理键 (Surrogate keys)

到目前为止，我们还没有谈到`flights`的主键。在
这里它不是特别重要，因为没有数据框使用它作为外键；但考虑它仍然是有用的，因为如果我们有某种方式可以向其他人描述观测，那么处理这些观测会更加容易。

经过一些思考和尝试，我们确定有三个变量一起能够唯一地标识每次航班：

```{r}
flights |> 
  count(time_hour, carrier, flight) |> 
  filter(n > 1)
```

缺少重复项是否自动使`time_hour`-`carrier`-`flight`成为主键？当
然这是一个好的开始，但并不能保证成功。例
如，海拔和纬度是否适合作为`airports`的主键？

```{r}
airports |>
  count(alt, lat) |> 
  filter(n > 1)
```

仅通过海拔和纬度来识别机场显然是一个糟糕的主意，而且通常仅凭数据本身是无法知道变量组合是否可以成为一个好的主键的。但
是对于航班来说，`time_hour`、`carrier`和`flight`的组合看起来是合理的，因为如果同时有多个航班在空中使用相同的航班号，对于航空公司和其客户来说会非常混乱的。

不过，我们最好使用行号来引入一个简单的数字代理键：

```{r}
flights2 <- flights |> 
  mutate(id = row_number(), .before = 1)
flights2
```

代理键在与他人交流时特别有用：告诉某人查看航班2001比告诉某人查看2013年1月3日上午9点起飞的UA430航班要容易得多。

### 练习

1.  在 @fig-flights-relationships 中，我们忘记了画出`weather` 和`airports`之间的关系。这
    种关系是什么？它
    应该如何出现在图中？

2.  `weather` 数据只包含纽约市三个出发机场的信息。如
    果它包含了美国所有机场的天气记录，那么它会与`flights`产生什么样的额外关联？

3.  `year`, `month`, `day`, `hour`, 和 `origin` 几乎构成了天气的复合键，但是有一个小时有重复的观察记录。你
    能找出那个小时有什么特别之处吗？

4.  我们知道一年中的某些天是特殊的，通常会比平时少人乘坐飞机（例如，平安夜和圣诞节）。你
    如何将这些数据表示为数据框？主
    键会是什么？它
    将如何与现有的数据框连接？

5.  画一个图，说明Lahman包中`Batting`、`People`和`Salaries`数据框之间的连接关系。再
    画一个图，显示`People`、`Managers`和`AwardsManagers`之间的关系。你
    会如何描述`Batting`、`Pitching`和`Fielding`数据框之间的关系？

## 基本连接 {#sec-mutating-joins}

既然你已经理解了如何通过键来连接数据框，现在就可以开始使用连接来更好地理解`flights`数据集了。d
plyr提供了六种连接函数：`left_join()`、`inner_join()`、`right_join()`、`full_join()`、`semi_join()`和`anti_join()`。这
些函数都具有相同的接口：它们接受一对数据框（`x`和`y`）并返回一个数据框。输
出中行和列的顺序主要由`x`决定。

在本节中，你将学习如何使用一个变异连接`left_join()`和两个筛选连接`semi_join()`和`anti_join()`。在
下一节中，你将详细了解这些函数是如何工作的，包括剩下的`inner_join()`、`right_join()`和`full_join()`。

### 变异连接

**变异连接**允许你将两个数据框中的变量组合起来：它首先通过键来匹配观测值，然后将一个数据框中的变量复制到另一个数据框中。与
`mutate()`函数类似，连接函数将变量添加到右侧，因此如果你的数据集有很多变量，你可能不会立即看到新添加的变量。为
了这些示例，我们将通过创建一个仅包含六个变量的较窄数据集来更容易地查看发生了什么[^joins-1]：

[^joins-1]: 记住，在RStudio中，你也可以使用`View()`来避免这个问题。

```{r}
flights2 <- flights |> 
  select(year, time_hour, origin, dest, tailnum, carrier)
flights2
```

变异连接有四种类型，但有一种你几乎总是会用到：`left_join()`。它
很特别，因为输出总是与`x`（你正在连接的数据框）有相同的行[^joins-2]。
`left_join()`的主要用途是添加额外的元数据。
例如，我们可以使用`left_join()`向`flights2`数据中添加完整的航空公司名称：

[^joins-2]: 这并不是百分百正确，但如果不是，你就会得到警告。

```{r}
flights2 |>
  left_join(airlines)
```

或者我们可以查找每架飞机起飞时的温度和风速：

```{r}
flights2 |> 
  left_join(weather |> select(origin, time_hour, temp, wind_speed))
```

或者查看当时飞行的是哪种大小的飞机：

```{r}
flights2 |> 
  left_join(planes |> select(tailnum, type, engines, seats))
```

当`left_join()`找不到与`x`中某行相匹配的记录时，它会用缺失值来填充新的变量。例
如，没有关于尾号为`N3ALAA`的飞机的信息，因此其`type`、`engines`和`seats`将是缺失的：

```{r}
flights2 |> 
  filter(tailnum == "N3ALAA") |> 
  left_join(planes |> select(tailnum, type, engines, seats))
```

在本章剩下的部分，我们还会多次回到这个问题。

### 指定连接键

默认情况下，`left_join()`会使用两个数据框中都出现的所有变量作为连接键，这被称为自然连接 (**natural** join)。这
是一个有用的启发式方法，但并不总是有效。例
如，如果我们尝试将`flights2`与完整的`planes`数据集连接，会发生什么呢？

```{r}
flights2 |> 
  left_join(planes)
```

我们得到了很多缺失的匹配项，因为连接试图使用`tailnum`和`year`作为复合键。`f`
`lights`和`planes`都有一个`year`列，但它们表示的是不同的含义：`flights$year`是航班发生的年份，而`planes$year`是飞机制造的年份。我
们只想通过`tailnum`进行连接，因此我们需要使用`join_by()`来提供一个明确的规范。

```{r}
flights2 |> 
  left_join(planes, join_by(tailnum))
```

请注意，在输出中`year`变量通过后缀（`year.x` 和 `year.y`）来区分，以告诉你该变量来自`x`还是`y`参数。你
可以使用`suffix`参数来覆盖默认后缀。

`join_by(tailnum)`是`join_by(tailnum == tailnum)`的简写。了
解这种完整形式很重要，原因有两个：首先，它描述了两个表之间的关系：键必须相等。这
就是为什么这种连接类型通常被称为等值连接 (**equi join**)。你
将在\@sec-non-equi-joins 学习非等值连接。

其次，这是你在每个表中指定不同连接键的方式。例
如，有两种方式可以将`flight2`和`airports`表连接起来：通过`dest`或`origin`。

```{r}
flights2 |> 
  left_join(airports, join_by(dest == faa))

flights2 |> 
  left_join(airports, join_by(origin == faa))
```

在旧代码中，你可能会看到使用字符向量来指定连接键的不同方式：

-   `by = "x"`对应于`join_by(x)`。
-   `by = c("a" = "x")`对应于`join_by(a == x)`。

既然现在有了`join_by()`，我们更倾向于使用它，因为它提供了更清晰且更灵活的规范。

`inner_join()`、`right_join()`、`full_join()`与`left_join()`的接口相同。它
们之间的区别在于保留哪些行：左连接保留`x`中的所有行，右连接保留`y`中的所有行，全连接保留`x`或`y`中的所有行，而内连接仅保留在`x`和`y`中都出现的行。我
们将在稍后更详细地讨论这些连接类型。

### 筛选连接

正如你可能猜到的，筛选连接的主要操作是筛选行。有
两种类型：半连接（semi-join）和反连接（anti-join）。半
连接保留`x`在`y`中有匹配项的所有行。例
如，我们可以使用半连接来筛选机场数据集，仅显示始发机场：

```{r}
airports |> 
  semi_join(flights2, join_by(faa == origin))
```

或者仅仅是目的地:

```{r}
airports |> 
  semi_join(flights2, join_by(faa == dest))
```

反连接则相反：它们返回x在y中没有匹配项的所有行。它
们在寻找数据中隐式的缺失值方面很有用，这是 @sec-missing-implicit 的主题。隐
式的缺失值不会显示为`NA`，而仅表现为缺失。例
如，我们可以通过查找没有匹配目的地机场的航班来找到`airports`数据集中缺失的行：

```{r}
flights2 |> 
  anti_join(airports, join_by(dest == faa)) |> 
  distinct(dest)
```

或者我们可以找出哪些`tailnum`在`planes`数据集中缺失：

```{r}
flights2 |>
  anti_join(planes, join_by(tailnum)) |> 
  distinct(tailnum)
```

### 练习

1.  找出全年中延误最严重的48小时，并与`weather`数据进行交叉比对。你
    能否看到任何模式？

2.  假设你使用这段代码找到了最受欢迎的10个目的地:

    ```{r}
    top_dest <- flights2 |>
      count(dest, sort = TRUE) |>
      head(10)
    ```

    你怎样才能找到去这些目的地的所有航班呢?

3.  是否每个起飞的航班都有对应的该小时天气数据？

4.  那些在`planes`中没有匹配记录的尾号有什么共同之处？(
    提示: 一个变量解释了约90%的问题）

5.  给`planes`数据框添加一个列，列出飞过该飞机的所有航空公司。你
    可能会期望飞机和航空公司之间存在一种隐式关系，因为每架飞机都由单一的航空公司运营。使
    用你在前几章中学到的工具来证实或反驳这一假设。

6.  将起飞机场和目的地机场的纬度和经度添加到`flights`数据框中。在
    连接之前还是之后重命名列更容易？

7.  按目的地计算平均延误时间，然后与`airports`数据框进行连接，以便你可以展示延误的空间分布。以
    下是一个绘制美国地图的简单方法：

    ```{r}
    #| eval: false

    airports |>
      semi_join(flights, join_by(faa == dest)) |>
      ggplot(aes(x = lon, y = lat)) +
        borders("state") +
        geom_point() +
        coord_quickmap()
    ```

    你可能想使用点的大小或颜色来显示每个机场的平均延误时间。

8.  2013年6月13日发生了什么？画
    一张延误地图，然后使用Google与天气进行交叉比对。

    ```{r}
    #| eval: false
    #| include: false

    worst <- filter(flights, !is.na(dep_time), month == 6, day == 13)
    worst |>
      group_by(dest) |>
      summarize(delay = mean(arr_delay), n = n()) |>
      filter(n > 5) |>
      inner_join(airports, join_by(dest == faa)) |>
      ggplot(aes(x = lon, y = lat)) +
        borders("state") +
        geom_point(aes(size = n, color = delay)) +
        coord_quickmap()
    ```

## 连接是如何工作的?

既然你已经使用连接操作几次了，现在是时候深入了解它们是如何工作的了，重点关注`x`中的每一行如何与`y`中的行进行匹配。我
们将从引入连接的视觉表示开始，使用下面定义的简单tibble，并在 @fig-join-setup 中展示。在
这些例子中，我们将使用名为`key`的单个键和一个值列（`val_x`和val_y），但这些想法都可以推广到多个键和多个值。

```{r}
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     3, "x3"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2",
     4, "y3"
)
```

```{r}
#| label: fig-join-setup
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Graphical representation of two simple tables. The colored `key`
#|   columns map background color to key value. The grey columns represent
#|   the "value" columns that are carried along for the ride. 
#| fig-alt: |
#|   x and y are two data frames with 2 columns and 3 rows, with contents
#|   as described in the text. The values of the keys are colored:
#|   1 is green, 2 is purple, 3 is orange, and 4 is yellow.

knitr::include_graphics("diagrams/join/setup.png", dpi = 270)
```

@fig-join-setup2 为我们的视觉表示法奠定了基础。它
展示了`x`和`y`之间所有可能的匹配，这些匹配是从`x`的每一行和`y`的每一行绘制出的线条的交点。输
出结果中的行和列主要由`x`决定，因此`x`表格是水平的，并且与输出结果对齐。

```{r}
#| label: fig-join-setup2
#| echo: false
#| out-width: ~
#| fig-cap: | 
#|   To understand how joins work, it's useful to think of every possible
#|   match. Here we show that with a grid of connecting lines.
#| fig-alt: |
#|   x and y are placed at right-angles, with horizonal lines extending 
#|   from x and vertical lines extending from y. There are 3 rows in x and 
#|   3 rows in y, which leads to nine intersections representing nine
#|   potential matches.

knitr::include_graphics("diagrams/join/setup2.png", dpi = 270)
```

为了描述一种特定的连接类型，我们用点来表示匹配项，这些匹配项决定了输出的行。输
出是一个新的数据框，包含键、x值和y值。例
如，@fig-join-inner 展示了内连接，只有当键相等时，行才会被保留。

```{r}
#| label: fig-join-inner
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   An inner join matches each row in `x` to the row in `y` that has the
#|   same value of `key`. Each match becomes a row in the output.
#| fig-alt: |
#|   x and y are placed at right-angles with lines forming a grid of
#|   potential matches. Keys 1 and 2 appear in both x and y, so we
#|   get a match, indicated by a dot. Each dot corresponds to a row
#|   in the output, so the resulting joined data frame has two rows.

knitr::include_graphics("diagrams/join/inner.png", dpi = 270)
```

我们可以应用同样的原理来解释外连接 (**outer joins**)，外连接会保留至少在一个数据框中出现的观测值。这
些连接通过在每个数据框中添加一个额外的“虚拟”观测值来实现。这
个观测值具有一个键，当没有其他键匹配时，它会匹配，并将值填充为`NA`。有
三种类型的外连接：

-   左连接保留`x`中的所有观测值，如 @fig-join-left 所示。`x`
    的每一行都保留在输出中，因为它可以退回到与`y`中的`NA`行进行匹配。

    ```{r}
    #| label: fig-join-left
    #| echo: false
    #| out-width: ~
    #| fig-cap: | 
    #|   A visual representation of the left join where every row in `x`
    #|   appears in the output.
    #| fig-alt: |
    #|   Compared to the previous diagram showing an inner join, the y table
    #|   gets a new virtual row containin NA that will match any row in x
    #|   that didn't otherwise match. This means that the output now has
    #|   three rows. For key = 3, which matches this virtual row, val_y takes
    #|   value NA.

    knitr::include_graphics("diagrams/join/left.png", dpi = 270)
    ```

-   右连接保留`y`中的所有观测值，如图 @fig-join-right 所示。`y`
    的每一行都保留在输出中，因为它可以退回到与`x`中的`NA`行进行匹配。输
    出仍然尽可能与`x`进行匹配；`y`中的任何额外行都会添加到末尾。

    ```{r}
    #| label: fig-join-right
    #| echo: false
    #| out-width: ~
    #| fig-cap: | 
    #|   A visual representation of the right join where every row of `y` 
    #|   appears in the output. 
    #| fig-alt: |
    #|   Compared to the previous diagram showing an left join, the x table
    #|   now gains a virtual row so that every row in y gets a match in x.
    #|   val_x contains NA for the row in y that didn't match x.

    knitr::include_graphics("diagrams/join/right.png", dpi = 270)
    ```

-   全连接保留出现在`x`或`y`中的所有观测值，如图 @fig-join-full 所示。`x`
    和`y`的每一行都包含在输出中，因为`x`和`y`都有一个回退行为`NA`。同
    样，输出以`x`的所有行开始，然后是剩余的未匹配的`y`行。

    ```{r}
    #| label: fig-join-full
    #| echo: false
    #| out-width: ~
    #| fig-cap: | 
    #|   A visual representation of the full join where every row in `x`
    #|   and `y` appears in the output.
    #| fig-alt: |
    #|   Now both x and y have a virtual row that always matches.
    #|   The result has 4 rows: keys 1, 2, 3, and 4 with all values 
    #|   from val_x and val_y, however key 2, val_y and key 4, val_x are NAs
    #|   since those keys don't have a match in the other data frames.

    knitr::include_graphics("diagrams/join/full.png", dpi = 270)
    ```

另一种展示不同类型的外连接差异的方法是使用文氏图 (Venn diagram)，如 @fig-join-venn 所示。然
而，这并不是一个很好的表示方法，因为它虽然可能会唤起你对哪些行被保留的记忆，但它无法说明列发生了什么。

```{r}
#| label: fig-join-venn
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Venn diagrams showing the difference between inner, left, right, and
#|   full joins.
#| fig-alt: |
#|   Venn diagrams for inner, full, left, and right joins. Each join
#|   represented with two intersecting circles representing data frames x
#|   and y, with x on the right and y on the left. Shading indicates the
#|   result of the join. 
#|
#|   Inner join: the intersection is shaded. 
#|   Full join: Everything is shaded. 
#|   Left join: All of x is shaded.
#|   Right join: All of y is shaded.

knitr::include_graphics("diagrams/join/venn.png", dpi = 270)
```

这里展示的连接被称为等值连接，即当键相等时行会匹配。等
值连接是最常见的连接类型，因此我们通常会省略equi前缀，只说“内连接”而不是“等值内连接”。我
们将在\@sec-non-equi-joins 讨论非等值连接。

### 行匹配

到目前为止，我们已经探讨了`x`中的一行与`y`中的零行或一行匹配时会发生什么。但
如果它匹配多行时会发生什么呢？为
了理解这一点，让我们首先关注`inner_join()`函数，然后画一张图，如 @fig-join-match-types 所示。

```{r}
#| label: fig-join-match-types
#| echo: false
#| out-width: ~
#| fig-cap: | 
#|   The three ways a row in `x` can match. `x1` matches
#|   one row in `y`, `x2` matches two rows in `y`, `x3` matches
#|   zero rows in y. Note that while there are three rows in
#|   `x` and three rows in the output, there isn't a direct
#|   correspondence between the rows.
#| fig-alt: |
#|   A join diagram where x has key values 1, 2, and 3, and y has
#|   key values 1, 2, 2. The output has three rows because key 1 matches
#|   one row, key 2 matches two rows, and key 3 matches zero rows.

knitr::include_graphics("diagrams/join/match-types.png", dpi = 270)
```

`x`中的行有三种可能的结果：

-   如果它不匹配任何行，它将被删除；
-   如果它与`y`中的一行匹配，它将被保留；
-   如果它与`y`中的多行匹配，它将为每个匹配项复制一次。

原则上，这意味着输出中的行与`x`中的行之间没有保证的对应关系，但在实践中，这种情况很少会引起问题。然
而，有一种特别危险的情况可能导致行的组合爆炸，想象一下连接以下两个表：

```{r}
df1 <- tibble(key = c(1, 2, 2), val_x = c("x1", "x2", "x3"))
df2 <- tibble(key = c(1, 2, 2), val_y = c("y1", "y2", "y3"))
```

虽然`df1`的第一行只与`df2`中的一行匹配，但第二行和第三行都与两行匹配。这
个有时被称为多对多 (`many-to-many`) 连接，将会导致dplyr发出警告：

```{r}
df1 |> 
  inner_join(df2, join_by(key))
```

如果你有意这么做，可以按照警告的提示设置 `relationship = "many-to-many"`。

### 筛选连接

匹配的数量也决定了筛选连接的行为。半
连接保留`x`在`y`中有一个或多个匹配的行，如 @fig-join-semi 所示。反
连接保留`x`在`y`中零个匹配的行，如 @fig-join-anti 所示。在
这两种情况下，仅匹配的存在是重要的，匹配的次数并不重要。这
意味着筛选连接永远不会像变异连接那样重复行。

```{r}
#| label: fig-join-semi
#| echo: false
#| out-width: null
#| fig-cap: |
#|   In a semi-join it only matters that there is a match; otherwise
#|   values in `y` don't affect the output.
#| fig-alt: |
#|   A join diagram with old friends x and y. In a semi join, only the 
#|   presence of a match matters so the output contains the same columns
#|   as x.

knitr::include_graphics("diagrams/join/semi.png", dpi = 270)
```

```{r}
#| label: fig-join-anti
#| echo: false
#| out-width: null
#| fig-cap: |
#|   An anti-join is the inverse of a semi-join, dropping rows from `x`
#|   that have a match in `y`.
#| fig-alt: |
#|   An anti-join is the inverse of a semi-join so matches are drawn with
#|   red lines indicating that they will be dropped from the output.

knitr::include_graphics("diagrams/join/anti.png", dpi = 270)
```

## 非等值连接 {#sec-non-equi-joins}

到目前为止，你只看到了等连接（equi joins），也就是当`x`的键等于`y`的键时行才会匹配。现
在我们放宽这个限制，并讨论确定一对行是否匹配的其他方法。

但是，在我们这样做之前，我们需要回顾一下上面所做的简化。在
等连接中，`x`的键和`y`的键总是相等的，所以我们只需要在输出中显示一个。我
们可以要求dplyr通过`keep = TRUE`保留两个键，这将导致下面的代码和 @fig-inner-both 中重新绘制的`inner_join()`。

So far you've only seen equi joins, joins where the rows match if the `x` key equals the `y` key.
Now we're going to relax that restriction and discuss other ways of determining if a pair of rows match.

But before we can do that, we need to revisit a simplification we made above.
In equi joins the `x` keys and `y` are always equal, so we only need to show one in the output.
We can request that dplyr keep both keys with `keep = TRUE`, leading to the code below and the re-drawn `inner_join()` in @fig-inner-both.

```{r}
x |> inner_join(y, join_by(key == key), keep = TRUE)
```

```{r}
#| label: fig-inner-both
#| fig-cap: |
#|   An inner join showing both `x` and `y` keys in the output.
#| fig-alt: |
#|   A join diagram showing an inner join betwen x and y. The result
#|   now includes four columns: key.x, val_x, key.y, and val_y. The
#|   values of key.x and key.y are identical, which is why we usually
#|   only show one.
#| echo: false
#| out-width: ~

knitr::include_graphics("diagrams/join/inner-both.png", dpi = 270)
```

当我们从等值连接转向非等值连接时，我们总是会显示键，因为键值通常会有所不同。例
如，我们不再仅在`x$key`和`y$key`相等时才进行匹配，而是可以在`x$key`大于或等于`y$key`时进行匹配，如 @fig-join-gte 所示。d
plyr的连接函数理解等值连接和非等值连接之间的区别，因此当你执行非等值连接时，它总是会显示两个键。

```{r}
#| label: fig-join-gte
#| echo: false
#| fig-cap: |
#|   A non-equi join where the `x` key must be greater than or equal to 
#|   the `y` key. Many rows generate multiple matches.
#| fig-alt: |
#|   A join diagram illustrating join_by(key >= key). The first row
#|   of x matches one row of y and the second and thirds rows each match
#|   two rows. This means the output has five rows containing each of the 
#|   following (key.x, key.y) pairs: (1, 1), (2, 1), (2, 2), (3, 1),
#|   (3, 2).
knitr::include_graphics("diagrams/join/gte.png", dpi = 270)
```

“非等值连接”这个术语不是特别有用，因为它只告诉你这个连接不是什么，而不是它是什么。d
plyr通过识别四种特别有用的非等值连接类型来帮助你：

-   **交叉连接 (cross joins)** 匹配每一对行；
-   **不等式(inequality joins)** 使用 `<`、`<=`、`>` 和 `>=` 而不是 `==`；
-   **滚动连接 (rolling joins)** 类似于不等式连接，但只找到最接近的匹配项；
-   **重叠连接 (overlap joins)** 是一种特殊的不等式连接类型，专为处理范围而设计。

这些类型将在以下部分中更详细地描述。

### 交叉连接

交叉连接会匹配所有内容，如 @fig-join-cross 所示，生成行的笛卡尔积。这
意味着输出将具有`nrow(x) * nrow(y)`行。

```{r}
#| label: fig-join-cross
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   A cross join matches each row in `x` with every row in `y`.
#| fig-alt: |
#|   A join diagram showing a dot for every combination of x and y.
knitr::include_graphics("diagrams/join/cross.png", dpi = 270)
```

交叉连接在生成排列时很有用。例
如下面的代码生成了所有可能的名称对。因
为我们正在将`df`与其自身连接，所以这有时被称为自连接 (**self-join**)。交
叉连接使用不同的连接函数，因为在匹配每一行时，没有内连接/左连接/右连接/全连接之间的区别。

```{r}
df <- tibble(name = c("John", "Simon", "Tracy", "Max"))
df |> cross_join(df)
```

### 不等式连接

不等连接使用 `<`、`<=`、`>` 或 `>=` 来限制可能匹配的集合，如 @fig-join-gte 和 @fig-join-lt 所示。

```{r}
#| label: fig-join-lt
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   An inequality join where `x` is joined to `y` on rows where the key 
#|   of `x` is less than the key of `y`. This makes a triangular
#|   shape in the top-left corner.
#| fig-alt: |
#|   A diagram depicting an inequality join where a data frame x is joined by 
#|   a data frame y where the key of x is less than the key of y, resulting 
#|   in a triangular shape in the top-left corner.

knitr::include_graphics("diagrams/join/lt.png", dpi = 270)
```

不等连接非常通用，以至于很难提出有意义的特定用例。一
个有用的小技巧是使用它们来限制交叉连接，以便我们不是生成所有排列，而是生成所有组合：

```{r}
df <- tibble(id = 1:4, name = c("John", "Simon", "Tracy", "Max"))

df |> inner_join(df, join_by(id < id))
```

### 滚动连接

滚动连接是一种特殊的不等式连接，其中不是获取满足不等式的每一行，而是仅获取最接近的行，如 @fig-join-closest 所示。你
可以通过将`closest()`添加到不等连接中来将其转换为滚动连接。例
如`join_by(closest(x <= y))`将匹配大于或等于`x`的最小的`y`，而`join_by(closest(x > y))`将匹配小于`x`的最大的`y`。

```{r}
#| label: fig-join-closest
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   A rolling join is similar to a greater-than-or-equal inequality join
#|   but only matches the first value.
#| fig-alt: |
#|   A rolling join is a subset of an inequality join so some matches are
#|   grayed out indicating that they're not used because they're not the 
#|   "closest".
knitr::include_graphics("diagrams/join/closest.png", dpi = 270)
```

滚动连接在以下场景特别有用：假如你有两个日期表，但日期并不完全对应；你想要在表1中找到与表2中某个日期最接近的日期 (之前或之后)。

例如，假设你负责你们办公室的派对策划委员会。由
于公司比较节俭，不是举办单独的派对，而是每个季度只举办一次。确
定派对日期的规则有些复杂：派对总是在星期一举行，而且你跳过了1月的第一周，因为很多人都在休假。此
外，2022年第三季度的第一个星期一是7月4日，所以派对必须推迟一周。基
于这些规则，以下是确定的派对日期：

```{r}
parties <- tibble(
  q = 1:4,
  party = ymd(c("2022-01-10", "2022-04-04", "2022-07-11", "2022-10-03"))
)
```

现在，假设你有一张员工生日的表格：

```{r}
set.seed(123)
employees <- tibble(
  name = sample(babynames::babynames$name, 100),
  birthday = ymd("2022-01-01") + (sample(365, 100, replace = TRUE) - 1)
)
employees
```

对于每个员工，我们都想找到在他们生日之后（或当天）的第一个派对日期。我
们可以用滚动连接来表示这一点：

```{r}
employees |> 
  left_join(parties, join_by(closest(birthday >= party)))
```

然而，这种方法存在一个问题：在1月10日之前过生日的人没有派对：

```{r}
employees |> 
  anti_join(parties, join_by(closest(birthday >= party)))
```

为了解决这个问题，我们需要以不同的方式处理它，即使用重叠连接。

### 重叠连接

重叠连接提供了三个辅助函数，这些函数使用不等式连接来简化区间操作：

-   `between(x, y_lower, y_upper)` 是 `x >= y_lower, x <= y_upper`的简写；
-   `within(x_lower, x_upper, y_lower, y_upper)` 是 `x_lower >= y_lower, x_upper <= y_upper`的简写；
-   `overlaps(x_lower, x_upper, y_lower, y_upper)` 是 `x_lower <= y_upper, x_upper >= y_lower`的简写。

让我们继续生日的例子，看看如何使用这些函数。我
们之前使用的策略有一个问题：1月1日到9日之间过生日的人没有派对。因
此，明确每个派对涵盖的日期范围，并为这些早过生日的人设置一个特殊情况可能会更好：

```{r}
parties <- tibble(
  q = 1:4,
  party = ymd(c("2022-01-10", "2022-04-04", "2022-07-11", "2022-10-03")),
  start = ymd(c("2022-01-01", "2022-04-04", "2022-07-11", "2022-10-03")),
  end = ymd(c("2022-04-03", "2022-07-11", "2022-10-02", "2022-12-31"))
)
parties
```

Hadley 在数据录入方面糟糕透顶，因此他还想检查派对时间段是否重叠。一
种方法是通过自连接来检查是否有任何开始-结束区间与其他区间重叠：

```{r}
parties |> 
  inner_join(parties, join_by(overlaps(start, end, start, end), q < q)) |> 
  select(start.x, end.x, start.y, end.y)
```

哎呀，有重叠的区间，让我们修复这个问题并继续：

```{r}
parties <- tibble(
  q = 1:4,
  party = ymd(c("2022-01-10", "2022-04-04", "2022-07-11", "2022-10-03")),
  start = ymd(c("2022-01-01", "2022-04-04", "2022-07-11", "2022-10-03")),
  end = ymd(c("2022-04-03", "2022-07-10", "2022-10-02", "2022-12-31"))
)
```

现在我们可以将每个员工与他们的派对匹配起来。这
里非常适合使用`unmatched = "error"`选项，因为我们想快速找出是否有员工没有被分配到派对。

```{r}
employees |> 
  inner_join(parties, join_by(between(birthday, start, end)), unmatched = "error")
```

### 练习

1.  你能解释下面等值连接的键是如何工作的吗？它
    们的结果为什么是不同的？

    ```{r}
    x |> full_join(y, join_by(key == key))

    x |> full_join(y, join_by(key == key), keep = TRUE)
    ```

2.  在检查任何派对时间段是否与另一个派对时间段重叠时，我们在`join_by()`中使用了`q < q`。为
    什么？如
    果去掉这个不等式会发生什么?

## 小结

在本章中，你学习了如何使用变异连接和过滤连接来合并来自两个数据框的数据。在
此过程中，你学习了如何识别键，以及主键和外键之间的区别。你
还了解了连接的工作原理，以及如何计算输出将有多少行。最
后，初步了解了非等值连接的强大功能，并看到了一些有趣的应用案例。

本章结束了本书“转换”部分的内容，该部分重点关注了你可以使用单个列和tibble的工具。你
学习了dplyr和基础函数来处理逻辑向量、数字和完整表格，学习了stringr函数来处理字符串，lubridate函数来处理日期和时间，以及forcats函数来处理因子。

在本书的下一部分，你将学习更多关于如何将各种类型的数据以整齐的形式导入到R中。
