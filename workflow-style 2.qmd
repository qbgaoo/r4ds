# 工作流程: 代码风格 {#sec-workflow-style}

```{r}
#| echo: false

source("_common.R")
```

良好的编码风格就像正确的标点符号：没有它也能写代码，但它确实能让事情变得更易于阅读。即
使作为一名非常新的程序员，养成好的代码风格也是一个好主意。使
用一致的代码风格可以让他人（包括未来的你）更容易读懂你的工作，这在你需要他人帮助时变得尤为重要。本
章将介绍[tidyverse风格指南](https://style.tidyverse.org)的最重要内容，该指南在本书中贯穿始终。

刚开始为代码设置样式可能会觉得有些乏味，但如果你坚持练习，它很快就会成为你的第二天性。此
外，还有一些很棒的工具可以快速重新格式化现有的代码，比如Lorenz Walthert的[**styler**](https://styler.r-lib.org)包。一
旦你使用`install.packages("styler")`安装了这个包，一个简单的使用方法是通过RStudio的命令面板。命
令面板允许你使用任何内置的RStudio命令以及由包提供的许多插件。通
过按Cmd/Ctrl + Shift + P打开面板，然后输入“styler”来查看styler提供的所有快捷键，@fig-styler 展示了结果。

```{r}
#| label: fig-styler
#| echo: false
#| out-width: null
#| fig-cap: | 
#|   RStudio's command palette makes it easy to access every RStudio command
#|   using only the keyboard.
#| fig-alt: |
#|   A screenshot showing the command palette after typing "styler", showing
#|   the four styling tool provided by the package.

knitr::include_graphics("screenshots/rstudio-palette.png")
```

在本章中，我们将使用tidyverse和nycflights13包作为代码示例。

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(nycflights13)
```

## 名称

我们在\@sec-whats-in-a-name 简要地讨论了名称。请
记住，变量名（通过`<-`和`mutate()`创建的）应该只使用小写字母、数字和`_`。使
用`_`来分隔名称中的单词。

```{r}
#| eval: false

# Strive for:
short_flights <- flights |> filter(air_time < 60)

# Avoid:
SHORTFLIGHTS <- flights |> filter(air_time < 60)
```

作为一条通用的经验法则，最好选择长而描述性强的名称，这样更容易理解，而不是快速输入的简洁名称。在
编写代码时，短名称节省的时间相对较少（特别是当自动补全功能帮助你完成输入时），但当你回到旧代码并被迫猜测一个晦涩的缩写时，这可能会很耗时。

如果你有一组与相关事物相关的名称，请尽量保持一致。当
你忘记之前的约定时，不一致性很容易产生，所以如果你必须回去重命名事物，也不要感到难过。一
般来说，如果你有一组变量是某个主题的变体，最好给它们一个共同的前缀而不是共同的后缀，因为自动补全在变量的开头效果最好。

## 空格

在除`^`以外的数学运算符(即`-`、`==`、`<`、…)以及赋值运算符(`<-`)的两侧加上空格。

```{r}
#| eval: false

# Strive for
z <- (a + b)^2 / d

# Avoid
z<-( a + b ) ^ 2/d
```

对于常规函数调用，不要在圆括号内或圆括号外放空格。总
是在逗号后面加一个空格，就像在标准英语中一样。

```{r}
#| eval: false

# Strive for
mean(x, na.rm = TRUE)

# Avoid
mean (x ,na.rm=TRUE)
```

如果可以提高对齐效果，可以添加额外的空格。例
如，如果要在mutate()中创建多个变量，则可能需要添加空格，以便所有的`=`对齐[^workflow-style-1]。
这会使得浏览代码更容易。

[^workflow-style-1]: 由于`dep_time`是`HMM`或`HHMM`格式，因此我们使用整数除法(`%/%`)来获得小时，使用余数(也称为取模，`%%`)来获得分钟。

```{r}
#| eval: false

flights |> 
  mutate(
    speed      = distance / air_time,
    dep_hour   = dep_time %/% 100,
    dep_minute = dep_time %%  100
  )
```

## 管道 {#sec-pipes}

`|>`前面应该始终有一个空格，并且通常应该是行的最后一个元素。这
样做可以更容易地添加新步骤、重新排列现有步骤、修改步骤中的元素，并通过浏览左侧的动词（函数）来获得一个全局视角。

```{r}
#| eval: false

# Strive for 
flights |>  
  filter(!is.na(arr_delay), !is.na(tailnum)) |> 
  count(dest)

# Avoid
flights|>filter(!is.na(arr_delay), !is.na(tailnum))|>count(dest)
```

如果你正在使用管道传递数据的函数具有被命名的参数（如`mutate()`或`summarize()`），请将每个参数放在新行上。如
果函数没有命名参数（如`select()`或`filter()`），则除非参数过长无法放在一行中，否则将所有内容放在一行上。在
参数过长的情况下，你应该将每个参数放在自己的行上。

```{r}
#| eval: false

# Strive for
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# Avoid
flights |>
  group_by(
    tailnum
  ) |> 
  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())
```

在管道的第一步之后，将每行缩进两个空格。在
`|>`后面的换行后，RStudio会自动为你添加空格。如
果你将每个参数放在单独的一行上，则再缩进两个空格。确
保`)`单独放在一行上，并且不缩进，以匹配函数名的水平位置。

```{r}
#| eval: false

# Strive for 
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# Avoid
flights|>
  group_by(tailnum) |> 
  summarize(
             delay = mean(arr_delay, na.rm = TRUE), 
             n = n()
           )

# Avoid
flights|>
  group_by(tailnum) |> 
  summarize(
  delay = mean(arr_delay, na.rm = TRUE), 
  n = n()
  )
```

如果你的管道可以很容易地放在一行上，那么忽略一些规则是可以的。但
根据我们的共同经验，简短的代码片段经常会变得更长，所以通常一开始就使用所有你需要的垂直空间会在长远上节省时间。

```{r}
#| eval: false

# This fits compactly on one line
df |> mutate(y = x + 1)

# While this takes up 4x as many lines, it's easily extended to 
# more variables and more steps in the future
df |> 
  mutate(
    y = x + 1
  )
```

最后，要警惕编写非常长的管道，比如超过10-15行的管道。尝
试将它们分解成更小的子任务，并为每个任务赋予一个信息性强的名称。这
些名称将帮助读者了解正在发生的事情，并更容易地检查中间结果是否符合预期。只
要你能为某个事物赋予一个信息性强的名称，你就应该这样做，例如当你从根本上改变数据的结构时，例如在透视或汇总之后。不
要期望第一次就能做对！这
意味着，如果中间状态可以得到好的名称，就应该拆分长的管道。

## ggplot2

适用于管道的基本规则也适用于ggplot2，对待`+`就像对待`|>`一样。

```{r}
#| eval: false

flights |> 
  group_by(month) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE)
  ) |> 
  ggplot(aes(x = month, y = delay)) +
  geom_point() + 
  geom_line()
```

同样，如果你不能将函数的所有参数放在一行中，请将每个参数放在单独的一行中:

```{r}
#| eval: false

flights |> 
  group_by(dest) |> 
  summarize(
    distance = mean(distance),
    speed = mean(distance / air_time, na.rm = TRUE)
  ) |> 
  ggplot(aes(x = distance, y = speed)) +
  geom_smooth(
    method = "loess",
    span = 0.5,
    se = FALSE, 
    color = "white", 
    linewidth = 4
  ) +
  geom_point()
```

注意从 `|>` 到 `+` 的转换。我
们希望这种转换是不必要的，但不幸的是，ggplot2 是在管道发明之前编写的。

## 分段注释

随着你的脚本变长，你可以使用分段注释（sectioning comments）将文件分解成可管理的片段：

```{r}
#| eval: false

# Load data --------------------------------------

# Plot data --------------------------------------
```

RStudio提供了一个快捷键来创建这些标题(Cmd/Ctrl Shift R)，并将它们显示在编辑器左下角的代码导航下拉菜单中，如 @fig-rstudio-sections 所示。

```{r}
#| label: fig-rstudio-sections
#| echo: false
#| out-width: null
#| fig-cap: | 
#|   After adding sectioning comments to your script, you can
#|   easily navigate to them using the code navigation tool in the
#|   bottom-left of the script editor.

knitr::include_graphics("screenshots/rstudio-nav.png")
```

## 练习

1.  按照上面的指南重新设计以下管道的样式。

    ```{r}
    #| eval: false

    flights|>filter(dest=="IAH")|>group_by(year,month,day)|>summarize(n=n(),
    delay=mean(arr_delay,na.rm=TRUE))|>filter(n>10)

    flights|>filter(carrier=="UA",dest%in%c("IAH","HOU"),sched_dep_time>
    0900,sched_arr_time<2000)|>group_by(flight)|>summarize(delay=mean(
    arr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|>filter(n>10)
    ```

## 小结

在本章中，你学习了代码风格最重要的原则。这
些原则一开始可能感觉像是一套任意的规则（因为它们确实是），但随着时间的推移，当你编写更多的代码并与更多的人分享代码时，你会看到一致的样式是多么重要。别
忘了styler包，它是快速提高样式不佳的代码质量的绝佳方式。

在下一章中，我们将回到数据科学工具，学习整理数据。整
理数据是一种组织数据框的一致方式，它在tidyverse中得到了广泛应用。这
种一致性让你的生活变得更加容易，因为一旦你有了整洁的数据，它就可以与绝大多数tidyverse函数一起工作。当
然，生活从来都不容易，你在实际中遇到的大多数数据集都不会是整洁的。所
以，我们还将教你如何使用tidyr包来整理你的不整洁的数据。
